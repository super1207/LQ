// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace pb {
class ConfigSeq;
struct ConfigSeqDefaultTypeInternal;
extern ConfigSeqDefaultTypeInternal _ConfigSeq_default_instance_;
class D50ReqBody;
struct D50ReqBodyDefaultTypeInternal;
extern D50ReqBodyDefaultTypeInternal _D50ReqBody_default_instance_;
class DataHighwayHead;
struct DataHighwayHeadDefaultTypeInternal;
extern DataHighwayHeadDefaultTypeInternal _DataHighwayHead_default_instance_;
class DeleteMessageRequest;
struct DeleteMessageRequestDefaultTypeInternal;
extern DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class GroupMemberInfo;
struct GroupMemberInfoDefaultTypeInternal;
extern GroupMemberInfoDefaultTypeInternal _GroupMemberInfo_default_instance_;
class GroupMemberReqBody;
struct GroupMemberReqBodyDefaultTypeInternal;
extern GroupMemberReqBodyDefaultTypeInternal _GroupMemberReqBody_default_instance_;
class GroupMemberRspBody;
struct GroupMemberRspBodyDefaultTypeInternal;
extern GroupMemberRspBodyDefaultTypeInternal _GroupMemberRspBody_default_instance_;
class MessageItem;
struct MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class ReqDataHighwayHead;
struct ReqDataHighwayHeadDefaultTypeInternal;
extern ReqDataHighwayHeadDefaultTypeInternal _ReqDataHighwayHead_default_instance_;
class RequestBody;
struct RequestBodyDefaultTypeInternal;
extern RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
class RspDataHighwayHead;
struct RspDataHighwayHeadDefaultTypeInternal;
extern RspDataHighwayHeadDefaultTypeInternal _RspDataHighwayHead_default_instance_;
class SegHead;
struct SegHeadDefaultTypeInternal;
extern SegHeadDefaultTypeInternal _SegHead_default_instance_;
class Sub44;
struct Sub44DefaultTypeInternal;
extern Sub44DefaultTypeInternal _Sub44_default_instance_;
class Sub44FriendSyncMsg;
struct Sub44FriendSyncMsgDefaultTypeInternal;
extern Sub44FriendSyncMsgDefaultTypeInternal _Sub44FriendSyncMsg_default_instance_;
class Sub44GroupSyncMsg;
struct Sub44GroupSyncMsgDefaultTypeInternal;
extern Sub44GroupSyncMsgDefaultTypeInternal _Sub44GroupSyncMsg_default_instance_;
class Sub8A;
struct Sub8ADefaultTypeInternal;
extern Sub8ADefaultTypeInternal _Sub8A_default_instance_;
class Sub8AMsgInfo;
struct Sub8AMsgInfoDefaultTypeInternal;
extern Sub8AMsgInfoDefaultTypeInternal _Sub8AMsgInfo_default_instance_;
class SubB3;
struct SubB3DefaultTypeInternal;
extern SubB3DefaultTypeInternal _SubB3_default_instance_;
class SubB3AddFrdNotify;
struct SubB3AddFrdNotifyDefaultTypeInternal;
extern SubB3AddFrdNotifyDefaultTypeInternal _SubB3AddFrdNotify_default_instance_;
class SubD4;
struct SubD4DefaultTypeInternal;
extern SubD4DefaultTypeInternal _SubD4_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ConfigSeq* Arena::CreateMaybeMessage<::pb::ConfigSeq>(Arena*);
template<> ::pb::D50ReqBody* Arena::CreateMaybeMessage<::pb::D50ReqBody>(Arena*);
template<> ::pb::DataHighwayHead* Arena::CreateMaybeMessage<::pb::DataHighwayHead>(Arena*);
template<> ::pb::DeleteMessageRequest* Arena::CreateMaybeMessage<::pb::DeleteMessageRequest>(Arena*);
template<> ::pb::DeviceInfo* Arena::CreateMaybeMessage<::pb::DeviceInfo>(Arena*);
template<> ::pb::GroupMemberInfo* Arena::CreateMaybeMessage<::pb::GroupMemberInfo>(Arena*);
template<> ::pb::GroupMemberReqBody* Arena::CreateMaybeMessage<::pb::GroupMemberReqBody>(Arena*);
template<> ::pb::GroupMemberRspBody* Arena::CreateMaybeMessage<::pb::GroupMemberRspBody>(Arena*);
template<> ::pb::MessageItem* Arena::CreateMaybeMessage<::pb::MessageItem>(Arena*);
template<> ::pb::ReqDataHighwayHead* Arena::CreateMaybeMessage<::pb::ReqDataHighwayHead>(Arena*);
template<> ::pb::RequestBody* Arena::CreateMaybeMessage<::pb::RequestBody>(Arena*);
template<> ::pb::RspDataHighwayHead* Arena::CreateMaybeMessage<::pb::RspDataHighwayHead>(Arena*);
template<> ::pb::SegHead* Arena::CreateMaybeMessage<::pb::SegHead>(Arena*);
template<> ::pb::Sub44* Arena::CreateMaybeMessage<::pb::Sub44>(Arena*);
template<> ::pb::Sub44FriendSyncMsg* Arena::CreateMaybeMessage<::pb::Sub44FriendSyncMsg>(Arena*);
template<> ::pb::Sub44GroupSyncMsg* Arena::CreateMaybeMessage<::pb::Sub44GroupSyncMsg>(Arena*);
template<> ::pb::Sub8A* Arena::CreateMaybeMessage<::pb::Sub8A>(Arena*);
template<> ::pb::Sub8AMsgInfo* Arena::CreateMaybeMessage<::pb::Sub8AMsgInfo>(Arena*);
template<> ::pb::SubB3* Arena::CreateMaybeMessage<::pb::SubB3>(Arena*);
template<> ::pb::SubB3AddFrdNotify* Arena::CreateMaybeMessage<::pb::SubB3AddFrdNotify>(Arena*);
template<> ::pb::SubD4* Arena::CreateMaybeMessage<::pb::SubD4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit constexpr DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return new DeviceInfo();
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBootloaderFieldNumber = 1,
    kProcVersionFieldNumber = 2,
    kCodenameFieldNumber = 3,
    kIncrementalFieldNumber = 4,
    kFingerprintFieldNumber = 5,
    kBootIdFieldNumber = 6,
    kAndroidIdFieldNumber = 7,
    kBaseBandFieldNumber = 8,
    kInnerVersionFieldNumber = 9,
  };
  // string bootloader = 1;
  void clear_bootloader();
  const std::string& bootloader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bootloader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bootloader();
  PROTOBUF_MUST_USE_RESULT std::string* release_bootloader();
  void set_allocated_bootloader(std::string* bootloader);
  private:
  const std::string& _internal_bootloader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bootloader(const std::string& value);
  std::string* _internal_mutable_bootloader();
  public:

  // string procVersion = 2;
  void clear_procversion();
  const std::string& procversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_procversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_procversion();
  PROTOBUF_MUST_USE_RESULT std::string* release_procversion();
  void set_allocated_procversion(std::string* procversion);
  private:
  const std::string& _internal_procversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_procversion(const std::string& value);
  std::string* _internal_mutable_procversion();
  public:

  // string codename = 3;
  void clear_codename();
  const std::string& codename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codename();
  PROTOBUF_MUST_USE_RESULT std::string* release_codename();
  void set_allocated_codename(std::string* codename);
  private:
  const std::string& _internal_codename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codename(const std::string& value);
  std::string* _internal_mutable_codename();
  public:

  // string incremental = 4;
  void clear_incremental();
  const std::string& incremental() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_incremental(ArgT0&& arg0, ArgT... args);
  std::string* mutable_incremental();
  PROTOBUF_MUST_USE_RESULT std::string* release_incremental();
  void set_allocated_incremental(std::string* incremental);
  private:
  const std::string& _internal_incremental() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incremental(const std::string& value);
  std::string* _internal_mutable_incremental();
  public:

  // string fingerprint = 5;
  void clear_fingerprint();
  const std::string& fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fingerprint();
  PROTOBUF_MUST_USE_RESULT std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);
  private:
  const std::string& _internal_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint(const std::string& value);
  std::string* _internal_mutable_fingerprint();
  public:

  // string bootId = 6;
  void clear_bootid();
  const std::string& bootid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bootid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bootid();
  PROTOBUF_MUST_USE_RESULT std::string* release_bootid();
  void set_allocated_bootid(std::string* bootid);
  private:
  const std::string& _internal_bootid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bootid(const std::string& value);
  std::string* _internal_mutable_bootid();
  public:

  // string androidId = 7;
  void clear_androidid();
  const std::string& androidid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_androidid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_androidid();
  PROTOBUF_MUST_USE_RESULT std::string* release_androidid();
  void set_allocated_androidid(std::string* androidid);
  private:
  const std::string& _internal_androidid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_androidid(const std::string& value);
  std::string* _internal_mutable_androidid();
  public:

  // string baseBand = 8;
  void clear_baseband();
  const std::string& baseband() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_baseband(ArgT0&& arg0, ArgT... args);
  std::string* mutable_baseband();
  PROTOBUF_MUST_USE_RESULT std::string* release_baseband();
  void set_allocated_baseband(std::string* baseband);
  private:
  const std::string& _internal_baseband() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_baseband(const std::string& value);
  std::string* _internal_mutable_baseband();
  public:

  // string innerVersion = 9;
  void clear_innerversion();
  const std::string& innerversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_innerversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_innerversion();
  PROTOBUF_MUST_USE_RESULT std::string* release_innerversion();
  void set_allocated_innerversion(std::string* innerversion);
  private:
  const std::string& _internal_innerversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_innerversion(const std::string& value);
  std::string* _internal_mutable_innerversion();
  public:

  // @@protoc_insertion_point(class_scope:pb.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootloader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr procversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incremental_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr androidid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseband_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr innerversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class RequestBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RequestBody) */ {
 public:
  inline RequestBody() : RequestBody(nullptr) {}
  ~RequestBody() override;
  explicit constexpr RequestBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestBody(const RequestBody& from);
  RequestBody(RequestBody&& from) noexcept
    : RequestBody() {
    *this = ::std::move(from);
  }

  inline RequestBody& operator=(const RequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBody& operator=(RequestBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestBody* internal_default_instance() {
    return reinterpret_cast<const RequestBody*>(
               &_RequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestBody& a, RequestBody& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestBody* New() const final {
    return new RequestBody();
  }

  RequestBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RequestBody";
  }
  protected:
  explicit RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRptConfigListFieldNumber = 1,
  };
  // repeated .pb.ConfigSeq rpt_config_list = 1;
  int rpt_config_list_size() const;
  private:
  int _internal_rpt_config_list_size() const;
  public:
  void clear_rpt_config_list();
  ::pb::ConfigSeq* mutable_rpt_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ConfigSeq >*
      mutable_rpt_config_list();
  private:
  const ::pb::ConfigSeq& _internal_rpt_config_list(int index) const;
  ::pb::ConfigSeq* _internal_add_rpt_config_list();
  public:
  const ::pb::ConfigSeq& rpt_config_list(int index) const;
  ::pb::ConfigSeq* add_rpt_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ConfigSeq >&
      rpt_config_list() const;

  // @@protoc_insertion_point(class_scope:pb.RequestBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ConfigSeq > rpt_config_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ConfigSeq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ConfigSeq) */ {
 public:
  inline ConfigSeq() : ConfigSeq(nullptr) {}
  ~ConfigSeq() override;
  explicit constexpr ConfigSeq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigSeq(const ConfigSeq& from);
  ConfigSeq(ConfigSeq&& from) noexcept
    : ConfigSeq() {
    *this = ::std::move(from);
  }

  inline ConfigSeq& operator=(const ConfigSeq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSeq& operator=(ConfigSeq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSeq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigSeq* internal_default_instance() {
    return reinterpret_cast<const ConfigSeq*>(
               &_ConfigSeq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigSeq& a, ConfigSeq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigSeq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSeq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigSeq* New() const final {
    return new ConfigSeq();
  }

  ConfigSeq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSeq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigSeq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigSeq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSeq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ConfigSeq";
  }
  protected:
  explicit ConfigSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ConfigSeq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class D50ReqBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.D50ReqBody) */ {
 public:
  inline D50ReqBody() : D50ReqBody(nullptr) {}
  ~D50ReqBody() override;
  explicit constexpr D50ReqBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D50ReqBody(const D50ReqBody& from);
  D50ReqBody(D50ReqBody&& from) noexcept
    : D50ReqBody() {
    *this = ::std::move(from);
  }

  inline D50ReqBody& operator=(const D50ReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline D50ReqBody& operator=(D50ReqBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D50ReqBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const D50ReqBody* internal_default_instance() {
    return reinterpret_cast<const D50ReqBody*>(
               &_D50ReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(D50ReqBody& a, D50ReqBody& b) {
    a.Swap(&b);
  }
  inline void Swap(D50ReqBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D50ReqBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline D50ReqBody* New() const final {
    return new D50ReqBody();
  }

  D50ReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<D50ReqBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const D50ReqBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const D50ReqBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D50ReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.D50ReqBody";
  }
  protected:
  explicit D50ReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinListFieldNumber = 6,
    kAppidFieldNumber = 1,
    kMaxPkgSizeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kStartIndexFieldNumber = 4,
    kReqNumFieldNumber = 5,
    kReqMutualmarkLbsshareFieldNumber = 181001,
    kReqMusicSwitchFieldNumber = 91001,
    kReqMutualmarkAlienationFieldNumber = 101001,
    kReqMutualmarkScoreFieldNumber = 141001,
    kReqKsingSwitchFieldNumber = 151001,
  };
  // repeated int64 uinList = 6;
  int uinlist_size() const;
  private:
  int _internal_uinlist_size() const;
  public:
  void clear_uinlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uinlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_uinlist() const;
  void _internal_add_uinlist(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_uinlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 uinlist(int index) const;
  void set_uinlist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_uinlist(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      uinlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_uinlist();

  // int64 appid = 1;
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int64 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 maxPkgSize = 2;
  void clear_maxpkgsize();
  ::PROTOBUF_NAMESPACE_ID::int32 maxpkgsize() const;
  void set_maxpkgsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxpkgsize() const;
  void _internal_set_maxpkgsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 startTime = 3;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 startIndex = 4;
  void clear_startindex();
  ::PROTOBUF_NAMESPACE_ID::int32 startindex() const;
  void set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startindex() const;
  void _internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqNum = 5;
  void clear_reqnum();
  ::PROTOBUF_NAMESPACE_ID::int32 reqnum() const;
  void set_reqnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqnum() const;
  void _internal_set_reqnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqMutualmarkLbsshare = 181001;
  void clear_reqmutualmarklbsshare();
  ::PROTOBUF_NAMESPACE_ID::int32 reqmutualmarklbsshare() const;
  void set_reqmutualmarklbsshare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqmutualmarklbsshare() const;
  void _internal_set_reqmutualmarklbsshare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqMusicSwitch = 91001;
  void clear_reqmusicswitch();
  ::PROTOBUF_NAMESPACE_ID::int32 reqmusicswitch() const;
  void set_reqmusicswitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqmusicswitch() const;
  void _internal_set_reqmusicswitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqMutualmarkAlienation = 101001;
  void clear_reqmutualmarkalienation();
  ::PROTOBUF_NAMESPACE_ID::int32 reqmutualmarkalienation() const;
  void set_reqmutualmarkalienation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqmutualmarkalienation() const;
  void _internal_set_reqmutualmarkalienation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqMutualmarkScore = 141001;
  void clear_reqmutualmarkscore();
  ::PROTOBUF_NAMESPACE_ID::int32 reqmutualmarkscore() const;
  void set_reqmutualmarkscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqmutualmarkscore() const;
  void _internal_set_reqmutualmarkscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqKsingSwitch = 151001;
  void clear_reqksingswitch();
  ::PROTOBUF_NAMESPACE_ID::int32 reqksingswitch() const;
  void set_reqksingswitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqksingswitch() const;
  void _internal_set_reqksingswitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.D50ReqBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > uinlist_;
  mutable std::atomic<int> _uinlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 appid_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxpkgsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 startindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqmutualmarklbsshare_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqmusicswitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqmutualmarkalienation_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqmutualmarkscore_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqksingswitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ReqDataHighwayHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqDataHighwayHead) */ {
 public:
  inline ReqDataHighwayHead() : ReqDataHighwayHead(nullptr) {}
  ~ReqDataHighwayHead() override;
  explicit constexpr ReqDataHighwayHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDataHighwayHead(const ReqDataHighwayHead& from);
  ReqDataHighwayHead(ReqDataHighwayHead&& from) noexcept
    : ReqDataHighwayHead() {
    *this = ::std::move(from);
  }

  inline ReqDataHighwayHead& operator=(const ReqDataHighwayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDataHighwayHead& operator=(ReqDataHighwayHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDataHighwayHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDataHighwayHead* internal_default_instance() {
    return reinterpret_cast<const ReqDataHighwayHead*>(
               &_ReqDataHighwayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqDataHighwayHead& a, ReqDataHighwayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDataHighwayHead* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDataHighwayHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDataHighwayHead* New() const final {
    return new ReqDataHighwayHead();
  }

  ReqDataHighwayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDataHighwayHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDataHighwayHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDataHighwayHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDataHighwayHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqDataHighwayHead";
  }
  protected:
  explicit ReqDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqExtendinfoFieldNumber = 3,
    kMsgBaseheadFieldNumber = 1,
    kMsgSegheadFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // bytes reqExtendinfo = 3;
  void clear_reqextendinfo();
  const std::string& reqextendinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reqextendinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reqextendinfo();
  PROTOBUF_MUST_USE_RESULT std::string* release_reqextendinfo();
  void set_allocated_reqextendinfo(std::string* reqextendinfo);
  private:
  const std::string& _internal_reqextendinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqextendinfo(const std::string& value);
  std::string* _internal_mutable_reqextendinfo();
  public:

  // .pb.DataHighwayHead msgBasehead = 1;
  bool has_msgbasehead() const;
  private:
  bool _internal_has_msgbasehead() const;
  public:
  void clear_msgbasehead();
  const ::pb::DataHighwayHead& msgbasehead() const;
  PROTOBUF_MUST_USE_RESULT ::pb::DataHighwayHead* release_msgbasehead();
  ::pb::DataHighwayHead* mutable_msgbasehead();
  void set_allocated_msgbasehead(::pb::DataHighwayHead* msgbasehead);
  private:
  const ::pb::DataHighwayHead& _internal_msgbasehead() const;
  ::pb::DataHighwayHead* _internal_mutable_msgbasehead();
  public:
  void unsafe_arena_set_allocated_msgbasehead(
      ::pb::DataHighwayHead* msgbasehead);
  ::pb::DataHighwayHead* unsafe_arena_release_msgbasehead();

  // .pb.SegHead msgSeghead = 2;
  bool has_msgseghead() const;
  private:
  bool _internal_has_msgseghead() const;
  public:
  void clear_msgseghead();
  const ::pb::SegHead& msgseghead() const;
  PROTOBUF_MUST_USE_RESULT ::pb::SegHead* release_msgseghead();
  ::pb::SegHead* mutable_msgseghead();
  void set_allocated_msgseghead(::pb::SegHead* msgseghead);
  private:
  const ::pb::SegHead& _internal_msgseghead() const;
  ::pb::SegHead* _internal_mutable_msgseghead();
  public:
  void unsafe_arena_set_allocated_msgseghead(
      ::pb::SegHead* msgseghead);
  ::pb::SegHead* unsafe_arena_release_msgseghead();

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ReqDataHighwayHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqextendinfo_;
  ::pb::DataHighwayHead* msgbasehead_;
  ::pb::SegHead* msgseghead_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class RspDataHighwayHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspDataHighwayHead) */ {
 public:
  inline RspDataHighwayHead() : RspDataHighwayHead(nullptr) {}
  ~RspDataHighwayHead() override;
  explicit constexpr RspDataHighwayHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RspDataHighwayHead(const RspDataHighwayHead& from);
  RspDataHighwayHead(RspDataHighwayHead&& from) noexcept
    : RspDataHighwayHead() {
    *this = ::std::move(from);
  }

  inline RspDataHighwayHead& operator=(const RspDataHighwayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspDataHighwayHead& operator=(RspDataHighwayHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RspDataHighwayHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const RspDataHighwayHead* internal_default_instance() {
    return reinterpret_cast<const RspDataHighwayHead*>(
               &_RspDataHighwayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RspDataHighwayHead& a, RspDataHighwayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(RspDataHighwayHead* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspDataHighwayHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RspDataHighwayHead* New() const final {
    return new RspDataHighwayHead();
  }

  RspDataHighwayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspDataHighwayHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RspDataHighwayHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RspDataHighwayHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspDataHighwayHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspDataHighwayHead";
  }
  protected:
  explicit RspDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRspExtendinfoFieldNumber = 7,
    kMsgBaseheadFieldNumber = 1,
    kMsgSegheadFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
    kAllowRetryFieldNumber = 4,
    kCachecostFieldNumber = 5,
    kHtcostFieldNumber = 6,
    kTimestampFieldNumber = 8,
    kRangeFieldNumber = 9,
    kIsResetFieldNumber = 10,
  };
  // bytes rspExtendinfo = 7;
  void clear_rspextendinfo();
  const std::string& rspextendinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rspextendinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rspextendinfo();
  PROTOBUF_MUST_USE_RESULT std::string* release_rspextendinfo();
  void set_allocated_rspextendinfo(std::string* rspextendinfo);
  private:
  const std::string& _internal_rspextendinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rspextendinfo(const std::string& value);
  std::string* _internal_mutable_rspextendinfo();
  public:

  // .pb.DataHighwayHead msgBasehead = 1;
  bool has_msgbasehead() const;
  private:
  bool _internal_has_msgbasehead() const;
  public:
  void clear_msgbasehead();
  const ::pb::DataHighwayHead& msgbasehead() const;
  PROTOBUF_MUST_USE_RESULT ::pb::DataHighwayHead* release_msgbasehead();
  ::pb::DataHighwayHead* mutable_msgbasehead();
  void set_allocated_msgbasehead(::pb::DataHighwayHead* msgbasehead);
  private:
  const ::pb::DataHighwayHead& _internal_msgbasehead() const;
  ::pb::DataHighwayHead* _internal_mutable_msgbasehead();
  public:
  void unsafe_arena_set_allocated_msgbasehead(
      ::pb::DataHighwayHead* msgbasehead);
  ::pb::DataHighwayHead* unsafe_arena_release_msgbasehead();

  // .pb.SegHead msgSeghead = 2;
  bool has_msgseghead() const;
  private:
  bool _internal_has_msgseghead() const;
  public:
  void clear_msgseghead();
  const ::pb::SegHead& msgseghead() const;
  PROTOBUF_MUST_USE_RESULT ::pb::SegHead* release_msgseghead();
  ::pb::SegHead* mutable_msgseghead();
  void set_allocated_msgseghead(::pb::SegHead* msgseghead);
  private:
  const ::pb::SegHead& _internal_msgseghead() const;
  ::pb::SegHead* _internal_mutable_msgseghead();
  public:
  void unsafe_arena_set_allocated_msgseghead(
      ::pb::SegHead* msgseghead);
  ::pb::SegHead* unsafe_arena_release_msgseghead();

  // int32 errorCode = 3;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 allowRetry = 4;
  void clear_allowretry();
  ::PROTOBUF_NAMESPACE_ID::int32 allowretry() const;
  void set_allowretry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allowretry() const;
  void _internal_set_allowretry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cachecost = 5;
  void clear_cachecost();
  ::PROTOBUF_NAMESPACE_ID::int32 cachecost() const;
  void set_cachecost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cachecost() const;
  void _internal_set_cachecost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 htcost = 6;
  void clear_htcost();
  ::PROTOBUF_NAMESPACE_ID::int32 htcost() const;
  void set_htcost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_htcost() const;
  void _internal_set_htcost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 timestamp = 8;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 range = 9;
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int64 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 isReset = 10;
  void clear_isreset();
  ::PROTOBUF_NAMESPACE_ID::int32 isreset() const;
  void set_isreset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isreset() const;
  void _internal_set_isreset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.RspDataHighwayHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rspextendinfo_;
  ::pb::DataHighwayHead* msgbasehead_;
  ::pb::SegHead* msgseghead_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 allowretry_;
  ::PROTOBUF_NAMESPACE_ID::int32 cachecost_;
  ::PROTOBUF_NAMESPACE_ID::int32 htcost_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 range_;
  ::PROTOBUF_NAMESPACE_ID::int32 isreset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class DataHighwayHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DataHighwayHead) */ {
 public:
  inline DataHighwayHead() : DataHighwayHead(nullptr) {}
  ~DataHighwayHead() override;
  explicit constexpr DataHighwayHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataHighwayHead(const DataHighwayHead& from);
  DataHighwayHead(DataHighwayHead&& from) noexcept
    : DataHighwayHead() {
    *this = ::std::move(from);
  }

  inline DataHighwayHead& operator=(const DataHighwayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataHighwayHead& operator=(DataHighwayHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataHighwayHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataHighwayHead* internal_default_instance() {
    return reinterpret_cast<const DataHighwayHead*>(
               &_DataHighwayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DataHighwayHead& a, DataHighwayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(DataHighwayHead* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataHighwayHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataHighwayHead* New() const final {
    return new DataHighwayHead();
  }

  DataHighwayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataHighwayHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataHighwayHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataHighwayHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataHighwayHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DataHighwayHead";
  }
  protected:
  explicit DataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 2,
    kCommandFieldNumber = 3,
    kBuildVerFieldNumber = 9,
    kVersionFieldNumber = 1,
    kSeqFieldNumber = 4,
    kRetryTimesFieldNumber = 5,
    kAppidFieldNumber = 6,
    kDataflagFieldNumber = 7,
    kCommandIdFieldNumber = 8,
    kLocaleIdFieldNumber = 10,
  };
  // string uin = 2;
  void clear_uin();
  const std::string& uin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uin();
  PROTOBUF_MUST_USE_RESULT std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // string command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_MUST_USE_RESULT std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string buildVer = 9;
  void clear_buildver();
  const std::string& buildver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buildver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buildver();
  PROTOBUF_MUST_USE_RESULT std::string* release_buildver();
  void set_allocated_buildver(std::string* buildver);
  private:
  const std::string& _internal_buildver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buildver(const std::string& value);
  std::string* _internal_mutable_buildver();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seq = 4;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 retryTimes = 5;
  void clear_retrytimes();
  ::PROTOBUF_NAMESPACE_ID::int32 retrytimes() const;
  void set_retrytimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retrytimes() const;
  void _internal_set_retrytimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 appid = 6;
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dataflag = 7;
  void clear_dataflag();
  ::PROTOBUF_NAMESPACE_ID::int32 dataflag() const;
  void set_dataflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dataflag() const;
  void _internal_set_dataflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 commandId = 8;
  void clear_commandid();
  ::PROTOBUF_NAMESPACE_ID::int32 commandid() const;
  void set_commandid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commandid() const;
  void _internal_set_commandid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 localeId = 10;
  void clear_localeid();
  ::PROTOBUF_NAMESPACE_ID::int32 localeid() const;
  void set_localeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_localeid() const;
  void _internal_set_localeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.DataHighwayHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildver_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 retrytimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dataflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 commandid_;
  ::PROTOBUF_NAMESPACE_ID::int32 localeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SegHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SegHead) */ {
 public:
  inline SegHead() : SegHead(nullptr) {}
  ~SegHead() override;
  explicit constexpr SegHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegHead(const SegHead& from);
  SegHead(SegHead&& from) noexcept
    : SegHead() {
    *this = ::std::move(from);
  }

  inline SegHead& operator=(const SegHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegHead& operator=(SegHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegHead* internal_default_instance() {
    return reinterpret_cast<const SegHead*>(
               &_SegHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SegHead& a, SegHead& b) {
    a.Swap(&b);
  }
  inline void Swap(SegHead* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegHead* New() const final {
    return new SegHead();
  }

  SegHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SegHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SegHead";
  }
  protected:
  explicit SegHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceticketFieldNumber = 6,
    kMd5FieldNumber = 8,
    kFileMd5FieldNumber = 9,
    kFilesizeFieldNumber = 2,
    kServiceidFieldNumber = 1,
    kDatalengthFieldNumber = 4,
    kDataoffsetFieldNumber = 3,
    kRtcodeFieldNumber = 5,
    kFlagFieldNumber = 7,
    kCacheAddrFieldNumber = 10,
    kQueryTimesFieldNumber = 11,
    kUpdateCacheipFieldNumber = 12,
  };
  // bytes serviceticket = 6;
  void clear_serviceticket();
  const std::string& serviceticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceticket();
  PROTOBUF_MUST_USE_RESULT std::string* release_serviceticket();
  void set_allocated_serviceticket(std::string* serviceticket);
  private:
  const std::string& _internal_serviceticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceticket(const std::string& value);
  std::string* _internal_mutable_serviceticket();
  public:

  // bytes md5 = 8;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_MUST_USE_RESULT std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes fileMd5 = 9;
  void clear_filemd5();
  const std::string& filemd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filemd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filemd5();
  PROTOBUF_MUST_USE_RESULT std::string* release_filemd5();
  void set_allocated_filemd5(std::string* filemd5);
  private:
  const std::string& _internal_filemd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filemd5(const std::string& value);
  std::string* _internal_mutable_filemd5();
  public:

  // int64 filesize = 2;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 serviceid = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 datalength = 4;
  void clear_datalength();
  ::PROTOBUF_NAMESPACE_ID::int32 datalength() const;
  void set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datalength() const;
  void _internal_set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 dataoffset = 3;
  void clear_dataoffset();
  ::PROTOBUF_NAMESPACE_ID::int64 dataoffset() const;
  void set_dataoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dataoffset() const;
  void _internal_set_dataoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rtcode = 5;
  void clear_rtcode();
  ::PROTOBUF_NAMESPACE_ID::int32 rtcode() const;
  void set_rtcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rtcode() const;
  void _internal_set_rtcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flag = 7;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cacheAddr = 10;
  void clear_cacheaddr();
  ::PROTOBUF_NAMESPACE_ID::int32 cacheaddr() const;
  void set_cacheaddr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cacheaddr() const;
  void _internal_set_cacheaddr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 queryTimes = 11;
  void clear_querytimes();
  ::PROTOBUF_NAMESPACE_ID::int32 querytimes() const;
  void set_querytimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_querytimes() const;
  void _internal_set_querytimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updateCacheip = 12;
  void clear_updatecacheip();
  ::PROTOBUF_NAMESPACE_ID::int32 updatecacheip() const;
  void set_updatecacheip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updatecacheip() const;
  void _internal_set_updatecacheip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SegHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filemd5_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 datalength_;
  ::PROTOBUF_NAMESPACE_ID::int64 dataoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 rtcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 cacheaddr_;
  ::PROTOBUF_NAMESPACE_ID::int32 querytimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 updatecacheip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class DeleteMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DeleteMessageRequest) */ {
 public:
  inline DeleteMessageRequest() : DeleteMessageRequest(nullptr) {}
  ~DeleteMessageRequest() override;
  explicit constexpr DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMessageRequest(const DeleteMessageRequest& from);
  DeleteMessageRequest(DeleteMessageRequest&& from) noexcept
    : DeleteMessageRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMessageRequest& operator=(const DeleteMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageRequest& operator=(DeleteMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageRequest*>(
               &_DeleteMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteMessageRequest& a, DeleteMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMessageRequest* New() const final {
    return new DeleteMessageRequest();
  }

  DeleteMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteMessageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DeleteMessageRequest";
  }
  protected:
  explicit DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .pb.MessageItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::pb::MessageItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MessageItem >*
      mutable_items();
  private:
  const ::pb::MessageItem& _internal_items(int index) const;
  ::pb::MessageItem* _internal_add_items();
  public:
  const ::pb::MessageItem& items(int index) const;
  ::pb::MessageItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MessageItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:pb.DeleteMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MessageItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class MessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.MessageItem) */ {
 public:
  inline MessageItem() : MessageItem(nullptr) {}
  ~MessageItem() override;
  explicit constexpr MessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageItem(const MessageItem& from);
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageItem* New() const final {
    return new MessageItem();
  }

  MessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.MessageItem";
  }
  protected:
  explicit MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 7,
    kFromUinFieldNumber = 1,
    kToUinFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
    kMsgSeqFieldNumber = 4,
    kMsgUidFieldNumber = 5,
  };
  // bytes sig = 7;
  void clear_sig();
  const std::string& sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sig();
  PROTOBUF_MUST_USE_RESULT std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // int64 fromUin = 1;
  void clear_fromuin();
  ::PROTOBUF_NAMESPACE_ID::int64 fromuin() const;
  void set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fromuin() const;
  void _internal_set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 toUin = 2;
  void clear_touin();
  ::PROTOBUF_NAMESPACE_ID::int64 touin() const;
  void set_touin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_touin() const;
  void _internal_set_touin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msgType = 3;
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msgSeq = 4;
  void clear_msgseq();
  ::PROTOBUF_NAMESPACE_ID::int32 msgseq() const;
  void set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgseq() const;
  void _internal_set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 msgUid = 5;
  void clear_msguid();
  ::PROTOBUF_NAMESPACE_ID::int64 msguid() const;
  void set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msguid() const;
  void _internal_set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.MessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::PROTOBUF_NAMESPACE_ID::int64 fromuin_;
  ::PROTOBUF_NAMESPACE_ID::int64 touin_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgseq_;
  ::PROTOBUF_NAMESPACE_ID::int64 msguid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SubD4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubD4) */ {
 public:
  inline SubD4() : SubD4(nullptr) {}
  ~SubD4() override;
  explicit constexpr SubD4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubD4(const SubD4& from);
  SubD4(SubD4&& from) noexcept
    : SubD4() {
    *this = ::std::move(from);
  }

  inline SubD4& operator=(const SubD4& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubD4& operator=(SubD4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubD4& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubD4* internal_default_instance() {
    return reinterpret_cast<const SubD4*>(
               &_SubD4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubD4& a, SubD4& b) {
    a.Swap(&b);
  }
  inline void Swap(SubD4* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubD4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubD4* New() const final {
    return new SubD4();
  }

  SubD4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubD4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubD4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubD4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubD4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubD4";
  }
  protected:
  explicit SubD4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 1,
  };
  // int64 uin = 1;
  void clear_uin();
  ::PROTOBUF_NAMESPACE_ID::int64 uin() const;
  void set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uin() const;
  void _internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubD4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 uin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub8A final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Sub8A) */ {
 public:
  inline Sub8A() : Sub8A(nullptr) {}
  ~Sub8A() override;
  explicit constexpr Sub8A(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub8A(const Sub8A& from);
  Sub8A(Sub8A&& from) noexcept
    : Sub8A() {
    *this = ::std::move(from);
  }

  inline Sub8A& operator=(const Sub8A& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub8A& operator=(Sub8A&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub8A& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub8A* internal_default_instance() {
    return reinterpret_cast<const Sub8A*>(
               &_Sub8A_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Sub8A& a, Sub8A& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub8A* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub8A* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sub8A* New() const final {
    return new Sub8A();
  }

  Sub8A* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sub8A>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub8A& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sub8A& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub8A* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Sub8A";
  }
  protected:
  explicit Sub8A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgInfoFieldNumber = 1,
    kReservedFieldNumber = 5,
    kAppIdFieldNumber = 2,
    kInstIdFieldNumber = 3,
    kLongMessageFlagFieldNumber = 4,
  };
  // repeated .pb.Sub8AMsgInfo msg_info = 1;
  int msg_info_size() const;
  private:
  int _internal_msg_info_size() const;
  public:
  void clear_msg_info();
  ::pb::Sub8AMsgInfo* mutable_msg_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Sub8AMsgInfo >*
      mutable_msg_info();
  private:
  const ::pb::Sub8AMsgInfo& _internal_msg_info(int index) const;
  ::pb::Sub8AMsgInfo* _internal_add_msg_info();
  public:
  const ::pb::Sub8AMsgInfo& msg_info(int index) const;
  ::pb::Sub8AMsgInfo* add_msg_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Sub8AMsgInfo >&
      msg_info() const;

  // bytes reserved = 5;
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_MUST_USE_RESULT std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // int32 appId = 2;
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 instId = 3;
  void clear_instid();
  ::PROTOBUF_NAMESPACE_ID::int32 instid() const;
  void set_instid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instid() const;
  void _internal_set_instid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 longMessageFlag = 4;
  void clear_longmessageflag();
  ::PROTOBUF_NAMESPACE_ID::int32 longmessageflag() const;
  void set_longmessageflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_longmessageflag() const;
  void _internal_set_longmessageflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Sub8A)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Sub8AMsgInfo > msg_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  ::PROTOBUF_NAMESPACE_ID::int32 instid_;
  ::PROTOBUF_NAMESPACE_ID::int32 longmessageflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub8AMsgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Sub8AMsgInfo) */ {
 public:
  inline Sub8AMsgInfo() : Sub8AMsgInfo(nullptr) {}
  ~Sub8AMsgInfo() override;
  explicit constexpr Sub8AMsgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub8AMsgInfo(const Sub8AMsgInfo& from);
  Sub8AMsgInfo(Sub8AMsgInfo&& from) noexcept
    : Sub8AMsgInfo() {
    *this = ::std::move(from);
  }

  inline Sub8AMsgInfo& operator=(const Sub8AMsgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub8AMsgInfo& operator=(Sub8AMsgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub8AMsgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub8AMsgInfo* internal_default_instance() {
    return reinterpret_cast<const Sub8AMsgInfo*>(
               &_Sub8AMsgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Sub8AMsgInfo& a, Sub8AMsgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub8AMsgInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub8AMsgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sub8AMsgInfo* New() const final {
    return new Sub8AMsgInfo();
  }

  Sub8AMsgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sub8AMsgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub8AMsgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sub8AMsgInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub8AMsgInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Sub8AMsgInfo";
  }
  protected:
  explicit Sub8AMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUinFieldNumber = 1,
    kToUinFieldNumber = 2,
    kMsgUidFieldNumber = 4,
    kMsgSeqFieldNumber = 3,
    kMsgRandomFieldNumber = 6,
    kMsgTimeFieldNumber = 5,
    kPkgNumFieldNumber = 7,
    kPkgIndexFieldNumber = 8,
    kDevSeqFieldNumber = 9,
  };
  // int64 fromUin = 1;
  void clear_fromuin();
  ::PROTOBUF_NAMESPACE_ID::int64 fromuin() const;
  void set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fromuin() const;
  void _internal_set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 toUin = 2;
  void clear_touin();
  ::PROTOBUF_NAMESPACE_ID::int64 touin() const;
  void set_touin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_touin() const;
  void _internal_set_touin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 msgUid = 4;
  void clear_msguid();
  ::PROTOBUF_NAMESPACE_ID::int64 msguid() const;
  void set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msguid() const;
  void _internal_set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msgSeq = 3;
  void clear_msgseq();
  ::PROTOBUF_NAMESPACE_ID::int32 msgseq() const;
  void set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgseq() const;
  void _internal_set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msgRandom = 6;
  void clear_msgrandom();
  ::PROTOBUF_NAMESPACE_ID::int32 msgrandom() const;
  void set_msgrandom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgrandom() const;
  void _internal_set_msgrandom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 msgTime = 5;
  void clear_msgtime();
  ::PROTOBUF_NAMESPACE_ID::int64 msgtime() const;
  void set_msgtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msgtime() const;
  void _internal_set_msgtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 pkgNum = 7;
  void clear_pkgnum();
  ::PROTOBUF_NAMESPACE_ID::int32 pkgnum() const;
  void set_pkgnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pkgnum() const;
  void _internal_set_pkgnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pkgIndex = 8;
  void clear_pkgindex();
  ::PROTOBUF_NAMESPACE_ID::int32 pkgindex() const;
  void set_pkgindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pkgindex() const;
  void _internal_set_pkgindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 devSeq = 9;
  void clear_devseq();
  ::PROTOBUF_NAMESPACE_ID::int32 devseq() const;
  void set_devseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_devseq() const;
  void _internal_set_devseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Sub8AMsgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 fromuin_;
  ::PROTOBUF_NAMESPACE_ID::int64 touin_;
  ::PROTOBUF_NAMESPACE_ID::int64 msguid_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgseq_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgrandom_;
  ::PROTOBUF_NAMESPACE_ID::int64 msgtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 pkgnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 pkgindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 devseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SubB3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubB3) */ {
 public:
  inline SubB3() : SubB3(nullptr) {}
  ~SubB3() override;
  explicit constexpr SubB3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubB3(const SubB3& from);
  SubB3(SubB3&& from) noexcept
    : SubB3() {
    *this = ::std::move(from);
  }

  inline SubB3& operator=(const SubB3& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubB3& operator=(SubB3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubB3& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubB3* internal_default_instance() {
    return reinterpret_cast<const SubB3*>(
               &_SubB3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubB3& a, SubB3& b) {
    a.Swap(&b);
  }
  inline void Swap(SubB3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubB3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubB3* New() const final {
    return new SubB3();
  }

  SubB3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubB3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubB3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubB3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubB3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubB3";
  }
  protected:
  explicit SubB3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgAddFrdNotifyFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .pb.SubB3AddFrdNotify msgAddFrdNotify = 2;
  bool has_msgaddfrdnotify() const;
  private:
  bool _internal_has_msgaddfrdnotify() const;
  public:
  void clear_msgaddfrdnotify();
  const ::pb::SubB3AddFrdNotify& msgaddfrdnotify() const;
  PROTOBUF_MUST_USE_RESULT ::pb::SubB3AddFrdNotify* release_msgaddfrdnotify();
  ::pb::SubB3AddFrdNotify* mutable_msgaddfrdnotify();
  void set_allocated_msgaddfrdnotify(::pb::SubB3AddFrdNotify* msgaddfrdnotify);
  private:
  const ::pb::SubB3AddFrdNotify& _internal_msgaddfrdnotify() const;
  ::pb::SubB3AddFrdNotify* _internal_mutable_msgaddfrdnotify();
  public:
  void unsafe_arena_set_allocated_msgaddfrdnotify(
      ::pb::SubB3AddFrdNotify* msgaddfrdnotify);
  ::pb::SubB3AddFrdNotify* unsafe_arena_release_msgaddfrdnotify();

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubB3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::SubB3AddFrdNotify* msgaddfrdnotify_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SubB3AddFrdNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubB3AddFrdNotify) */ {
 public:
  inline SubB3AddFrdNotify() : SubB3AddFrdNotify(nullptr) {}
  ~SubB3AddFrdNotify() override;
  explicit constexpr SubB3AddFrdNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubB3AddFrdNotify(const SubB3AddFrdNotify& from);
  SubB3AddFrdNotify(SubB3AddFrdNotify&& from) noexcept
    : SubB3AddFrdNotify() {
    *this = ::std::move(from);
  }

  inline SubB3AddFrdNotify& operator=(const SubB3AddFrdNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubB3AddFrdNotify& operator=(SubB3AddFrdNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubB3AddFrdNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubB3AddFrdNotify* internal_default_instance() {
    return reinterpret_cast<const SubB3AddFrdNotify*>(
               &_SubB3AddFrdNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubB3AddFrdNotify& a, SubB3AddFrdNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SubB3AddFrdNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubB3AddFrdNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubB3AddFrdNotify* New() const final {
    return new SubB3AddFrdNotify();
  }

  SubB3AddFrdNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubB3AddFrdNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubB3AddFrdNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubB3AddFrdNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubB3AddFrdNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubB3AddFrdNotify";
  }
  protected:
  explicit SubB3AddFrdNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 5,
    kUinFieldNumber = 1,
  };
  // string nick = 5;
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_MUST_USE_RESULT std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int64 uin = 1;
  void clear_uin();
  ::PROTOBUF_NAMESPACE_ID::int64 uin() const;
  void set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uin() const;
  void _internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubB3AddFrdNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int64 uin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub44 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Sub44) */ {
 public:
  inline Sub44() : Sub44(nullptr) {}
  ~Sub44() override;
  explicit constexpr Sub44(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub44(const Sub44& from);
  Sub44(Sub44&& from) noexcept
    : Sub44() {
    *this = ::std::move(from);
  }

  inline Sub44& operator=(const Sub44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub44& operator=(Sub44&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub44* internal_default_instance() {
    return reinterpret_cast<const Sub44*>(
               &_Sub44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Sub44& a, Sub44& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub44* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub44* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sub44* New() const final {
    return new Sub44();
  }

  Sub44* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sub44>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub44& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sub44& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub44* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Sub44";
  }
  protected:
  explicit Sub44(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendSyncMsgFieldNumber = 1,
    kGroupSyncMsgFieldNumber = 2,
  };
  // .pb.Sub44FriendSyncMsg friendSyncMsg = 1;
  bool has_friendsyncmsg() const;
  private:
  bool _internal_has_friendsyncmsg() const;
  public:
  void clear_friendsyncmsg();
  const ::pb::Sub44FriendSyncMsg& friendsyncmsg() const;
  PROTOBUF_MUST_USE_RESULT ::pb::Sub44FriendSyncMsg* release_friendsyncmsg();
  ::pb::Sub44FriendSyncMsg* mutable_friendsyncmsg();
  void set_allocated_friendsyncmsg(::pb::Sub44FriendSyncMsg* friendsyncmsg);
  private:
  const ::pb::Sub44FriendSyncMsg& _internal_friendsyncmsg() const;
  ::pb::Sub44FriendSyncMsg* _internal_mutable_friendsyncmsg();
  public:
  void unsafe_arena_set_allocated_friendsyncmsg(
      ::pb::Sub44FriendSyncMsg* friendsyncmsg);
  ::pb::Sub44FriendSyncMsg* unsafe_arena_release_friendsyncmsg();

  // .pb.Sub44GroupSyncMsg groupSyncMsg = 2;
  bool has_groupsyncmsg() const;
  private:
  bool _internal_has_groupsyncmsg() const;
  public:
  void clear_groupsyncmsg();
  const ::pb::Sub44GroupSyncMsg& groupsyncmsg() const;
  PROTOBUF_MUST_USE_RESULT ::pb::Sub44GroupSyncMsg* release_groupsyncmsg();
  ::pb::Sub44GroupSyncMsg* mutable_groupsyncmsg();
  void set_allocated_groupsyncmsg(::pb::Sub44GroupSyncMsg* groupsyncmsg);
  private:
  const ::pb::Sub44GroupSyncMsg& _internal_groupsyncmsg() const;
  ::pb::Sub44GroupSyncMsg* _internal_mutable_groupsyncmsg();
  public:
  void unsafe_arena_set_allocated_groupsyncmsg(
      ::pb::Sub44GroupSyncMsg* groupsyncmsg);
  ::pb::Sub44GroupSyncMsg* unsafe_arena_release_groupsyncmsg();

  // @@protoc_insertion_point(class_scope:pb.Sub44)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::Sub44FriendSyncMsg* friendsyncmsg_;
  ::pb::Sub44GroupSyncMsg* groupsyncmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub44FriendSyncMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Sub44FriendSyncMsg) */ {
 public:
  inline Sub44FriendSyncMsg() : Sub44FriendSyncMsg(nullptr) {}
  ~Sub44FriendSyncMsg() override;
  explicit constexpr Sub44FriendSyncMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub44FriendSyncMsg(const Sub44FriendSyncMsg& from);
  Sub44FriendSyncMsg(Sub44FriendSyncMsg&& from) noexcept
    : Sub44FriendSyncMsg() {
    *this = ::std::move(from);
  }

  inline Sub44FriendSyncMsg& operator=(const Sub44FriendSyncMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub44FriendSyncMsg& operator=(Sub44FriendSyncMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub44FriendSyncMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub44FriendSyncMsg* internal_default_instance() {
    return reinterpret_cast<const Sub44FriendSyncMsg*>(
               &_Sub44FriendSyncMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Sub44FriendSyncMsg& a, Sub44FriendSyncMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub44FriendSyncMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub44FriendSyncMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sub44FriendSyncMsg* New() const final {
    return new Sub44FriendSyncMsg();
  }

  Sub44FriendSyncMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sub44FriendSyncMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub44FriendSyncMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sub44FriendSyncMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub44FriendSyncMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Sub44FriendSyncMsg";
  }
  protected:
  explicit Sub44FriendSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrWordingFieldNumber = 8,
    kUinFieldNumber = 1,
    kFUinFieldNumber = 2,
    kProcessTypeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kProcessFlagFieldNumber = 5,
    kSourceIdFieldNumber = 6,
    kSourceSubIdFieldNumber = 7,
  };
  // repeated string strWording = 8;
  int strwording_size() const;
  private:
  int _internal_strwording_size() const;
  public:
  void clear_strwording();
  const std::string& strwording(int index) const;
  std::string* mutable_strwording(int index);
  void set_strwording(int index, const std::string& value);
  void set_strwording(int index, std::string&& value);
  void set_strwording(int index, const char* value);
  void set_strwording(int index, const char* value, size_t size);
  std::string* add_strwording();
  void add_strwording(const std::string& value);
  void add_strwording(std::string&& value);
  void add_strwording(const char* value);
  void add_strwording(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strwording() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strwording();
  private:
  const std::string& _internal_strwording(int index) const;
  std::string* _internal_add_strwording();
  public:

  // int64 uin = 1;
  void clear_uin();
  ::PROTOBUF_NAMESPACE_ID::int64 uin() const;
  void set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uin() const;
  void _internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fUin = 2;
  void clear_fuin();
  ::PROTOBUF_NAMESPACE_ID::int64 fuin() const;
  void set_fuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fuin() const;
  void _internal_set_fuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 processType = 3;
  void clear_processtype();
  ::PROTOBUF_NAMESPACE_ID::int32 processtype() const;
  void set_processtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processtype() const;
  void _internal_set_processtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 processFlag = 5;
  void clear_processflag();
  ::PROTOBUF_NAMESPACE_ID::int32 processflag() const;
  void set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processflag() const;
  void _internal_set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceId = 6;
  void clear_sourceid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceid() const;
  void set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceid() const;
  void _internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceSubId = 7;
  void clear_sourcesubid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourcesubid() const;
  void set_sourcesubid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourcesubid() const;
  void _internal_set_sourcesubid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Sub44FriendSyncMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strwording_;
  ::PROTOBUF_NAMESPACE_ID::int64 uin_;
  ::PROTOBUF_NAMESPACE_ID::int64 fuin_;
  ::PROTOBUF_NAMESPACE_ID::int32 processtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 processflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourcesubid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub44GroupSyncMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Sub44GroupSyncMsg) */ {
 public:
  inline Sub44GroupSyncMsg() : Sub44GroupSyncMsg(nullptr) {}
  ~Sub44GroupSyncMsg() override;
  explicit constexpr Sub44GroupSyncMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub44GroupSyncMsg(const Sub44GroupSyncMsg& from);
  Sub44GroupSyncMsg(Sub44GroupSyncMsg&& from) noexcept
    : Sub44GroupSyncMsg() {
    *this = ::std::move(from);
  }

  inline Sub44GroupSyncMsg& operator=(const Sub44GroupSyncMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub44GroupSyncMsg& operator=(Sub44GroupSyncMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub44GroupSyncMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub44GroupSyncMsg* internal_default_instance() {
    return reinterpret_cast<const Sub44GroupSyncMsg*>(
               &_Sub44GroupSyncMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Sub44GroupSyncMsg& a, Sub44GroupSyncMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub44GroupSyncMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub44GroupSyncMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sub44GroupSyncMsg* New() const final {
    return new Sub44GroupSyncMsg();
  }

  Sub44GroupSyncMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sub44GroupSyncMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub44GroupSyncMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sub44GroupSyncMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub44GroupSyncMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Sub44GroupSyncMsg";
  }
  protected:
  explicit Sub44GroupSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBufFieldNumber = 7,
    kAuthKeyFieldNumber = 8,
    kMsgSeqFieldNumber = 2,
    kGrpCodeFieldNumber = 3,
    kGaCodeFieldNumber = 4,
    kOptUin1FieldNumber = 5,
    kMsgTypeFieldNumber = 1,
    kMsgStatusFieldNumber = 9,
    kOptUin2FieldNumber = 6,
    kActionUinFieldNumber = 10,
    kActionTimeFieldNumber = 11,
    kCurMaxMemCountFieldNumber = 12,
    kNextMaxMemCountFieldNumber = 13,
    kCurMemCountFieldNumber = 14,
    kReqSrcIdFieldNumber = 15,
    kReqSrcSubIdFieldNumber = 16,
    kInviterRoleFieldNumber = 17,
    kExtAdminNumFieldNumber = 18,
    kProcessFlagFieldNumber = 19,
  };
  // bytes msgBuf = 7;
  void clear_msgbuf();
  const std::string& msgbuf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgbuf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgbuf();
  PROTOBUF_MUST_USE_RESULT std::string* release_msgbuf();
  void set_allocated_msgbuf(std::string* msgbuf);
  private:
  const std::string& _internal_msgbuf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgbuf(const std::string& value);
  std::string* _internal_mutable_msgbuf();
  public:

  // bytes authKey = 8;
  void clear_authkey();
  const std::string& authkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authkey();
  PROTOBUF_MUST_USE_RESULT std::string* release_authkey();
  void set_allocated_authkey(std::string* authkey);
  private:
  const std::string& _internal_authkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authkey(const std::string& value);
  std::string* _internal_mutable_authkey();
  public:

  // int64 msgSeq = 2;
  void clear_msgseq();
  ::PROTOBUF_NAMESPACE_ID::int64 msgseq() const;
  void set_msgseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msgseq() const;
  void _internal_set_msgseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 grpCode = 3;
  void clear_grpcode();
  ::PROTOBUF_NAMESPACE_ID::int64 grpcode() const;
  void set_grpcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_grpcode() const;
  void _internal_set_grpcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 gaCode = 4;
  void clear_gacode();
  ::PROTOBUF_NAMESPACE_ID::int64 gacode() const;
  void set_gacode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gacode() const;
  void _internal_set_gacode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 optUin1 = 5;
  void clear_optuin1();
  ::PROTOBUF_NAMESPACE_ID::int64 optuin1() const;
  void set_optuin1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_optuin1() const;
  void _internal_set_optuin1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msgType = 1;
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msgStatus = 9;
  void clear_msgstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 msgstatus() const;
  void set_msgstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgstatus() const;
  void _internal_set_msgstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 optUin2 = 6;
  void clear_optuin2();
  ::PROTOBUF_NAMESPACE_ID::int64 optuin2() const;
  void set_optuin2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_optuin2() const;
  void _internal_set_optuin2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 actionUin = 10;
  void clear_actionuin();
  ::PROTOBUF_NAMESPACE_ID::int64 actionuin() const;
  void set_actionuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actionuin() const;
  void _internal_set_actionuin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 actionTime = 11;
  void clear_actiontime();
  ::PROTOBUF_NAMESPACE_ID::int64 actiontime() const;
  void set_actiontime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actiontime() const;
  void _internal_set_actiontime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 curMaxMemCount = 12;
  void clear_curmaxmemcount();
  ::PROTOBUF_NAMESPACE_ID::int32 curmaxmemcount() const;
  void set_curmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curmaxmemcount() const;
  void _internal_set_curmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nextMaxMemCount = 13;
  void clear_nextmaxmemcount();
  ::PROTOBUF_NAMESPACE_ID::int32 nextmaxmemcount() const;
  void set_nextmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nextmaxmemcount() const;
  void _internal_set_nextmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curMemCount = 14;
  void clear_curmemcount();
  ::PROTOBUF_NAMESPACE_ID::int32 curmemcount() const;
  void set_curmemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curmemcount() const;
  void _internal_set_curmemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqSrcId = 15;
  void clear_reqsrcid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqsrcid() const;
  void set_reqsrcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqsrcid() const;
  void _internal_set_reqsrcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reqSrcSubId = 16;
  void clear_reqsrcsubid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqsrcsubid() const;
  void set_reqsrcsubid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqsrcsubid() const;
  void _internal_set_reqsrcsubid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviterRole = 17;
  void clear_inviterrole();
  ::PROTOBUF_NAMESPACE_ID::int32 inviterrole() const;
  void set_inviterrole(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviterrole() const;
  void _internal_set_inviterrole(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extAdminNum = 18;
  void clear_extadminnum();
  ::PROTOBUF_NAMESPACE_ID::int32 extadminnum() const;
  void set_extadminnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extadminnum() const;
  void _internal_set_extadminnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 processFlag = 19;
  void clear_processflag();
  ::PROTOBUF_NAMESPACE_ID::int32 processflag() const;
  void set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processflag() const;
  void _internal_set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Sub44GroupSyncMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgbuf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authkey_;
  ::PROTOBUF_NAMESPACE_ID::int64 msgseq_;
  ::PROTOBUF_NAMESPACE_ID::int64 grpcode_;
  ::PROTOBUF_NAMESPACE_ID::int64 gacode_;
  ::PROTOBUF_NAMESPACE_ID::int64 optuin1_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgstatus_;
  ::PROTOBUF_NAMESPACE_ID::int64 optuin2_;
  ::PROTOBUF_NAMESPACE_ID::int64 actionuin_;
  ::PROTOBUF_NAMESPACE_ID::int64 actiontime_;
  ::PROTOBUF_NAMESPACE_ID::int32 curmaxmemcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextmaxmemcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 curmemcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqsrcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqsrcsubid_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviterrole_;
  ::PROTOBUF_NAMESPACE_ID::int32 extadminnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 processflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class GroupMemberReqBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GroupMemberReqBody) */ {
 public:
  inline GroupMemberReqBody() : GroupMemberReqBody(nullptr) {}
  ~GroupMemberReqBody() override;
  explicit constexpr GroupMemberReqBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMemberReqBody(const GroupMemberReqBody& from);
  GroupMemberReqBody(GroupMemberReqBody&& from) noexcept
    : GroupMemberReqBody() {
    *this = ::std::move(from);
  }

  inline GroupMemberReqBody& operator=(const GroupMemberReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMemberReqBody& operator=(GroupMemberReqBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMemberReqBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMemberReqBody* internal_default_instance() {
    return reinterpret_cast<const GroupMemberReqBody*>(
               &_GroupMemberReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GroupMemberReqBody& a, GroupMemberReqBody& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMemberReqBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMemberReqBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberReqBody* New() const final {
    return new GroupMemberReqBody();
  }

  GroupMemberReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMemberReqBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMemberReqBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupMemberReqBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMemberReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GroupMemberReqBody";
  }
  protected:
  explicit GroupMemberReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupCodeFieldNumber = 1,
    kUinFieldNumber = 2,
    kNewClientFieldNumber = 3,
    kClientTypeFieldNumber = 4,
    kRichCardNameVerFieldNumber = 5,
  };
  // int64 groupCode = 1;
  void clear_groupcode();
  ::PROTOBUF_NAMESPACE_ID::int64 groupcode() const;
  void set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_groupcode() const;
  void _internal_set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 uin = 2;
  void clear_uin();
  ::PROTOBUF_NAMESPACE_ID::int64 uin() const;
  void set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uin() const;
  void _internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool newClient = 3;
  void clear_newclient();
  bool newclient() const;
  void set_newclient(bool value);
  private:
  bool _internal_newclient() const;
  void _internal_set_newclient(bool value);
  public:

  // int32 clientType = 4;
  void clear_clienttype();
  ::PROTOBUF_NAMESPACE_ID::int32 clienttype() const;
  void set_clienttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clienttype() const;
  void _internal_set_clienttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 richCardNameVer = 5;
  void clear_richcardnamever();
  ::PROTOBUF_NAMESPACE_ID::int32 richcardnamever() const;
  void set_richcardnamever(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_richcardnamever() const;
  void _internal_set_richcardnamever(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GroupMemberReqBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 groupcode_;
  ::PROTOBUF_NAMESPACE_ID::int64 uin_;
  bool newclient_;
  ::PROTOBUF_NAMESPACE_ID::int32 clienttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 richcardnamever_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class GroupMemberRspBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GroupMemberRspBody) */ {
 public:
  inline GroupMemberRspBody() : GroupMemberRspBody(nullptr) {}
  ~GroupMemberRspBody() override;
  explicit constexpr GroupMemberRspBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMemberRspBody(const GroupMemberRspBody& from);
  GroupMemberRspBody(GroupMemberRspBody&& from) noexcept
    : GroupMemberRspBody() {
    *this = ::std::move(from);
  }

  inline GroupMemberRspBody& operator=(const GroupMemberRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMemberRspBody& operator=(GroupMemberRspBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMemberRspBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMemberRspBody* internal_default_instance() {
    return reinterpret_cast<const GroupMemberRspBody*>(
               &_GroupMemberRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GroupMemberRspBody& a, GroupMemberRspBody& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMemberRspBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMemberRspBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberRspBody* New() const final {
    return new GroupMemberRspBody();
  }

  GroupMemberRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMemberRspBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMemberRspBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupMemberRspBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMemberRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GroupMemberRspBody";
  }
  protected:
  explicit GroupMemberRspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemInfoFieldNumber = 3,
    kGroupCodeFieldNumber = 1,
    kSelfRoleFieldNumber = 2,
    kBoolSelfLocationSharedFieldNumber = 4,
    kGroupTypeFieldNumber = 5,
  };
  // .pb.GroupMemberInfo memInfo = 3;
  bool has_meminfo() const;
  private:
  bool _internal_has_meminfo() const;
  public:
  void clear_meminfo();
  const ::pb::GroupMemberInfo& meminfo() const;
  PROTOBUF_MUST_USE_RESULT ::pb::GroupMemberInfo* release_meminfo();
  ::pb::GroupMemberInfo* mutable_meminfo();
  void set_allocated_meminfo(::pb::GroupMemberInfo* meminfo);
  private:
  const ::pb::GroupMemberInfo& _internal_meminfo() const;
  ::pb::GroupMemberInfo* _internal_mutable_meminfo();
  public:
  void unsafe_arena_set_allocated_meminfo(
      ::pb::GroupMemberInfo* meminfo);
  ::pb::GroupMemberInfo* unsafe_arena_release_meminfo();

  // int64 groupCode = 1;
  void clear_groupcode();
  ::PROTOBUF_NAMESPACE_ID::int64 groupcode() const;
  void set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_groupcode() const;
  void _internal_set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 selfRole = 2;
  void clear_selfrole();
  ::PROTOBUF_NAMESPACE_ID::int32 selfrole() const;
  void set_selfrole(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selfrole() const;
  void _internal_set_selfrole(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool boolSelfLocationShared = 4;
  void clear_boolselflocationshared();
  bool boolselflocationshared() const;
  void set_boolselflocationshared(bool value);
  private:
  bool _internal_boolselflocationshared() const;
  void _internal_set_boolselflocationshared(bool value);
  public:

  // int32 groupType = 5;
  void clear_grouptype();
  ::PROTOBUF_NAMESPACE_ID::int32 grouptype() const;
  void set_grouptype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grouptype() const;
  void _internal_set_grouptype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GroupMemberRspBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::GroupMemberInfo* meminfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 groupcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 selfrole_;
  bool boolselflocationshared_;
  ::PROTOBUF_NAMESPACE_ID::int32 grouptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class GroupMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GroupMemberInfo) */ {
 public:
  inline GroupMemberInfo() : GroupMemberInfo(nullptr) {}
  ~GroupMemberInfo() override;
  explicit constexpr GroupMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMemberInfo(const GroupMemberInfo& from);
  GroupMemberInfo(GroupMemberInfo&& from) noexcept
    : GroupMemberInfo() {
    *this = ::std::move(from);
  }

  inline GroupMemberInfo& operator=(const GroupMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMemberInfo& operator=(GroupMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMemberInfo* internal_default_instance() {
    return reinterpret_cast<const GroupMemberInfo*>(
               &_GroupMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GroupMemberInfo& a, GroupMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMemberInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberInfo* New() const final {
    return new GroupMemberInfo();
  }

  GroupMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupMemberInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMemberInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GroupMemberInfo";
  }
  protected:
  explicit GroupMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 3,
    kRemarkFieldNumber = 5,
    kCardFieldNumber = 8,
    kLocationFieldNumber = 10,
    kNickFieldNumber = 11,
    kLevFieldNumber = 13,
    kGbarTitleFieldNumber = 18,
    kGbarUrlFieldNumber = 19,
    kSpecialTitleFieldNumber = 31,
    kPhoneNumFieldNumber = 35,
    kJobFieldNumber = 36,
    kHonorFieldNumber = 41,
    kUinFieldNumber = 1,
    kResultFieldNumber = 2,
    kCreditFieldNumber = 7,
    kSexFieldNumber = 9,
    kAgeFieldNumber = 12,
    kJoinFieldNumber = 14,
    kIsFriendFieldNumber = 4,
    kIsConcernedFieldNumber = 6,
    kIsAllowModCardFieldNumber = 21,
    kIsVipFieldNumber = 22,
    kGbarCntFieldNumber = 20,
    kLastSpeakFieldNumber = 15,
    kIsYearVipFieldNumber = 23,
    kIsSuperVipFieldNumber = 24,
    kIsSuperQqFieldNumber = 25,
    kLocationSharedFieldNumber = 28,
    kVipLevFieldNumber = 26,
    kRoleFieldNumber = 27,
    kConcernTypeFieldNumber = 30,
    kInt64DistanceFieldNumber = 29,
    kSpecialTitleExpireTimeFieldNumber = 32,
    kMedalIdFieldNumber = 37,
    kLevelFieldNumber = 39,
  };
  // bytes errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_MUST_USE_RESULT std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bytes remark = 5;
  void clear_remark();
  const std::string& remark() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remark(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remark();
  PROTOBUF_MUST_USE_RESULT std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // bytes card = 8;
  void clear_card();
  const std::string& card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card();
  PROTOBUF_MUST_USE_RESULT std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // bytes location = 10;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_MUST_USE_RESULT std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // bytes nick = 11;
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_MUST_USE_RESULT std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // bytes lev = 13;
  void clear_lev();
  const std::string& lev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lev();
  PROTOBUF_MUST_USE_RESULT std::string* release_lev();
  void set_allocated_lev(std::string* lev);
  private:
  const std::string& _internal_lev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lev(const std::string& value);
  std::string* _internal_mutable_lev();
  public:

  // bytes gbarTitle = 18;
  void clear_gbartitle();
  const std::string& gbartitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gbartitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gbartitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_gbartitle();
  void set_allocated_gbartitle(std::string* gbartitle);
  private:
  const std::string& _internal_gbartitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gbartitle(const std::string& value);
  std::string* _internal_mutable_gbartitle();
  public:

  // bytes gbarUrl = 19;
  void clear_gbarurl();
  const std::string& gbarurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gbarurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gbarurl();
  PROTOBUF_MUST_USE_RESULT std::string* release_gbarurl();
  void set_allocated_gbarurl(std::string* gbarurl);
  private:
  const std::string& _internal_gbarurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gbarurl(const std::string& value);
  std::string* _internal_mutable_gbarurl();
  public:

  // bytes specialTitle = 31;
  void clear_specialtitle();
  const std::string& specialtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_specialtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_specialtitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_specialtitle();
  void set_allocated_specialtitle(std::string* specialtitle);
  private:
  const std::string& _internal_specialtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specialtitle(const std::string& value);
  std::string* _internal_mutable_specialtitle();
  public:

  // bytes phoneNum = 35;
  void clear_phonenum();
  const std::string& phonenum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phonenum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phonenum();
  PROTOBUF_MUST_USE_RESULT std::string* release_phonenum();
  void set_allocated_phonenum(std::string* phonenum);
  private:
  const std::string& _internal_phonenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenum(const std::string& value);
  std::string* _internal_mutable_phonenum();
  public:

  // bytes job = 36;
  void clear_job();
  const std::string& job() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job();
  PROTOBUF_MUST_USE_RESULT std::string* release_job();
  void set_allocated_job(std::string* job);
  private:
  const std::string& _internal_job() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // string honor = 41;
  void clear_honor();
  const std::string& honor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_honor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_honor();
  PROTOBUF_MUST_USE_RESULT std::string* release_honor();
  void set_allocated_honor(std::string* honor);
  private:
  const std::string& _internal_honor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_honor(const std::string& value);
  std::string* _internal_mutable_honor();
  public:

  // int64 uin = 1;
  void clear_uin();
  ::PROTOBUF_NAMESPACE_ID::int64 uin() const;
  void set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uin() const;
  void _internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 credit = 7;
  void clear_credit();
  ::PROTOBUF_NAMESPACE_ID::int32 credit() const;
  void set_credit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_credit() const;
  void _internal_set_credit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sex = 9;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 12;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 join = 14;
  void clear_join();
  ::PROTOBUF_NAMESPACE_ID::int64 join() const;
  void set_join(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_join() const;
  void _internal_set_join(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool IsFriend = 4;
  void clear_isfriend();
  bool isfriend() const;
  void set_isfriend(bool value);
  private:
  bool _internal_isfriend() const;
  void _internal_set_isfriend(bool value);
  public:

  // bool IsConcerned = 6;
  void clear_isconcerned();
  bool isconcerned() const;
  void set_isconcerned(bool value);
  private:
  bool _internal_isconcerned() const;
  void _internal_set_isconcerned(bool value);
  public:

  // bool isAllowModCard = 21;
  void clear_isallowmodcard();
  bool isallowmodcard() const;
  void set_isallowmodcard(bool value);
  private:
  bool _internal_isallowmodcard() const;
  void _internal_set_isallowmodcard(bool value);
  public:

  // bool isVip = 22;
  void clear_isvip();
  bool isvip() const;
  void set_isvip(bool value);
  private:
  bool _internal_isvip() const;
  void _internal_set_isvip(bool value);
  public:

  // int32 gbarCnt = 20;
  void clear_gbarcnt();
  ::PROTOBUF_NAMESPACE_ID::int32 gbarcnt() const;
  void set_gbarcnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gbarcnt() const;
  void _internal_set_gbarcnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 lastSpeak = 15;
  void clear_lastspeak();
  ::PROTOBUF_NAMESPACE_ID::int64 lastspeak() const;
  void set_lastspeak(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastspeak() const;
  void _internal_set_lastspeak(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isYearVip = 23;
  void clear_isyearvip();
  bool isyearvip() const;
  void set_isyearvip(bool value);
  private:
  bool _internal_isyearvip() const;
  void _internal_set_isyearvip(bool value);
  public:

  // bool isSuperVip = 24;
  void clear_issupervip();
  bool issupervip() const;
  void set_issupervip(bool value);
  private:
  bool _internal_issupervip() const;
  void _internal_set_issupervip(bool value);
  public:

  // bool isSuperQq = 25;
  void clear_issuperqq();
  bool issuperqq() const;
  void set_issuperqq(bool value);
  private:
  bool _internal_issuperqq() const;
  void _internal_set_issuperqq(bool value);
  public:

  // bool locationShared = 28;
  void clear_locationshared();
  bool locationshared() const;
  void set_locationshared(bool value);
  private:
  bool _internal_locationshared() const;
  void _internal_set_locationshared(bool value);
  public:

  // int32 vipLev = 26;
  void clear_viplev();
  ::PROTOBUF_NAMESPACE_ID::int32 viplev() const;
  void set_viplev(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplev() const;
  void _internal_set_viplev(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 role = 27;
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::int32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 concernType = 30;
  void clear_concerntype();
  ::PROTOBUF_NAMESPACE_ID::int32 concerntype() const;
  void set_concerntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_concerntype() const;
  void _internal_set_concerntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64Distance = 29;
  void clear_int64distance();
  ::PROTOBUF_NAMESPACE_ID::int64 int64distance() const;
  void set_int64distance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64distance() const;
  void _internal_set_int64distance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 specialTitleExpireTime = 32;
  void clear_specialtitleexpiretime();
  ::PROTOBUF_NAMESPACE_ID::int32 specialtitleexpiretime() const;
  void set_specialtitleexpiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_specialtitleexpiretime() const;
  void _internal_set_specialtitleexpiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 medalId = 37;
  void clear_medalid();
  ::PROTOBUF_NAMESPACE_ID::int32 medalid() const;
  void set_medalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_medalid() const;
  void _internal_set_medalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 39;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GroupMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gbartitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gbarurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specialtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr honor_;
  ::PROTOBUF_NAMESPACE_ID::int64 uin_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 credit_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int64 join_;
  bool isfriend_;
  bool isconcerned_;
  bool isallowmodcard_;
  bool isvip_;
  ::PROTOBUF_NAMESPACE_ID::int32 gbarcnt_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastspeak_;
  bool isyearvip_;
  bool issupervip_;
  bool issuperqq_;
  bool locationshared_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplev_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_;
  ::PROTOBUF_NAMESPACE_ID::int32 concerntype_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 specialtitleexpiretime_;
  ::PROTOBUF_NAMESPACE_ID::int32 medalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfo

// string bootloader = 1;
inline void DeviceInfo::clear_bootloader() {
  bootloader_.ClearToEmpty();
}
inline const std::string& DeviceInfo::bootloader() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.bootloader)
  return _internal_bootloader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_bootloader(ArgT0&& arg0, ArgT... args) {
 
 bootloader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.bootloader)
}
inline std::string* DeviceInfo::mutable_bootloader() {
  std::string* _s = _internal_mutable_bootloader();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.bootloader)
  return _s;
}
inline const std::string& DeviceInfo::_internal_bootloader() const {
  return bootloader_.Get();
}
inline void DeviceInfo::_internal_set_bootloader(const std::string& value) {
  
  bootloader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_bootloader() {
  
  return bootloader_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_bootloader() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.bootloader)
  return bootloader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_bootloader(std::string* bootloader) {
  if (bootloader != nullptr) {
    
  } else {
    
  }
  bootloader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bootloader,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.bootloader)
}

// string procVersion = 2;
inline void DeviceInfo::clear_procversion() {
  procversion_.ClearToEmpty();
}
inline const std::string& DeviceInfo::procversion() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.procVersion)
  return _internal_procversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_procversion(ArgT0&& arg0, ArgT... args) {
 
 procversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.procVersion)
}
inline std::string* DeviceInfo::mutable_procversion() {
  std::string* _s = _internal_mutable_procversion();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.procVersion)
  return _s;
}
inline const std::string& DeviceInfo::_internal_procversion() const {
  return procversion_.Get();
}
inline void DeviceInfo::_internal_set_procversion(const std::string& value) {
  
  procversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_procversion() {
  
  return procversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_procversion() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.procVersion)
  return procversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_procversion(std::string* procversion) {
  if (procversion != nullptr) {
    
  } else {
    
  }
  procversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), procversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.procVersion)
}

// string codename = 3;
inline void DeviceInfo::clear_codename() {
  codename_.ClearToEmpty();
}
inline const std::string& DeviceInfo::codename() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.codename)
  return _internal_codename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_codename(ArgT0&& arg0, ArgT... args) {
 
 codename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.codename)
}
inline std::string* DeviceInfo::mutable_codename() {
  std::string* _s = _internal_mutable_codename();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.codename)
  return _s;
}
inline const std::string& DeviceInfo::_internal_codename() const {
  return codename_.Get();
}
inline void DeviceInfo::_internal_set_codename(const std::string& value) {
  
  codename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_codename() {
  
  return codename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_codename() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.codename)
  return codename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_codename(std::string* codename) {
  if (codename != nullptr) {
    
  } else {
    
  }
  codename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.codename)
}

// string incremental = 4;
inline void DeviceInfo::clear_incremental() {
  incremental_.ClearToEmpty();
}
inline const std::string& DeviceInfo::incremental() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.incremental)
  return _internal_incremental();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_incremental(ArgT0&& arg0, ArgT... args) {
 
 incremental_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.incremental)
}
inline std::string* DeviceInfo::mutable_incremental() {
  std::string* _s = _internal_mutable_incremental();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.incremental)
  return _s;
}
inline const std::string& DeviceInfo::_internal_incremental() const {
  return incremental_.Get();
}
inline void DeviceInfo::_internal_set_incremental(const std::string& value) {
  
  incremental_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_incremental() {
  
  return incremental_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_incremental() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.incremental)
  return incremental_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_incremental(std::string* incremental) {
  if (incremental != nullptr) {
    
  } else {
    
  }
  incremental_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), incremental,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.incremental)
}

// string fingerprint = 5;
inline void DeviceInfo::clear_fingerprint() {
  fingerprint_.ClearToEmpty();
}
inline const std::string& DeviceInfo::fingerprint() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.fingerprint)
  return _internal_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_fingerprint(ArgT0&& arg0, ArgT... args) {
 
 fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.fingerprint)
}
inline std::string* DeviceInfo::mutable_fingerprint() {
  std::string* _s = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.fingerprint)
  return _s;
}
inline const std::string& DeviceInfo::_internal_fingerprint() const {
  return fingerprint_.Get();
}
inline void DeviceInfo::_internal_set_fingerprint(const std::string& value) {
  
  fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_fingerprint() {
  
  return fingerprint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_fingerprint() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.fingerprint)
  return fingerprint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  fingerprint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fingerprint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.fingerprint)
}

// string bootId = 6;
inline void DeviceInfo::clear_bootid() {
  bootid_.ClearToEmpty();
}
inline const std::string& DeviceInfo::bootid() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.bootId)
  return _internal_bootid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_bootid(ArgT0&& arg0, ArgT... args) {
 
 bootid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.bootId)
}
inline std::string* DeviceInfo::mutable_bootid() {
  std::string* _s = _internal_mutable_bootid();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.bootId)
  return _s;
}
inline const std::string& DeviceInfo::_internal_bootid() const {
  return bootid_.Get();
}
inline void DeviceInfo::_internal_set_bootid(const std::string& value) {
  
  bootid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_bootid() {
  
  return bootid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_bootid() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.bootId)
  return bootid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_bootid(std::string* bootid) {
  if (bootid != nullptr) {
    
  } else {
    
  }
  bootid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bootid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.bootId)
}

// string androidId = 7;
inline void DeviceInfo::clear_androidid() {
  androidid_.ClearToEmpty();
}
inline const std::string& DeviceInfo::androidid() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.androidId)
  return _internal_androidid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_androidid(ArgT0&& arg0, ArgT... args) {
 
 androidid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.androidId)
}
inline std::string* DeviceInfo::mutable_androidid() {
  std::string* _s = _internal_mutable_androidid();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.androidId)
  return _s;
}
inline const std::string& DeviceInfo::_internal_androidid() const {
  return androidid_.Get();
}
inline void DeviceInfo::_internal_set_androidid(const std::string& value) {
  
  androidid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_androidid() {
  
  return androidid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_androidid() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.androidId)
  return androidid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_androidid(std::string* androidid) {
  if (androidid != nullptr) {
    
  } else {
    
  }
  androidid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), androidid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.androidId)
}

// string baseBand = 8;
inline void DeviceInfo::clear_baseband() {
  baseband_.ClearToEmpty();
}
inline const std::string& DeviceInfo::baseband() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.baseBand)
  return _internal_baseband();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_baseband(ArgT0&& arg0, ArgT... args) {
 
 baseband_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.baseBand)
}
inline std::string* DeviceInfo::mutable_baseband() {
  std::string* _s = _internal_mutable_baseband();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.baseBand)
  return _s;
}
inline const std::string& DeviceInfo::_internal_baseband() const {
  return baseband_.Get();
}
inline void DeviceInfo::_internal_set_baseband(const std::string& value) {
  
  baseband_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_baseband() {
  
  return baseband_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_baseband() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.baseBand)
  return baseband_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_baseband(std::string* baseband) {
  if (baseband != nullptr) {
    
  } else {
    
  }
  baseband_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseband,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.baseBand)
}

// string innerVersion = 9;
inline void DeviceInfo::clear_innerversion() {
  innerversion_.ClearToEmpty();
}
inline const std::string& DeviceInfo::innerversion() const {
  // @@protoc_insertion_point(field_get:pb.DeviceInfo.innerVersion)
  return _internal_innerversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_innerversion(ArgT0&& arg0, ArgT... args) {
 
 innerversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DeviceInfo.innerVersion)
}
inline std::string* DeviceInfo::mutable_innerversion() {
  std::string* _s = _internal_mutable_innerversion();
  // @@protoc_insertion_point(field_mutable:pb.DeviceInfo.innerVersion)
  return _s;
}
inline const std::string& DeviceInfo::_internal_innerversion() const {
  return innerversion_.Get();
}
inline void DeviceInfo::_internal_set_innerversion(const std::string& value) {
  
  innerversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_innerversion() {
  
  return innerversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_innerversion() {
  // @@protoc_insertion_point(field_release:pb.DeviceInfo.innerVersion)
  return innerversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_innerversion(std::string* innerversion) {
  if (innerversion != nullptr) {
    
  } else {
    
  }
  innerversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), innerversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceInfo.innerVersion)
}

// -------------------------------------------------------------------

// RequestBody

// repeated .pb.ConfigSeq rpt_config_list = 1;
inline int RequestBody::_internal_rpt_config_list_size() const {
  return rpt_config_list_.size();
}
inline int RequestBody::rpt_config_list_size() const {
  return _internal_rpt_config_list_size();
}
inline void RequestBody::clear_rpt_config_list() {
  rpt_config_list_.Clear();
}
inline ::pb::ConfigSeq* RequestBody::mutable_rpt_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RequestBody.rpt_config_list)
  return rpt_config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ConfigSeq >*
RequestBody::mutable_rpt_config_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RequestBody.rpt_config_list)
  return &rpt_config_list_;
}
inline const ::pb::ConfigSeq& RequestBody::_internal_rpt_config_list(int index) const {
  return rpt_config_list_.Get(index);
}
inline const ::pb::ConfigSeq& RequestBody::rpt_config_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RequestBody.rpt_config_list)
  return _internal_rpt_config_list(index);
}
inline ::pb::ConfigSeq* RequestBody::_internal_add_rpt_config_list() {
  return rpt_config_list_.Add();
}
inline ::pb::ConfigSeq* RequestBody::add_rpt_config_list() {
  ::pb::ConfigSeq* _add = _internal_add_rpt_config_list();
  // @@protoc_insertion_point(field_add:pb.RequestBody.rpt_config_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ConfigSeq >&
RequestBody::rpt_config_list() const {
  // @@protoc_insertion_point(field_list:pb.RequestBody.rpt_config_list)
  return rpt_config_list_;
}

// -------------------------------------------------------------------

// ConfigSeq

// int32 type = 1;
inline void ConfigSeq::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigSeq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigSeq::type() const {
  // @@protoc_insertion_point(field_get:pb.ConfigSeq.type)
  return _internal_type();
}
inline void ConfigSeq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ConfigSeq::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.ConfigSeq.type)
}

// int32 version = 2;
inline void ConfigSeq::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigSeq::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigSeq::version() const {
  // @@protoc_insertion_point(field_get:pb.ConfigSeq.version)
  return _internal_version();
}
inline void ConfigSeq::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void ConfigSeq::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.ConfigSeq.version)
}

// -------------------------------------------------------------------

// D50ReqBody

// int64 appid = 1;
inline void D50ReqBody::clear_appid() {
  appid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 D50ReqBody::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 D50ReqBody::appid() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.appid)
  return _internal_appid();
}
inline void D50ReqBody::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  appid_ = value;
}
inline void D50ReqBody::set_appid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.appid)
}

// int32 maxPkgSize = 2;
inline void D50ReqBody::clear_maxpkgsize() {
  maxpkgsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_maxpkgsize() const {
  return maxpkgsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::maxpkgsize() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.maxPkgSize)
  return _internal_maxpkgsize();
}
inline void D50ReqBody::_internal_set_maxpkgsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxpkgsize_ = value;
}
inline void D50ReqBody::set_maxpkgsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxpkgsize(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.maxPkgSize)
}

// int32 startTime = 3;
inline void D50ReqBody::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::starttime() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.startTime)
  return _internal_starttime();
}
inline void D50ReqBody::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void D50ReqBody::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.startTime)
}

// int32 startIndex = 4;
inline void D50ReqBody::clear_startindex() {
  startindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_startindex() const {
  return startindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::startindex() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.startIndex)
  return _internal_startindex();
}
inline void D50ReqBody::_internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startindex_ = value;
}
inline void D50ReqBody::set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.startIndex)
}

// int32 reqNum = 5;
inline void D50ReqBody::clear_reqnum() {
  reqnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_reqnum() const {
  return reqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::reqnum() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.reqNum)
  return _internal_reqnum();
}
inline void D50ReqBody::_internal_set_reqnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqnum_ = value;
}
inline void D50ReqBody::set_reqnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqnum(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.reqNum)
}

// repeated int64 uinList = 6;
inline int D50ReqBody::_internal_uinlist_size() const {
  return uinlist_.size();
}
inline int D50ReqBody::uinlist_size() const {
  return _internal_uinlist_size();
}
inline void D50ReqBody::clear_uinlist() {
  uinlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 D50ReqBody::_internal_uinlist(int index) const {
  return uinlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 D50ReqBody::uinlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.uinList)
  return _internal_uinlist(index);
}
inline void D50ReqBody::set_uinlist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  uinlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.uinList)
}
inline void D50ReqBody::_internal_add_uinlist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  uinlist_.Add(value);
}
inline void D50ReqBody::add_uinlist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_uinlist(value);
  // @@protoc_insertion_point(field_add:pb.D50ReqBody.uinList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
D50ReqBody::_internal_uinlist() const {
  return uinlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
D50ReqBody::uinlist() const {
  // @@protoc_insertion_point(field_list:pb.D50ReqBody.uinList)
  return _internal_uinlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
D50ReqBody::_internal_mutable_uinlist() {
  return &uinlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
D50ReqBody::mutable_uinlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.D50ReqBody.uinList)
  return _internal_mutable_uinlist();
}

// int32 reqMusicSwitch = 91001;
inline void D50ReqBody::clear_reqmusicswitch() {
  reqmusicswitch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_reqmusicswitch() const {
  return reqmusicswitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::reqmusicswitch() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.reqMusicSwitch)
  return _internal_reqmusicswitch();
}
inline void D50ReqBody::_internal_set_reqmusicswitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqmusicswitch_ = value;
}
inline void D50ReqBody::set_reqmusicswitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqmusicswitch(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.reqMusicSwitch)
}

// int32 reqMutualmarkAlienation = 101001;
inline void D50ReqBody::clear_reqmutualmarkalienation() {
  reqmutualmarkalienation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_reqmutualmarkalienation() const {
  return reqmutualmarkalienation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::reqmutualmarkalienation() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.reqMutualmarkAlienation)
  return _internal_reqmutualmarkalienation();
}
inline void D50ReqBody::_internal_set_reqmutualmarkalienation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqmutualmarkalienation_ = value;
}
inline void D50ReqBody::set_reqmutualmarkalienation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqmutualmarkalienation(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.reqMutualmarkAlienation)
}

// int32 reqMutualmarkScore = 141001;
inline void D50ReqBody::clear_reqmutualmarkscore() {
  reqmutualmarkscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_reqmutualmarkscore() const {
  return reqmutualmarkscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::reqmutualmarkscore() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.reqMutualmarkScore)
  return _internal_reqmutualmarkscore();
}
inline void D50ReqBody::_internal_set_reqmutualmarkscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqmutualmarkscore_ = value;
}
inline void D50ReqBody::set_reqmutualmarkscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqmutualmarkscore(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.reqMutualmarkScore)
}

// int32 reqKsingSwitch = 151001;
inline void D50ReqBody::clear_reqksingswitch() {
  reqksingswitch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_reqksingswitch() const {
  return reqksingswitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::reqksingswitch() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.reqKsingSwitch)
  return _internal_reqksingswitch();
}
inline void D50ReqBody::_internal_set_reqksingswitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqksingswitch_ = value;
}
inline void D50ReqBody::set_reqksingswitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqksingswitch(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.reqKsingSwitch)
}

// int32 reqMutualmarkLbsshare = 181001;
inline void D50ReqBody::clear_reqmutualmarklbsshare() {
  reqmutualmarklbsshare_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::_internal_reqmutualmarklbsshare() const {
  return reqmutualmarklbsshare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D50ReqBody::reqmutualmarklbsshare() const {
  // @@protoc_insertion_point(field_get:pb.D50ReqBody.reqMutualmarkLbsshare)
  return _internal_reqmutualmarklbsshare();
}
inline void D50ReqBody::_internal_set_reqmutualmarklbsshare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqmutualmarklbsshare_ = value;
}
inline void D50ReqBody::set_reqmutualmarklbsshare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqmutualmarklbsshare(value);
  // @@protoc_insertion_point(field_set:pb.D50ReqBody.reqMutualmarkLbsshare)
}

// -------------------------------------------------------------------

// ReqDataHighwayHead

// .pb.DataHighwayHead msgBasehead = 1;
inline bool ReqDataHighwayHead::_internal_has_msgbasehead() const {
  return this != internal_default_instance() && msgbasehead_ != nullptr;
}
inline bool ReqDataHighwayHead::has_msgbasehead() const {
  return _internal_has_msgbasehead();
}
inline void ReqDataHighwayHead::clear_msgbasehead() {
  if (GetArenaForAllocation() == nullptr && msgbasehead_ != nullptr) {
    delete msgbasehead_;
  }
  msgbasehead_ = nullptr;
}
inline const ::pb::DataHighwayHead& ReqDataHighwayHead::_internal_msgbasehead() const {
  const ::pb::DataHighwayHead* p = msgbasehead_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::DataHighwayHead&>(
      ::pb::_DataHighwayHead_default_instance_);
}
inline const ::pb::DataHighwayHead& ReqDataHighwayHead::msgbasehead() const {
  // @@protoc_insertion_point(field_get:pb.ReqDataHighwayHead.msgBasehead)
  return _internal_msgbasehead();
}
inline void ReqDataHighwayHead::unsafe_arena_set_allocated_msgbasehead(
    ::pb::DataHighwayHead* msgbasehead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgbasehead_);
  }
  msgbasehead_ = msgbasehead;
  if (msgbasehead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.ReqDataHighwayHead.msgBasehead)
}
inline ::pb::DataHighwayHead* ReqDataHighwayHead::release_msgbasehead() {
  
  ::pb::DataHighwayHead* temp = msgbasehead_;
  msgbasehead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::DataHighwayHead* ReqDataHighwayHead::unsafe_arena_release_msgbasehead() {
  // @@protoc_insertion_point(field_release:pb.ReqDataHighwayHead.msgBasehead)
  
  ::pb::DataHighwayHead* temp = msgbasehead_;
  msgbasehead_ = nullptr;
  return temp;
}
inline ::pb::DataHighwayHead* ReqDataHighwayHead::_internal_mutable_msgbasehead() {
  
  if (msgbasehead_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::DataHighwayHead>(GetArenaForAllocation());
    msgbasehead_ = p;
  }
  return msgbasehead_;
}
inline ::pb::DataHighwayHead* ReqDataHighwayHead::mutable_msgbasehead() {
  ::pb::DataHighwayHead* _msg = _internal_mutable_msgbasehead();
  // @@protoc_insertion_point(field_mutable:pb.ReqDataHighwayHead.msgBasehead)
  return _msg;
}
inline void ReqDataHighwayHead::set_allocated_msgbasehead(::pb::DataHighwayHead* msgbasehead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgbasehead_;
  }
  if (msgbasehead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::DataHighwayHead>::GetOwningArena(msgbasehead);
    if (message_arena != submessage_arena) {
      msgbasehead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgbasehead, submessage_arena);
    }
    
  } else {
    
  }
  msgbasehead_ = msgbasehead;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqDataHighwayHead.msgBasehead)
}

// .pb.SegHead msgSeghead = 2;
inline bool ReqDataHighwayHead::_internal_has_msgseghead() const {
  return this != internal_default_instance() && msgseghead_ != nullptr;
}
inline bool ReqDataHighwayHead::has_msgseghead() const {
  return _internal_has_msgseghead();
}
inline void ReqDataHighwayHead::clear_msgseghead() {
  if (GetArenaForAllocation() == nullptr && msgseghead_ != nullptr) {
    delete msgseghead_;
  }
  msgseghead_ = nullptr;
}
inline const ::pb::SegHead& ReqDataHighwayHead::_internal_msgseghead() const {
  const ::pb::SegHead* p = msgseghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::SegHead&>(
      ::pb::_SegHead_default_instance_);
}
inline const ::pb::SegHead& ReqDataHighwayHead::msgseghead() const {
  // @@protoc_insertion_point(field_get:pb.ReqDataHighwayHead.msgSeghead)
  return _internal_msgseghead();
}
inline void ReqDataHighwayHead::unsafe_arena_set_allocated_msgseghead(
    ::pb::SegHead* msgseghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgseghead_);
  }
  msgseghead_ = msgseghead;
  if (msgseghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.ReqDataHighwayHead.msgSeghead)
}
inline ::pb::SegHead* ReqDataHighwayHead::release_msgseghead() {
  
  ::pb::SegHead* temp = msgseghead_;
  msgseghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::SegHead* ReqDataHighwayHead::unsafe_arena_release_msgseghead() {
  // @@protoc_insertion_point(field_release:pb.ReqDataHighwayHead.msgSeghead)
  
  ::pb::SegHead* temp = msgseghead_;
  msgseghead_ = nullptr;
  return temp;
}
inline ::pb::SegHead* ReqDataHighwayHead::_internal_mutable_msgseghead() {
  
  if (msgseghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SegHead>(GetArenaForAllocation());
    msgseghead_ = p;
  }
  return msgseghead_;
}
inline ::pb::SegHead* ReqDataHighwayHead::mutable_msgseghead() {
  ::pb::SegHead* _msg = _internal_mutable_msgseghead();
  // @@protoc_insertion_point(field_mutable:pb.ReqDataHighwayHead.msgSeghead)
  return _msg;
}
inline void ReqDataHighwayHead::set_allocated_msgseghead(::pb::SegHead* msgseghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgseghead_;
  }
  if (msgseghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::SegHead>::GetOwningArena(msgseghead);
    if (message_arena != submessage_arena) {
      msgseghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgseghead, submessage_arena);
    }
    
  } else {
    
  }
  msgseghead_ = msgseghead;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqDataHighwayHead.msgSeghead)
}

// bytes reqExtendinfo = 3;
inline void ReqDataHighwayHead::clear_reqextendinfo() {
  reqextendinfo_.ClearToEmpty();
}
inline const std::string& ReqDataHighwayHead::reqextendinfo() const {
  // @@protoc_insertion_point(field_get:pb.ReqDataHighwayHead.reqExtendinfo)
  return _internal_reqextendinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDataHighwayHead::set_reqextendinfo(ArgT0&& arg0, ArgT... args) {
 
 reqextendinfo_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.ReqDataHighwayHead.reqExtendinfo)
}
inline std::string* ReqDataHighwayHead::mutable_reqextendinfo() {
  std::string* _s = _internal_mutable_reqextendinfo();
  // @@protoc_insertion_point(field_mutable:pb.ReqDataHighwayHead.reqExtendinfo)
  return _s;
}
inline const std::string& ReqDataHighwayHead::_internal_reqextendinfo() const {
  return reqextendinfo_.Get();
}
inline void ReqDataHighwayHead::_internal_set_reqextendinfo(const std::string& value) {
  
  reqextendinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDataHighwayHead::_internal_mutable_reqextendinfo() {
  
  return reqextendinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDataHighwayHead::release_reqextendinfo() {
  // @@protoc_insertion_point(field_release:pb.ReqDataHighwayHead.reqExtendinfo)
  return reqextendinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDataHighwayHead::set_allocated_reqextendinfo(std::string* reqextendinfo) {
  if (reqextendinfo != nullptr) {
    
  } else {
    
  }
  reqextendinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reqextendinfo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.ReqDataHighwayHead.reqExtendinfo)
}

// int64 timestamp = 4;
inline void ReqDataHighwayHead::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqDataHighwayHead::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqDataHighwayHead::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.ReqDataHighwayHead.timestamp)
  return _internal_timestamp();
}
inline void ReqDataHighwayHead::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ReqDataHighwayHead::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.ReqDataHighwayHead.timestamp)
}

// -------------------------------------------------------------------

// RspDataHighwayHead

// .pb.DataHighwayHead msgBasehead = 1;
inline bool RspDataHighwayHead::_internal_has_msgbasehead() const {
  return this != internal_default_instance() && msgbasehead_ != nullptr;
}
inline bool RspDataHighwayHead::has_msgbasehead() const {
  return _internal_has_msgbasehead();
}
inline void RspDataHighwayHead::clear_msgbasehead() {
  if (GetArenaForAllocation() == nullptr && msgbasehead_ != nullptr) {
    delete msgbasehead_;
  }
  msgbasehead_ = nullptr;
}
inline const ::pb::DataHighwayHead& RspDataHighwayHead::_internal_msgbasehead() const {
  const ::pb::DataHighwayHead* p = msgbasehead_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::DataHighwayHead&>(
      ::pb::_DataHighwayHead_default_instance_);
}
inline const ::pb::DataHighwayHead& RspDataHighwayHead::msgbasehead() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.msgBasehead)
  return _internal_msgbasehead();
}
inline void RspDataHighwayHead::unsafe_arena_set_allocated_msgbasehead(
    ::pb::DataHighwayHead* msgbasehead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgbasehead_);
  }
  msgbasehead_ = msgbasehead;
  if (msgbasehead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.RspDataHighwayHead.msgBasehead)
}
inline ::pb::DataHighwayHead* RspDataHighwayHead::release_msgbasehead() {
  
  ::pb::DataHighwayHead* temp = msgbasehead_;
  msgbasehead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::DataHighwayHead* RspDataHighwayHead::unsafe_arena_release_msgbasehead() {
  // @@protoc_insertion_point(field_release:pb.RspDataHighwayHead.msgBasehead)
  
  ::pb::DataHighwayHead* temp = msgbasehead_;
  msgbasehead_ = nullptr;
  return temp;
}
inline ::pb::DataHighwayHead* RspDataHighwayHead::_internal_mutable_msgbasehead() {
  
  if (msgbasehead_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::DataHighwayHead>(GetArenaForAllocation());
    msgbasehead_ = p;
  }
  return msgbasehead_;
}
inline ::pb::DataHighwayHead* RspDataHighwayHead::mutable_msgbasehead() {
  ::pb::DataHighwayHead* _msg = _internal_mutable_msgbasehead();
  // @@protoc_insertion_point(field_mutable:pb.RspDataHighwayHead.msgBasehead)
  return _msg;
}
inline void RspDataHighwayHead::set_allocated_msgbasehead(::pb::DataHighwayHead* msgbasehead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgbasehead_;
  }
  if (msgbasehead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::DataHighwayHead>::GetOwningArena(msgbasehead);
    if (message_arena != submessage_arena) {
      msgbasehead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgbasehead, submessage_arena);
    }
    
  } else {
    
  }
  msgbasehead_ = msgbasehead;
  // @@protoc_insertion_point(field_set_allocated:pb.RspDataHighwayHead.msgBasehead)
}

// .pb.SegHead msgSeghead = 2;
inline bool RspDataHighwayHead::_internal_has_msgseghead() const {
  return this != internal_default_instance() && msgseghead_ != nullptr;
}
inline bool RspDataHighwayHead::has_msgseghead() const {
  return _internal_has_msgseghead();
}
inline void RspDataHighwayHead::clear_msgseghead() {
  if (GetArenaForAllocation() == nullptr && msgseghead_ != nullptr) {
    delete msgseghead_;
  }
  msgseghead_ = nullptr;
}
inline const ::pb::SegHead& RspDataHighwayHead::_internal_msgseghead() const {
  const ::pb::SegHead* p = msgseghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::SegHead&>(
      ::pb::_SegHead_default_instance_);
}
inline const ::pb::SegHead& RspDataHighwayHead::msgseghead() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.msgSeghead)
  return _internal_msgseghead();
}
inline void RspDataHighwayHead::unsafe_arena_set_allocated_msgseghead(
    ::pb::SegHead* msgseghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgseghead_);
  }
  msgseghead_ = msgseghead;
  if (msgseghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.RspDataHighwayHead.msgSeghead)
}
inline ::pb::SegHead* RspDataHighwayHead::release_msgseghead() {
  
  ::pb::SegHead* temp = msgseghead_;
  msgseghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::SegHead* RspDataHighwayHead::unsafe_arena_release_msgseghead() {
  // @@protoc_insertion_point(field_release:pb.RspDataHighwayHead.msgSeghead)
  
  ::pb::SegHead* temp = msgseghead_;
  msgseghead_ = nullptr;
  return temp;
}
inline ::pb::SegHead* RspDataHighwayHead::_internal_mutable_msgseghead() {
  
  if (msgseghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SegHead>(GetArenaForAllocation());
    msgseghead_ = p;
  }
  return msgseghead_;
}
inline ::pb::SegHead* RspDataHighwayHead::mutable_msgseghead() {
  ::pb::SegHead* _msg = _internal_mutable_msgseghead();
  // @@protoc_insertion_point(field_mutable:pb.RspDataHighwayHead.msgSeghead)
  return _msg;
}
inline void RspDataHighwayHead::set_allocated_msgseghead(::pb::SegHead* msgseghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgseghead_;
  }
  if (msgseghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::SegHead>::GetOwningArena(msgseghead);
    if (message_arena != submessage_arena) {
      msgseghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgseghead, submessage_arena);
    }
    
  } else {
    
  }
  msgseghead_ = msgseghead;
  // @@protoc_insertion_point(field_set_allocated:pb.RspDataHighwayHead.msgSeghead)
}

// int32 errorCode = 3;
inline void RspDataHighwayHead::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::errorcode() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.errorCode)
  return _internal_errorcode();
}
inline void RspDataHighwayHead::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void RspDataHighwayHead::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.errorCode)
}

// int32 allowRetry = 4;
inline void RspDataHighwayHead::clear_allowretry() {
  allowretry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::_internal_allowretry() const {
  return allowretry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::allowretry() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.allowRetry)
  return _internal_allowretry();
}
inline void RspDataHighwayHead::_internal_set_allowretry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allowretry_ = value;
}
inline void RspDataHighwayHead::set_allowretry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allowretry(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.allowRetry)
}

// int32 cachecost = 5;
inline void RspDataHighwayHead::clear_cachecost() {
  cachecost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::_internal_cachecost() const {
  return cachecost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::cachecost() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.cachecost)
  return _internal_cachecost();
}
inline void RspDataHighwayHead::_internal_set_cachecost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cachecost_ = value;
}
inline void RspDataHighwayHead::set_cachecost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cachecost(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.cachecost)
}

// int32 htcost = 6;
inline void RspDataHighwayHead::clear_htcost() {
  htcost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::_internal_htcost() const {
  return htcost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::htcost() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.htcost)
  return _internal_htcost();
}
inline void RspDataHighwayHead::_internal_set_htcost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  htcost_ = value;
}
inline void RspDataHighwayHead::set_htcost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_htcost(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.htcost)
}

// bytes rspExtendinfo = 7;
inline void RspDataHighwayHead::clear_rspextendinfo() {
  rspextendinfo_.ClearToEmpty();
}
inline const std::string& RspDataHighwayHead::rspextendinfo() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.rspExtendinfo)
  return _internal_rspextendinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RspDataHighwayHead::set_rspextendinfo(ArgT0&& arg0, ArgT... args) {
 
 rspextendinfo_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.rspExtendinfo)
}
inline std::string* RspDataHighwayHead::mutable_rspextendinfo() {
  std::string* _s = _internal_mutable_rspextendinfo();
  // @@protoc_insertion_point(field_mutable:pb.RspDataHighwayHead.rspExtendinfo)
  return _s;
}
inline const std::string& RspDataHighwayHead::_internal_rspextendinfo() const {
  return rspextendinfo_.Get();
}
inline void RspDataHighwayHead::_internal_set_rspextendinfo(const std::string& value) {
  
  rspextendinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RspDataHighwayHead::_internal_mutable_rspextendinfo() {
  
  return rspextendinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RspDataHighwayHead::release_rspextendinfo() {
  // @@protoc_insertion_point(field_release:pb.RspDataHighwayHead.rspExtendinfo)
  return rspextendinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RspDataHighwayHead::set_allocated_rspextendinfo(std::string* rspextendinfo) {
  if (rspextendinfo != nullptr) {
    
  } else {
    
  }
  rspextendinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rspextendinfo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.RspDataHighwayHead.rspExtendinfo)
}

// int64 timestamp = 8;
inline void RspDataHighwayHead::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspDataHighwayHead::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspDataHighwayHead::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.timestamp)
  return _internal_timestamp();
}
inline void RspDataHighwayHead::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RspDataHighwayHead::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.timestamp)
}

// int64 range = 9;
inline void RspDataHighwayHead::clear_range() {
  range_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspDataHighwayHead::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspDataHighwayHead::range() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.range)
  return _internal_range();
}
inline void RspDataHighwayHead::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  range_ = value;
}
inline void RspDataHighwayHead::set_range(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.range)
}

// int32 isReset = 10;
inline void RspDataHighwayHead::clear_isreset() {
  isreset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::_internal_isreset() const {
  return isreset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspDataHighwayHead::isreset() const {
  // @@protoc_insertion_point(field_get:pb.RspDataHighwayHead.isReset)
  return _internal_isreset();
}
inline void RspDataHighwayHead::_internal_set_isreset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isreset_ = value;
}
inline void RspDataHighwayHead::set_isreset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isreset(value);
  // @@protoc_insertion_point(field_set:pb.RspDataHighwayHead.isReset)
}

// -------------------------------------------------------------------

// DataHighwayHead

// int32 version = 1;
inline void DataHighwayHead::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::version() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.version)
  return _internal_version();
}
inline void DataHighwayHead::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void DataHighwayHead::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.version)
}

// string uin = 2;
inline void DataHighwayHead::clear_uin() {
  uin_.ClearToEmpty();
}
inline const std::string& DataHighwayHead::uin() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.uin)
  return _internal_uin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataHighwayHead::set_uin(ArgT0&& arg0, ArgT... args) {
 
 uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.uin)
}
inline std::string* DataHighwayHead::mutable_uin() {
  std::string* _s = _internal_mutable_uin();
  // @@protoc_insertion_point(field_mutable:pb.DataHighwayHead.uin)
  return _s;
}
inline const std::string& DataHighwayHead::_internal_uin() const {
  return uin_.Get();
}
inline void DataHighwayHead::_internal_set_uin(const std::string& value) {
  
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::_internal_mutable_uin() {
  
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::release_uin() {
  // @@protoc_insertion_point(field_release:pb.DataHighwayHead.uin)
  return uin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataHighwayHead::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    
  } else {
    
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DataHighwayHead.uin)
}

// string command = 3;
inline void DataHighwayHead::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DataHighwayHead::command() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataHighwayHead::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.command)
}
inline std::string* DataHighwayHead::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:pb.DataHighwayHead.command)
  return _s;
}
inline const std::string& DataHighwayHead::_internal_command() const {
  return command_.Get();
}
inline void DataHighwayHead::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::release_command() {
  // @@protoc_insertion_point(field_release:pb.DataHighwayHead.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataHighwayHead::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DataHighwayHead.command)
}

// int32 seq = 4;
inline void DataHighwayHead::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::seq() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.seq)
  return _internal_seq();
}
inline void DataHighwayHead::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void DataHighwayHead::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.seq)
}

// int32 retryTimes = 5;
inline void DataHighwayHead::clear_retrytimes() {
  retrytimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_retrytimes() const {
  return retrytimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::retrytimes() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.retryTimes)
  return _internal_retrytimes();
}
inline void DataHighwayHead::_internal_set_retrytimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retrytimes_ = value;
}
inline void DataHighwayHead::set_retrytimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retrytimes(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.retryTimes)
}

// int32 appid = 6;
inline void DataHighwayHead::clear_appid() {
  appid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::appid() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.appid)
  return _internal_appid();
}
inline void DataHighwayHead::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appid_ = value;
}
inline void DataHighwayHead::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.appid)
}

// int32 dataflag = 7;
inline void DataHighwayHead::clear_dataflag() {
  dataflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_dataflag() const {
  return dataflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::dataflag() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.dataflag)
  return _internal_dataflag();
}
inline void DataHighwayHead::_internal_set_dataflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dataflag_ = value;
}
inline void DataHighwayHead::set_dataflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dataflag(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.dataflag)
}

// int32 commandId = 8;
inline void DataHighwayHead::clear_commandid() {
  commandid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_commandid() const {
  return commandid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::commandid() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.commandId)
  return _internal_commandid();
}
inline void DataHighwayHead::_internal_set_commandid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  commandid_ = value;
}
inline void DataHighwayHead::set_commandid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commandid(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.commandId)
}

// string buildVer = 9;
inline void DataHighwayHead::clear_buildver() {
  buildver_.ClearToEmpty();
}
inline const std::string& DataHighwayHead::buildver() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.buildVer)
  return _internal_buildver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataHighwayHead::set_buildver(ArgT0&& arg0, ArgT... args) {
 
 buildver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.buildVer)
}
inline std::string* DataHighwayHead::mutable_buildver() {
  std::string* _s = _internal_mutable_buildver();
  // @@protoc_insertion_point(field_mutable:pb.DataHighwayHead.buildVer)
  return _s;
}
inline const std::string& DataHighwayHead::_internal_buildver() const {
  return buildver_.Get();
}
inline void DataHighwayHead::_internal_set_buildver(const std::string& value) {
  
  buildver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::_internal_mutable_buildver() {
  
  return buildver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::release_buildver() {
  // @@protoc_insertion_point(field_release:pb.DataHighwayHead.buildVer)
  return buildver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataHighwayHead::set_allocated_buildver(std::string* buildver) {
  if (buildver != nullptr) {
    
  } else {
    
  }
  buildver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buildver,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.DataHighwayHead.buildVer)
}

// int32 localeId = 10;
inline void DataHighwayHead::clear_localeid() {
  localeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::_internal_localeid() const {
  return localeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataHighwayHead::localeid() const {
  // @@protoc_insertion_point(field_get:pb.DataHighwayHead.localeId)
  return _internal_localeid();
}
inline void DataHighwayHead::_internal_set_localeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  localeid_ = value;
}
inline void DataHighwayHead::set_localeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_localeid(value);
  // @@protoc_insertion_point(field_set:pb.DataHighwayHead.localeId)
}

// -------------------------------------------------------------------

// SegHead

// int32 serviceid = 1;
inline void SegHead::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::serviceid() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.serviceid)
  return _internal_serviceid();
}
inline void SegHead::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void SegHead::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.serviceid)
}

// int64 filesize = 2;
inline void SegHead::clear_filesize() {
  filesize_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegHead::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegHead::filesize() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.filesize)
  return _internal_filesize();
}
inline void SegHead::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  filesize_ = value;
}
inline void SegHead::set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.filesize)
}

// int64 dataoffset = 3;
inline void SegHead::clear_dataoffset() {
  dataoffset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegHead::_internal_dataoffset() const {
  return dataoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegHead::dataoffset() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.dataoffset)
  return _internal_dataoffset();
}
inline void SegHead::_internal_set_dataoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dataoffset_ = value;
}
inline void SegHead::set_dataoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dataoffset(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.dataoffset)
}

// int32 datalength = 4;
inline void SegHead::clear_datalength() {
  datalength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_datalength() const {
  return datalength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::datalength() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.datalength)
  return _internal_datalength();
}
inline void SegHead::_internal_set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datalength_ = value;
}
inline void SegHead::set_datalength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datalength(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.datalength)
}

// int32 rtcode = 5;
inline void SegHead::clear_rtcode() {
  rtcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_rtcode() const {
  return rtcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::rtcode() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.rtcode)
  return _internal_rtcode();
}
inline void SegHead::_internal_set_rtcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rtcode_ = value;
}
inline void SegHead::set_rtcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rtcode(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.rtcode)
}

// bytes serviceticket = 6;
inline void SegHead::clear_serviceticket() {
  serviceticket_.ClearToEmpty();
}
inline const std::string& SegHead::serviceticket() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.serviceticket)
  return _internal_serviceticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegHead::set_serviceticket(ArgT0&& arg0, ArgT... args) {
 
 serviceticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SegHead.serviceticket)
}
inline std::string* SegHead::mutable_serviceticket() {
  std::string* _s = _internal_mutable_serviceticket();
  // @@protoc_insertion_point(field_mutable:pb.SegHead.serviceticket)
  return _s;
}
inline const std::string& SegHead::_internal_serviceticket() const {
  return serviceticket_.Get();
}
inline void SegHead::_internal_set_serviceticket(const std::string& value) {
  
  serviceticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SegHead::_internal_mutable_serviceticket() {
  
  return serviceticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SegHead::release_serviceticket() {
  // @@protoc_insertion_point(field_release:pb.SegHead.serviceticket)
  return serviceticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SegHead::set_allocated_serviceticket(std::string* serviceticket) {
  if (serviceticket != nullptr) {
    
  } else {
    
  }
  serviceticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SegHead.serviceticket)
}

// int32 flag = 7;
inline void SegHead::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::flag() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.flag)
  return _internal_flag();
}
inline void SegHead::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void SegHead::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.flag)
}

// bytes md5 = 8;
inline void SegHead::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& SegHead::md5() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegHead::set_md5(ArgT0&& arg0, ArgT... args) {
 
 md5_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SegHead.md5)
}
inline std::string* SegHead::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:pb.SegHead.md5)
  return _s;
}
inline const std::string& SegHead::_internal_md5() const {
  return md5_.Get();
}
inline void SegHead::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SegHead::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SegHead::release_md5() {
  // @@protoc_insertion_point(field_release:pb.SegHead.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SegHead::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SegHead.md5)
}

// bytes fileMd5 = 9;
inline void SegHead::clear_filemd5() {
  filemd5_.ClearToEmpty();
}
inline const std::string& SegHead::filemd5() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.fileMd5)
  return _internal_filemd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegHead::set_filemd5(ArgT0&& arg0, ArgT... args) {
 
 filemd5_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SegHead.fileMd5)
}
inline std::string* SegHead::mutable_filemd5() {
  std::string* _s = _internal_mutable_filemd5();
  // @@protoc_insertion_point(field_mutable:pb.SegHead.fileMd5)
  return _s;
}
inline const std::string& SegHead::_internal_filemd5() const {
  return filemd5_.Get();
}
inline void SegHead::_internal_set_filemd5(const std::string& value) {
  
  filemd5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SegHead::_internal_mutable_filemd5() {
  
  return filemd5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SegHead::release_filemd5() {
  // @@protoc_insertion_point(field_release:pb.SegHead.fileMd5)
  return filemd5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SegHead::set_allocated_filemd5(std::string* filemd5) {
  if (filemd5 != nullptr) {
    
  } else {
    
  }
  filemd5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filemd5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SegHead.fileMd5)
}

// int32 cacheAddr = 10;
inline void SegHead::clear_cacheaddr() {
  cacheaddr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_cacheaddr() const {
  return cacheaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::cacheaddr() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.cacheAddr)
  return _internal_cacheaddr();
}
inline void SegHead::_internal_set_cacheaddr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cacheaddr_ = value;
}
inline void SegHead::set_cacheaddr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cacheaddr(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.cacheAddr)
}

// int32 queryTimes = 11;
inline void SegHead::clear_querytimes() {
  querytimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_querytimes() const {
  return querytimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::querytimes() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.queryTimes)
  return _internal_querytimes();
}
inline void SegHead::_internal_set_querytimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  querytimes_ = value;
}
inline void SegHead::set_querytimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_querytimes(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.queryTimes)
}

// int32 updateCacheip = 12;
inline void SegHead::clear_updatecacheip() {
  updatecacheip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::_internal_updatecacheip() const {
  return updatecacheip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegHead::updatecacheip() const {
  // @@protoc_insertion_point(field_get:pb.SegHead.updateCacheip)
  return _internal_updatecacheip();
}
inline void SegHead::_internal_set_updatecacheip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updatecacheip_ = value;
}
inline void SegHead::set_updatecacheip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updatecacheip(value);
  // @@protoc_insertion_point(field_set:pb.SegHead.updateCacheip)
}

// -------------------------------------------------------------------

// DeleteMessageRequest

// repeated .pb.MessageItem items = 1;
inline int DeleteMessageRequest::_internal_items_size() const {
  return items_.size();
}
inline int DeleteMessageRequest::items_size() const {
  return _internal_items_size();
}
inline void DeleteMessageRequest::clear_items() {
  items_.Clear();
}
inline ::pb::MessageItem* DeleteMessageRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DeleteMessageRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MessageItem >*
DeleteMessageRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pb.DeleteMessageRequest.items)
  return &items_;
}
inline const ::pb::MessageItem& DeleteMessageRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::pb::MessageItem& DeleteMessageRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:pb.DeleteMessageRequest.items)
  return _internal_items(index);
}
inline ::pb::MessageItem* DeleteMessageRequest::_internal_add_items() {
  return items_.Add();
}
inline ::pb::MessageItem* DeleteMessageRequest::add_items() {
  ::pb::MessageItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:pb.DeleteMessageRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MessageItem >&
DeleteMessageRequest::items() const {
  // @@protoc_insertion_point(field_list:pb.DeleteMessageRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// MessageItem

// int64 fromUin = 1;
inline void MessageItem::clear_fromuin() {
  fromuin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::_internal_fromuin() const {
  return fromuin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::fromuin() const {
  // @@protoc_insertion_point(field_get:pb.MessageItem.fromUin)
  return _internal_fromuin();
}
inline void MessageItem::_internal_set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fromuin_ = value;
}
inline void MessageItem::set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fromuin(value);
  // @@protoc_insertion_point(field_set:pb.MessageItem.fromUin)
}

// int64 toUin = 2;
inline void MessageItem::clear_touin() {
  touin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::_internal_touin() const {
  return touin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::touin() const {
  // @@protoc_insertion_point(field_get:pb.MessageItem.toUin)
  return _internal_touin();
}
inline void MessageItem::_internal_set_touin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  touin_ = value;
}
inline void MessageItem::set_touin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_touin(value);
  // @@protoc_insertion_point(field_set:pb.MessageItem.toUin)
}

// int32 msgType = 3;
inline void MessageItem::clear_msgtype() {
  msgtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::msgtype() const {
  // @@protoc_insertion_point(field_get:pb.MessageItem.msgType)
  return _internal_msgtype();
}
inline void MessageItem::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgtype_ = value;
}
inline void MessageItem::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:pb.MessageItem.msgType)
}

// int32 msgSeq = 4;
inline void MessageItem::clear_msgseq() {
  msgseq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::_internal_msgseq() const {
  return msgseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.MessageItem.msgSeq)
  return _internal_msgseq();
}
inline void MessageItem::_internal_set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgseq_ = value;
}
inline void MessageItem::set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgseq(value);
  // @@protoc_insertion_point(field_set:pb.MessageItem.msgSeq)
}

// int64 msgUid = 5;
inline void MessageItem::clear_msguid() {
  msguid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::_internal_msguid() const {
  return msguid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::msguid() const {
  // @@protoc_insertion_point(field_get:pb.MessageItem.msgUid)
  return _internal_msguid();
}
inline void MessageItem::_internal_set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msguid_ = value;
}
inline void MessageItem::set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msguid(value);
  // @@protoc_insertion_point(field_set:pb.MessageItem.msgUid)
}

// bytes sig = 7;
inline void MessageItem::clear_sig() {
  sig_.ClearToEmpty();
}
inline const std::string& MessageItem::sig() const {
  // @@protoc_insertion_point(field_get:pb.MessageItem.sig)
  return _internal_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_sig(ArgT0&& arg0, ArgT... args) {
 
 sig_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.MessageItem.sig)
}
inline std::string* MessageItem::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:pb.MessageItem.sig)
  return _s;
}
inline const std::string& MessageItem::_internal_sig() const {
  return sig_.Get();
}
inline void MessageItem::_internal_set_sig(const std::string& value) {
  
  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_sig() {
  
  return sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_sig() {
  // @@protoc_insertion_point(field_release:pb.MessageItem.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.MessageItem.sig)
}

// -------------------------------------------------------------------

// SubD4

// int64 uin = 1;
inline void SubD4::clear_uin() {
  uin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubD4::_internal_uin() const {
  return uin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubD4::uin() const {
  // @@protoc_insertion_point(field_get:pb.SubD4.uin)
  return _internal_uin();
}
inline void SubD4::_internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uin_ = value;
}
inline void SubD4::set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:pb.SubD4.uin)
}

// -------------------------------------------------------------------

// Sub8A

// repeated .pb.Sub8AMsgInfo msg_info = 1;
inline int Sub8A::_internal_msg_info_size() const {
  return msg_info_.size();
}
inline int Sub8A::msg_info_size() const {
  return _internal_msg_info_size();
}
inline void Sub8A::clear_msg_info() {
  msg_info_.Clear();
}
inline ::pb::Sub8AMsgInfo* Sub8A::mutable_msg_info(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Sub8A.msg_info)
  return msg_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Sub8AMsgInfo >*
Sub8A::mutable_msg_info() {
  // @@protoc_insertion_point(field_mutable_list:pb.Sub8A.msg_info)
  return &msg_info_;
}
inline const ::pb::Sub8AMsgInfo& Sub8A::_internal_msg_info(int index) const {
  return msg_info_.Get(index);
}
inline const ::pb::Sub8AMsgInfo& Sub8A::msg_info(int index) const {
  // @@protoc_insertion_point(field_get:pb.Sub8A.msg_info)
  return _internal_msg_info(index);
}
inline ::pb::Sub8AMsgInfo* Sub8A::_internal_add_msg_info() {
  return msg_info_.Add();
}
inline ::pb::Sub8AMsgInfo* Sub8A::add_msg_info() {
  ::pb::Sub8AMsgInfo* _add = _internal_add_msg_info();
  // @@protoc_insertion_point(field_add:pb.Sub8A.msg_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Sub8AMsgInfo >&
Sub8A::msg_info() const {
  // @@protoc_insertion_point(field_list:pb.Sub8A.msg_info)
  return msg_info_;
}

// int32 appId = 2;
inline void Sub8A::clear_appid() {
  appid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8A::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8A::appid() const {
  // @@protoc_insertion_point(field_get:pb.Sub8A.appId)
  return _internal_appid();
}
inline void Sub8A::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appid_ = value;
}
inline void Sub8A::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:pb.Sub8A.appId)
}

// int32 instId = 3;
inline void Sub8A::clear_instid() {
  instid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8A::_internal_instid() const {
  return instid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8A::instid() const {
  // @@protoc_insertion_point(field_get:pb.Sub8A.instId)
  return _internal_instid();
}
inline void Sub8A::_internal_set_instid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instid_ = value;
}
inline void Sub8A::set_instid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instid(value);
  // @@protoc_insertion_point(field_set:pb.Sub8A.instId)
}

// int32 longMessageFlag = 4;
inline void Sub8A::clear_longmessageflag() {
  longmessageflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8A::_internal_longmessageflag() const {
  return longmessageflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8A::longmessageflag() const {
  // @@protoc_insertion_point(field_get:pb.Sub8A.longMessageFlag)
  return _internal_longmessageflag();
}
inline void Sub8A::_internal_set_longmessageflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  longmessageflag_ = value;
}
inline void Sub8A::set_longmessageflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_longmessageflag(value);
  // @@protoc_insertion_point(field_set:pb.Sub8A.longMessageFlag)
}

// bytes reserved = 5;
inline void Sub8A::clear_reserved() {
  reserved_.ClearToEmpty();
}
inline const std::string& Sub8A::reserved() const {
  // @@protoc_insertion_point(field_get:pb.Sub8A.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sub8A::set_reserved(ArgT0&& arg0, ArgT... args) {
 
 reserved_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Sub8A.reserved)
}
inline std::string* Sub8A::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:pb.Sub8A.reserved)
  return _s;
}
inline const std::string& Sub8A::_internal_reserved() const {
  return reserved_.Get();
}
inline void Sub8A::_internal_set_reserved(const std::string& value) {
  
  reserved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sub8A::_internal_mutable_reserved() {
  
  return reserved_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sub8A::release_reserved() {
  // @@protoc_insertion_point(field_release:pb.Sub8A.reserved)
  return reserved_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sub8A::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    
  } else {
    
  }
  reserved_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserved,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.Sub8A.reserved)
}

// -------------------------------------------------------------------

// Sub8AMsgInfo

// int64 fromUin = 1;
inline void Sub8AMsgInfo::clear_fromuin() {
  fromuin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::_internal_fromuin() const {
  return fromuin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::fromuin() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.fromUin)
  return _internal_fromuin();
}
inline void Sub8AMsgInfo::_internal_set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fromuin_ = value;
}
inline void Sub8AMsgInfo::set_fromuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fromuin(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.fromUin)
}

// int64 toUin = 2;
inline void Sub8AMsgInfo::clear_touin() {
  touin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::_internal_touin() const {
  return touin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::touin() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.toUin)
  return _internal_touin();
}
inline void Sub8AMsgInfo::_internal_set_touin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  touin_ = value;
}
inline void Sub8AMsgInfo::set_touin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_touin(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.toUin)
}

// int32 msgSeq = 3;
inline void Sub8AMsgInfo::clear_msgseq() {
  msgseq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::_internal_msgseq() const {
  return msgseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.msgSeq)
  return _internal_msgseq();
}
inline void Sub8AMsgInfo::_internal_set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgseq_ = value;
}
inline void Sub8AMsgInfo::set_msgseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgseq(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.msgSeq)
}

// int64 msgUid = 4;
inline void Sub8AMsgInfo::clear_msguid() {
  msguid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::_internal_msguid() const {
  return msguid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::msguid() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.msgUid)
  return _internal_msguid();
}
inline void Sub8AMsgInfo::_internal_set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msguid_ = value;
}
inline void Sub8AMsgInfo::set_msguid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msguid(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.msgUid)
}

// int64 msgTime = 5;
inline void Sub8AMsgInfo::clear_msgtime() {
  msgtime_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::_internal_msgtime() const {
  return msgtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub8AMsgInfo::msgtime() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.msgTime)
  return _internal_msgtime();
}
inline void Sub8AMsgInfo::_internal_set_msgtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msgtime_ = value;
}
inline void Sub8AMsgInfo::set_msgtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msgtime(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.msgTime)
}

// int32 msgRandom = 6;
inline void Sub8AMsgInfo::clear_msgrandom() {
  msgrandom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::_internal_msgrandom() const {
  return msgrandom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::msgrandom() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.msgRandom)
  return _internal_msgrandom();
}
inline void Sub8AMsgInfo::_internal_set_msgrandom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgrandom_ = value;
}
inline void Sub8AMsgInfo::set_msgrandom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgrandom(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.msgRandom)
}

// int32 pkgNum = 7;
inline void Sub8AMsgInfo::clear_pkgnum() {
  pkgnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::_internal_pkgnum() const {
  return pkgnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::pkgnum() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.pkgNum)
  return _internal_pkgnum();
}
inline void Sub8AMsgInfo::_internal_set_pkgnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pkgnum_ = value;
}
inline void Sub8AMsgInfo::set_pkgnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pkgnum(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.pkgNum)
}

// int32 pkgIndex = 8;
inline void Sub8AMsgInfo::clear_pkgindex() {
  pkgindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::_internal_pkgindex() const {
  return pkgindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::pkgindex() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.pkgIndex)
  return _internal_pkgindex();
}
inline void Sub8AMsgInfo::_internal_set_pkgindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pkgindex_ = value;
}
inline void Sub8AMsgInfo::set_pkgindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pkgindex(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.pkgIndex)
}

// int32 devSeq = 9;
inline void Sub8AMsgInfo::clear_devseq() {
  devseq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::_internal_devseq() const {
  return devseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub8AMsgInfo::devseq() const {
  // @@protoc_insertion_point(field_get:pb.Sub8AMsgInfo.devSeq)
  return _internal_devseq();
}
inline void Sub8AMsgInfo::_internal_set_devseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devseq_ = value;
}
inline void Sub8AMsgInfo::set_devseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_devseq(value);
  // @@protoc_insertion_point(field_set:pb.Sub8AMsgInfo.devSeq)
}

// -------------------------------------------------------------------

// SubB3

// int32 type = 1;
inline void SubB3::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubB3::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubB3::type() const {
  // @@protoc_insertion_point(field_get:pb.SubB3.type)
  return _internal_type();
}
inline void SubB3::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SubB3::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.SubB3.type)
}

// .pb.SubB3AddFrdNotify msgAddFrdNotify = 2;
inline bool SubB3::_internal_has_msgaddfrdnotify() const {
  return this != internal_default_instance() && msgaddfrdnotify_ != nullptr;
}
inline bool SubB3::has_msgaddfrdnotify() const {
  return _internal_has_msgaddfrdnotify();
}
inline void SubB3::clear_msgaddfrdnotify() {
  if (GetArenaForAllocation() == nullptr && msgaddfrdnotify_ != nullptr) {
    delete msgaddfrdnotify_;
  }
  msgaddfrdnotify_ = nullptr;
}
inline const ::pb::SubB3AddFrdNotify& SubB3::_internal_msgaddfrdnotify() const {
  const ::pb::SubB3AddFrdNotify* p = msgaddfrdnotify_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::SubB3AddFrdNotify&>(
      ::pb::_SubB3AddFrdNotify_default_instance_);
}
inline const ::pb::SubB3AddFrdNotify& SubB3::msgaddfrdnotify() const {
  // @@protoc_insertion_point(field_get:pb.SubB3.msgAddFrdNotify)
  return _internal_msgaddfrdnotify();
}
inline void SubB3::unsafe_arena_set_allocated_msgaddfrdnotify(
    ::pb::SubB3AddFrdNotify* msgaddfrdnotify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgaddfrdnotify_);
  }
  msgaddfrdnotify_ = msgaddfrdnotify;
  if (msgaddfrdnotify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SubB3.msgAddFrdNotify)
}
inline ::pb::SubB3AddFrdNotify* SubB3::release_msgaddfrdnotify() {
  
  ::pb::SubB3AddFrdNotify* temp = msgaddfrdnotify_;
  msgaddfrdnotify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::SubB3AddFrdNotify* SubB3::unsafe_arena_release_msgaddfrdnotify() {
  // @@protoc_insertion_point(field_release:pb.SubB3.msgAddFrdNotify)
  
  ::pb::SubB3AddFrdNotify* temp = msgaddfrdnotify_;
  msgaddfrdnotify_ = nullptr;
  return temp;
}
inline ::pb::SubB3AddFrdNotify* SubB3::_internal_mutable_msgaddfrdnotify() {
  
  if (msgaddfrdnotify_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SubB3AddFrdNotify>(GetArenaForAllocation());
    msgaddfrdnotify_ = p;
  }
  return msgaddfrdnotify_;
}
inline ::pb::SubB3AddFrdNotify* SubB3::mutable_msgaddfrdnotify() {
  ::pb::SubB3AddFrdNotify* _msg = _internal_mutable_msgaddfrdnotify();
  // @@protoc_insertion_point(field_mutable:pb.SubB3.msgAddFrdNotify)
  return _msg;
}
inline void SubB3::set_allocated_msgaddfrdnotify(::pb::SubB3AddFrdNotify* msgaddfrdnotify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgaddfrdnotify_;
  }
  if (msgaddfrdnotify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::SubB3AddFrdNotify>::GetOwningArena(msgaddfrdnotify);
    if (message_arena != submessage_arena) {
      msgaddfrdnotify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgaddfrdnotify, submessage_arena);
    }
    
  } else {
    
  }
  msgaddfrdnotify_ = msgaddfrdnotify;
  // @@protoc_insertion_point(field_set_allocated:pb.SubB3.msgAddFrdNotify)
}

// -------------------------------------------------------------------

// SubB3AddFrdNotify

// int64 uin = 1;
inline void SubB3AddFrdNotify::clear_uin() {
  uin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubB3AddFrdNotify::_internal_uin() const {
  return uin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubB3AddFrdNotify::uin() const {
  // @@protoc_insertion_point(field_get:pb.SubB3AddFrdNotify.uin)
  return _internal_uin();
}
inline void SubB3AddFrdNotify::_internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uin_ = value;
}
inline void SubB3AddFrdNotify::set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:pb.SubB3AddFrdNotify.uin)
}

// string nick = 5;
inline void SubB3AddFrdNotify::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& SubB3AddFrdNotify::nick() const {
  // @@protoc_insertion_point(field_get:pb.SubB3AddFrdNotify.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubB3AddFrdNotify::set_nick(ArgT0&& arg0, ArgT... args) {
 
 nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SubB3AddFrdNotify.nick)
}
inline std::string* SubB3AddFrdNotify::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:pb.SubB3AddFrdNotify.nick)
  return _s;
}
inline const std::string& SubB3AddFrdNotify::_internal_nick() const {
  return nick_.Get();
}
inline void SubB3AddFrdNotify::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubB3AddFrdNotify::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubB3AddFrdNotify::release_nick() {
  // @@protoc_insertion_point(field_release:pb.SubB3AddFrdNotify.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubB3AddFrdNotify::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SubB3AddFrdNotify.nick)
}

// -------------------------------------------------------------------

// Sub44

// .pb.Sub44FriendSyncMsg friendSyncMsg = 1;
inline bool Sub44::_internal_has_friendsyncmsg() const {
  return this != internal_default_instance() && friendsyncmsg_ != nullptr;
}
inline bool Sub44::has_friendsyncmsg() const {
  return _internal_has_friendsyncmsg();
}
inline void Sub44::clear_friendsyncmsg() {
  if (GetArenaForAllocation() == nullptr && friendsyncmsg_ != nullptr) {
    delete friendsyncmsg_;
  }
  friendsyncmsg_ = nullptr;
}
inline const ::pb::Sub44FriendSyncMsg& Sub44::_internal_friendsyncmsg() const {
  const ::pb::Sub44FriendSyncMsg* p = friendsyncmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Sub44FriendSyncMsg&>(
      ::pb::_Sub44FriendSyncMsg_default_instance_);
}
inline const ::pb::Sub44FriendSyncMsg& Sub44::friendsyncmsg() const {
  // @@protoc_insertion_point(field_get:pb.Sub44.friendSyncMsg)
  return _internal_friendsyncmsg();
}
inline void Sub44::unsafe_arena_set_allocated_friendsyncmsg(
    ::pb::Sub44FriendSyncMsg* friendsyncmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendsyncmsg_);
  }
  friendsyncmsg_ = friendsyncmsg;
  if (friendsyncmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Sub44.friendSyncMsg)
}
inline ::pb::Sub44FriendSyncMsg* Sub44::release_friendsyncmsg() {
  
  ::pb::Sub44FriendSyncMsg* temp = friendsyncmsg_;
  friendsyncmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Sub44FriendSyncMsg* Sub44::unsafe_arena_release_friendsyncmsg() {
  // @@protoc_insertion_point(field_release:pb.Sub44.friendSyncMsg)
  
  ::pb::Sub44FriendSyncMsg* temp = friendsyncmsg_;
  friendsyncmsg_ = nullptr;
  return temp;
}
inline ::pb::Sub44FriendSyncMsg* Sub44::_internal_mutable_friendsyncmsg() {
  
  if (friendsyncmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Sub44FriendSyncMsg>(GetArenaForAllocation());
    friendsyncmsg_ = p;
  }
  return friendsyncmsg_;
}
inline ::pb::Sub44FriendSyncMsg* Sub44::mutable_friendsyncmsg() {
  ::pb::Sub44FriendSyncMsg* _msg = _internal_mutable_friendsyncmsg();
  // @@protoc_insertion_point(field_mutable:pb.Sub44.friendSyncMsg)
  return _msg;
}
inline void Sub44::set_allocated_friendsyncmsg(::pb::Sub44FriendSyncMsg* friendsyncmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete friendsyncmsg_;
  }
  if (friendsyncmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::Sub44FriendSyncMsg>::GetOwningArena(friendsyncmsg);
    if (message_arena != submessage_arena) {
      friendsyncmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsyncmsg, submessage_arena);
    }
    
  } else {
    
  }
  friendsyncmsg_ = friendsyncmsg;
  // @@protoc_insertion_point(field_set_allocated:pb.Sub44.friendSyncMsg)
}

// .pb.Sub44GroupSyncMsg groupSyncMsg = 2;
inline bool Sub44::_internal_has_groupsyncmsg() const {
  return this != internal_default_instance() && groupsyncmsg_ != nullptr;
}
inline bool Sub44::has_groupsyncmsg() const {
  return _internal_has_groupsyncmsg();
}
inline void Sub44::clear_groupsyncmsg() {
  if (GetArenaForAllocation() == nullptr && groupsyncmsg_ != nullptr) {
    delete groupsyncmsg_;
  }
  groupsyncmsg_ = nullptr;
}
inline const ::pb::Sub44GroupSyncMsg& Sub44::_internal_groupsyncmsg() const {
  const ::pb::Sub44GroupSyncMsg* p = groupsyncmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Sub44GroupSyncMsg&>(
      ::pb::_Sub44GroupSyncMsg_default_instance_);
}
inline const ::pb::Sub44GroupSyncMsg& Sub44::groupsyncmsg() const {
  // @@protoc_insertion_point(field_get:pb.Sub44.groupSyncMsg)
  return _internal_groupsyncmsg();
}
inline void Sub44::unsafe_arena_set_allocated_groupsyncmsg(
    ::pb::Sub44GroupSyncMsg* groupsyncmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupsyncmsg_);
  }
  groupsyncmsg_ = groupsyncmsg;
  if (groupsyncmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Sub44.groupSyncMsg)
}
inline ::pb::Sub44GroupSyncMsg* Sub44::release_groupsyncmsg() {
  
  ::pb::Sub44GroupSyncMsg* temp = groupsyncmsg_;
  groupsyncmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Sub44GroupSyncMsg* Sub44::unsafe_arena_release_groupsyncmsg() {
  // @@protoc_insertion_point(field_release:pb.Sub44.groupSyncMsg)
  
  ::pb::Sub44GroupSyncMsg* temp = groupsyncmsg_;
  groupsyncmsg_ = nullptr;
  return temp;
}
inline ::pb::Sub44GroupSyncMsg* Sub44::_internal_mutable_groupsyncmsg() {
  
  if (groupsyncmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Sub44GroupSyncMsg>(GetArenaForAllocation());
    groupsyncmsg_ = p;
  }
  return groupsyncmsg_;
}
inline ::pb::Sub44GroupSyncMsg* Sub44::mutable_groupsyncmsg() {
  ::pb::Sub44GroupSyncMsg* _msg = _internal_mutable_groupsyncmsg();
  // @@protoc_insertion_point(field_mutable:pb.Sub44.groupSyncMsg)
  return _msg;
}
inline void Sub44::set_allocated_groupsyncmsg(::pb::Sub44GroupSyncMsg* groupsyncmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete groupsyncmsg_;
  }
  if (groupsyncmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::Sub44GroupSyncMsg>::GetOwningArena(groupsyncmsg);
    if (message_arena != submessage_arena) {
      groupsyncmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupsyncmsg, submessage_arena);
    }
    
  } else {
    
  }
  groupsyncmsg_ = groupsyncmsg;
  // @@protoc_insertion_point(field_set_allocated:pb.Sub44.groupSyncMsg)
}

// -------------------------------------------------------------------

// Sub44FriendSyncMsg

// int64 uin = 1;
inline void Sub44FriendSyncMsg::clear_uin() {
  uin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44FriendSyncMsg::_internal_uin() const {
  return uin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44FriendSyncMsg::uin() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.uin)
  return _internal_uin();
}
inline void Sub44FriendSyncMsg::_internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uin_ = value;
}
inline void Sub44FriendSyncMsg::set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.uin)
}

// int64 fUin = 2;
inline void Sub44FriendSyncMsg::clear_fuin() {
  fuin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44FriendSyncMsg::_internal_fuin() const {
  return fuin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44FriendSyncMsg::fuin() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.fUin)
  return _internal_fuin();
}
inline void Sub44FriendSyncMsg::_internal_set_fuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fuin_ = value;
}
inline void Sub44FriendSyncMsg::set_fuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fuin(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.fUin)
}

// int32 processType = 3;
inline void Sub44FriendSyncMsg::clear_processtype() {
  processtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::_internal_processtype() const {
  return processtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::processtype() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.processType)
  return _internal_processtype();
}
inline void Sub44FriendSyncMsg::_internal_set_processtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processtype_ = value;
}
inline void Sub44FriendSyncMsg::set_processtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processtype(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.processType)
}

// int32 time = 4;
inline void Sub44FriendSyncMsg::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::time() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.time)
  return _internal_time();
}
inline void Sub44FriendSyncMsg::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void Sub44FriendSyncMsg::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.time)
}

// int32 processFlag = 5;
inline void Sub44FriendSyncMsg::clear_processflag() {
  processflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::_internal_processflag() const {
  return processflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::processflag() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.processFlag)
  return _internal_processflag();
}
inline void Sub44FriendSyncMsg::_internal_set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processflag_ = value;
}
inline void Sub44FriendSyncMsg::set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processflag(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.processFlag)
}

// int32 sourceId = 6;
inline void Sub44FriendSyncMsg::clear_sourceid() {
  sourceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::_internal_sourceid() const {
  return sourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::sourceid() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.sourceId)
  return _internal_sourceid();
}
inline void Sub44FriendSyncMsg::_internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceid_ = value;
}
inline void Sub44FriendSyncMsg::set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.sourceId)
}

// int32 sourceSubId = 7;
inline void Sub44FriendSyncMsg::clear_sourcesubid() {
  sourcesubid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::_internal_sourcesubid() const {
  return sourcesubid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44FriendSyncMsg::sourcesubid() const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.sourceSubId)
  return _internal_sourcesubid();
}
inline void Sub44FriendSyncMsg::_internal_set_sourcesubid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourcesubid_ = value;
}
inline void Sub44FriendSyncMsg::set_sourcesubid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourcesubid(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.sourceSubId)
}

// repeated string strWording = 8;
inline int Sub44FriendSyncMsg::_internal_strwording_size() const {
  return strwording_.size();
}
inline int Sub44FriendSyncMsg::strwording_size() const {
  return _internal_strwording_size();
}
inline void Sub44FriendSyncMsg::clear_strwording() {
  strwording_.Clear();
}
inline std::string* Sub44FriendSyncMsg::add_strwording() {
  std::string* _s = _internal_add_strwording();
  // @@protoc_insertion_point(field_add_mutable:pb.Sub44FriendSyncMsg.strWording)
  return _s;
}
inline const std::string& Sub44FriendSyncMsg::_internal_strwording(int index) const {
  return strwording_.Get(index);
}
inline const std::string& Sub44FriendSyncMsg::strwording(int index) const {
  // @@protoc_insertion_point(field_get:pb.Sub44FriendSyncMsg.strWording)
  return _internal_strwording(index);
}
inline std::string* Sub44FriendSyncMsg::mutable_strwording(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Sub44FriendSyncMsg.strWording)
  return strwording_.Mutable(index);
}
inline void Sub44FriendSyncMsg::set_strwording(int index, const std::string& value) {
  strwording_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::set_strwording(int index, std::string&& value) {
  strwording_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::set_strwording(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strwording_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::set_strwording(int index, const char* value, size_t size) {
  strwording_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Sub44FriendSyncMsg.strWording)
}
inline std::string* Sub44FriendSyncMsg::_internal_add_strwording() {
  return strwording_.Add();
}
inline void Sub44FriendSyncMsg::add_strwording(const std::string& value) {
  strwording_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::add_strwording(std::string&& value) {
  strwording_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::add_strwording(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strwording_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::add_strwording(const char* value, size_t size) {
  strwording_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Sub44FriendSyncMsg.strWording)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Sub44FriendSyncMsg::strwording() const {
  // @@protoc_insertion_point(field_list:pb.Sub44FriendSyncMsg.strWording)
  return strwording_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Sub44FriendSyncMsg::mutable_strwording() {
  // @@protoc_insertion_point(field_mutable_list:pb.Sub44FriendSyncMsg.strWording)
  return &strwording_;
}

// -------------------------------------------------------------------

// Sub44GroupSyncMsg

// int32 msgType = 1;
inline void Sub44GroupSyncMsg::clear_msgtype() {
  msgtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.msgType)
  return _internal_msgtype();
}
inline void Sub44GroupSyncMsg::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgtype_ = value;
}
inline void Sub44GroupSyncMsg::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.msgType)
}

// int64 msgSeq = 2;
inline void Sub44GroupSyncMsg::clear_msgseq() {
  msgseq_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_msgseq() const {
  return msgseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.msgSeq)
  return _internal_msgseq();
}
inline void Sub44GroupSyncMsg::_internal_set_msgseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msgseq_ = value;
}
inline void Sub44GroupSyncMsg::set_msgseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msgseq(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.msgSeq)
}

// int64 grpCode = 3;
inline void Sub44GroupSyncMsg::clear_grpcode() {
  grpcode_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_grpcode() const {
  return grpcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::grpcode() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.grpCode)
  return _internal_grpcode();
}
inline void Sub44GroupSyncMsg::_internal_set_grpcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  grpcode_ = value;
}
inline void Sub44GroupSyncMsg::set_grpcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_grpcode(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.grpCode)
}

// int64 gaCode = 4;
inline void Sub44GroupSyncMsg::clear_gacode() {
  gacode_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_gacode() const {
  return gacode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::gacode() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.gaCode)
  return _internal_gacode();
}
inline void Sub44GroupSyncMsg::_internal_set_gacode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gacode_ = value;
}
inline void Sub44GroupSyncMsg::set_gacode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gacode(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.gaCode)
}

// int64 optUin1 = 5;
inline void Sub44GroupSyncMsg::clear_optuin1() {
  optuin1_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_optuin1() const {
  return optuin1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::optuin1() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.optUin1)
  return _internal_optuin1();
}
inline void Sub44GroupSyncMsg::_internal_set_optuin1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optuin1_ = value;
}
inline void Sub44GroupSyncMsg::set_optuin1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_optuin1(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.optUin1)
}

// int64 optUin2 = 6;
inline void Sub44GroupSyncMsg::clear_optuin2() {
  optuin2_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_optuin2() const {
  return optuin2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::optuin2() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.optUin2)
  return _internal_optuin2();
}
inline void Sub44GroupSyncMsg::_internal_set_optuin2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optuin2_ = value;
}
inline void Sub44GroupSyncMsg::set_optuin2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_optuin2(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.optUin2)
}

// bytes msgBuf = 7;
inline void Sub44GroupSyncMsg::clear_msgbuf() {
  msgbuf_.ClearToEmpty();
}
inline const std::string& Sub44GroupSyncMsg::msgbuf() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.msgBuf)
  return _internal_msgbuf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sub44GroupSyncMsg::set_msgbuf(ArgT0&& arg0, ArgT... args) {
 
 msgbuf_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.msgBuf)
}
inline std::string* Sub44GroupSyncMsg::mutable_msgbuf() {
  std::string* _s = _internal_mutable_msgbuf();
  // @@protoc_insertion_point(field_mutable:pb.Sub44GroupSyncMsg.msgBuf)
  return _s;
}
inline const std::string& Sub44GroupSyncMsg::_internal_msgbuf() const {
  return msgbuf_.Get();
}
inline void Sub44GroupSyncMsg::_internal_set_msgbuf(const std::string& value) {
  
  msgbuf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::_internal_mutable_msgbuf() {
  
  return msgbuf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::release_msgbuf() {
  // @@protoc_insertion_point(field_release:pb.Sub44GroupSyncMsg.msgBuf)
  return msgbuf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sub44GroupSyncMsg::set_allocated_msgbuf(std::string* msgbuf) {
  if (msgbuf != nullptr) {
    
  } else {
    
  }
  msgbuf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgbuf,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.Sub44GroupSyncMsg.msgBuf)
}

// bytes authKey = 8;
inline void Sub44GroupSyncMsg::clear_authkey() {
  authkey_.ClearToEmpty();
}
inline const std::string& Sub44GroupSyncMsg::authkey() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.authKey)
  return _internal_authkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sub44GroupSyncMsg::set_authkey(ArgT0&& arg0, ArgT... args) {
 
 authkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.authKey)
}
inline std::string* Sub44GroupSyncMsg::mutable_authkey() {
  std::string* _s = _internal_mutable_authkey();
  // @@protoc_insertion_point(field_mutable:pb.Sub44GroupSyncMsg.authKey)
  return _s;
}
inline const std::string& Sub44GroupSyncMsg::_internal_authkey() const {
  return authkey_.Get();
}
inline void Sub44GroupSyncMsg::_internal_set_authkey(const std::string& value) {
  
  authkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::_internal_mutable_authkey() {
  
  return authkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::release_authkey() {
  // @@protoc_insertion_point(field_release:pb.Sub44GroupSyncMsg.authKey)
  return authkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sub44GroupSyncMsg::set_allocated_authkey(std::string* authkey) {
  if (authkey != nullptr) {
    
  } else {
    
  }
  authkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.Sub44GroupSyncMsg.authKey)
}

// int32 msgStatus = 9;
inline void Sub44GroupSyncMsg::clear_msgstatus() {
  msgstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_msgstatus() const {
  return msgstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::msgstatus() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.msgStatus)
  return _internal_msgstatus();
}
inline void Sub44GroupSyncMsg::_internal_set_msgstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgstatus_ = value;
}
inline void Sub44GroupSyncMsg::set_msgstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgstatus(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.msgStatus)
}

// int64 actionUin = 10;
inline void Sub44GroupSyncMsg::clear_actionuin() {
  actionuin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_actionuin() const {
  return actionuin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::actionuin() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.actionUin)
  return _internal_actionuin();
}
inline void Sub44GroupSyncMsg::_internal_set_actionuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actionuin_ = value;
}
inline void Sub44GroupSyncMsg::set_actionuin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actionuin(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.actionUin)
}

// int64 actionTime = 11;
inline void Sub44GroupSyncMsg::clear_actiontime() {
  actiontime_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::_internal_actiontime() const {
  return actiontime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sub44GroupSyncMsg::actiontime() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.actionTime)
  return _internal_actiontime();
}
inline void Sub44GroupSyncMsg::_internal_set_actiontime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actiontime_ = value;
}
inline void Sub44GroupSyncMsg::set_actiontime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actiontime(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.actionTime)
}

// int32 curMaxMemCount = 12;
inline void Sub44GroupSyncMsg::clear_curmaxmemcount() {
  curmaxmemcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_curmaxmemcount() const {
  return curmaxmemcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::curmaxmemcount() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.curMaxMemCount)
  return _internal_curmaxmemcount();
}
inline void Sub44GroupSyncMsg::_internal_set_curmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curmaxmemcount_ = value;
}
inline void Sub44GroupSyncMsg::set_curmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curmaxmemcount(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.curMaxMemCount)
}

// int32 nextMaxMemCount = 13;
inline void Sub44GroupSyncMsg::clear_nextmaxmemcount() {
  nextmaxmemcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_nextmaxmemcount() const {
  return nextmaxmemcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::nextmaxmemcount() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.nextMaxMemCount)
  return _internal_nextmaxmemcount();
}
inline void Sub44GroupSyncMsg::_internal_set_nextmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nextmaxmemcount_ = value;
}
inline void Sub44GroupSyncMsg::set_nextmaxmemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nextmaxmemcount(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.nextMaxMemCount)
}

// int32 curMemCount = 14;
inline void Sub44GroupSyncMsg::clear_curmemcount() {
  curmemcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_curmemcount() const {
  return curmemcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::curmemcount() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.curMemCount)
  return _internal_curmemcount();
}
inline void Sub44GroupSyncMsg::_internal_set_curmemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curmemcount_ = value;
}
inline void Sub44GroupSyncMsg::set_curmemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curmemcount(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.curMemCount)
}

// int32 reqSrcId = 15;
inline void Sub44GroupSyncMsg::clear_reqsrcid() {
  reqsrcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_reqsrcid() const {
  return reqsrcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::reqsrcid() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.reqSrcId)
  return _internal_reqsrcid();
}
inline void Sub44GroupSyncMsg::_internal_set_reqsrcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqsrcid_ = value;
}
inline void Sub44GroupSyncMsg::set_reqsrcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqsrcid(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.reqSrcId)
}

// int32 reqSrcSubId = 16;
inline void Sub44GroupSyncMsg::clear_reqsrcsubid() {
  reqsrcsubid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_reqsrcsubid() const {
  return reqsrcsubid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::reqsrcsubid() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.reqSrcSubId)
  return _internal_reqsrcsubid();
}
inline void Sub44GroupSyncMsg::_internal_set_reqsrcsubid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqsrcsubid_ = value;
}
inline void Sub44GroupSyncMsg::set_reqsrcsubid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqsrcsubid(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.reqSrcSubId)
}

// int32 inviterRole = 17;
inline void Sub44GroupSyncMsg::clear_inviterrole() {
  inviterrole_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_inviterrole() const {
  return inviterrole_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::inviterrole() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.inviterRole)
  return _internal_inviterrole();
}
inline void Sub44GroupSyncMsg::_internal_set_inviterrole(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviterrole_ = value;
}
inline void Sub44GroupSyncMsg::set_inviterrole(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviterrole(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.inviterRole)
}

// int32 extAdminNum = 18;
inline void Sub44GroupSyncMsg::clear_extadminnum() {
  extadminnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_extadminnum() const {
  return extadminnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::extadminnum() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.extAdminNum)
  return _internal_extadminnum();
}
inline void Sub44GroupSyncMsg::_internal_set_extadminnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extadminnum_ = value;
}
inline void Sub44GroupSyncMsg::set_extadminnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extadminnum(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.extAdminNum)
}

// int32 processFlag = 19;
inline void Sub44GroupSyncMsg::clear_processflag() {
  processflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::_internal_processflag() const {
  return processflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sub44GroupSyncMsg::processflag() const {
  // @@protoc_insertion_point(field_get:pb.Sub44GroupSyncMsg.processFlag)
  return _internal_processflag();
}
inline void Sub44GroupSyncMsg::_internal_set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processflag_ = value;
}
inline void Sub44GroupSyncMsg::set_processflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processflag(value);
  // @@protoc_insertion_point(field_set:pb.Sub44GroupSyncMsg.processFlag)
}

// -------------------------------------------------------------------

// GroupMemberReqBody

// int64 groupCode = 1;
inline void GroupMemberReqBody::clear_groupcode() {
  groupcode_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberReqBody::_internal_groupcode() const {
  return groupcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberReqBody::groupcode() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberReqBody.groupCode)
  return _internal_groupcode();
}
inline void GroupMemberReqBody::_internal_set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  groupcode_ = value;
}
inline void GroupMemberReqBody::set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_groupcode(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberReqBody.groupCode)
}

// int64 uin = 2;
inline void GroupMemberReqBody::clear_uin() {
  uin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberReqBody::_internal_uin() const {
  return uin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberReqBody::uin() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberReqBody.uin)
  return _internal_uin();
}
inline void GroupMemberReqBody::_internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uin_ = value;
}
inline void GroupMemberReqBody::set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberReqBody.uin)
}

// bool newClient = 3;
inline void GroupMemberReqBody::clear_newclient() {
  newclient_ = false;
}
inline bool GroupMemberReqBody::_internal_newclient() const {
  return newclient_;
}
inline bool GroupMemberReqBody::newclient() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberReqBody.newClient)
  return _internal_newclient();
}
inline void GroupMemberReqBody::_internal_set_newclient(bool value) {
  
  newclient_ = value;
}
inline void GroupMemberReqBody::set_newclient(bool value) {
  _internal_set_newclient(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberReqBody.newClient)
}

// int32 clientType = 4;
inline void GroupMemberReqBody::clear_clienttype() {
  clienttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberReqBody::_internal_clienttype() const {
  return clienttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberReqBody::clienttype() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberReqBody.clientType)
  return _internal_clienttype();
}
inline void GroupMemberReqBody::_internal_set_clienttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clienttype_ = value;
}
inline void GroupMemberReqBody::set_clienttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberReqBody.clientType)
}

// int32 richCardNameVer = 5;
inline void GroupMemberReqBody::clear_richcardnamever() {
  richcardnamever_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberReqBody::_internal_richcardnamever() const {
  return richcardnamever_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberReqBody::richcardnamever() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberReqBody.richCardNameVer)
  return _internal_richcardnamever();
}
inline void GroupMemberReqBody::_internal_set_richcardnamever(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  richcardnamever_ = value;
}
inline void GroupMemberReqBody::set_richcardnamever(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_richcardnamever(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberReqBody.richCardNameVer)
}

// -------------------------------------------------------------------

// GroupMemberRspBody

// int64 groupCode = 1;
inline void GroupMemberRspBody::clear_groupcode() {
  groupcode_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberRspBody::_internal_groupcode() const {
  return groupcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberRspBody::groupcode() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberRspBody.groupCode)
  return _internal_groupcode();
}
inline void GroupMemberRspBody::_internal_set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  groupcode_ = value;
}
inline void GroupMemberRspBody::set_groupcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_groupcode(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberRspBody.groupCode)
}

// int32 selfRole = 2;
inline void GroupMemberRspBody::clear_selfrole() {
  selfrole_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberRspBody::_internal_selfrole() const {
  return selfrole_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberRspBody::selfrole() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberRspBody.selfRole)
  return _internal_selfrole();
}
inline void GroupMemberRspBody::_internal_set_selfrole(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selfrole_ = value;
}
inline void GroupMemberRspBody::set_selfrole(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selfrole(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberRspBody.selfRole)
}

// .pb.GroupMemberInfo memInfo = 3;
inline bool GroupMemberRspBody::_internal_has_meminfo() const {
  return this != internal_default_instance() && meminfo_ != nullptr;
}
inline bool GroupMemberRspBody::has_meminfo() const {
  return _internal_has_meminfo();
}
inline void GroupMemberRspBody::clear_meminfo() {
  if (GetArenaForAllocation() == nullptr && meminfo_ != nullptr) {
    delete meminfo_;
  }
  meminfo_ = nullptr;
}
inline const ::pb::GroupMemberInfo& GroupMemberRspBody::_internal_meminfo() const {
  const ::pb::GroupMemberInfo* p = meminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::GroupMemberInfo&>(
      ::pb::_GroupMemberInfo_default_instance_);
}
inline const ::pb::GroupMemberInfo& GroupMemberRspBody::meminfo() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberRspBody.memInfo)
  return _internal_meminfo();
}
inline void GroupMemberRspBody::unsafe_arena_set_allocated_meminfo(
    ::pb::GroupMemberInfo* meminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meminfo_);
  }
  meminfo_ = meminfo;
  if (meminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GroupMemberRspBody.memInfo)
}
inline ::pb::GroupMemberInfo* GroupMemberRspBody::release_meminfo() {
  
  ::pb::GroupMemberInfo* temp = meminfo_;
  meminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::GroupMemberInfo* GroupMemberRspBody::unsafe_arena_release_meminfo() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberRspBody.memInfo)
  
  ::pb::GroupMemberInfo* temp = meminfo_;
  meminfo_ = nullptr;
  return temp;
}
inline ::pb::GroupMemberInfo* GroupMemberRspBody::_internal_mutable_meminfo() {
  
  if (meminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::GroupMemberInfo>(GetArenaForAllocation());
    meminfo_ = p;
  }
  return meminfo_;
}
inline ::pb::GroupMemberInfo* GroupMemberRspBody::mutable_meminfo() {
  ::pb::GroupMemberInfo* _msg = _internal_mutable_meminfo();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberRspBody.memInfo)
  return _msg;
}
inline void GroupMemberRspBody::set_allocated_meminfo(::pb::GroupMemberInfo* meminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete meminfo_;
  }
  if (meminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::GroupMemberInfo>::GetOwningArena(meminfo);
    if (message_arena != submessage_arena) {
      meminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meminfo, submessage_arena);
    }
    
  } else {
    
  }
  meminfo_ = meminfo;
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberRspBody.memInfo)
}

// bool boolSelfLocationShared = 4;
inline void GroupMemberRspBody::clear_boolselflocationshared() {
  boolselflocationshared_ = false;
}
inline bool GroupMemberRspBody::_internal_boolselflocationshared() const {
  return boolselflocationshared_;
}
inline bool GroupMemberRspBody::boolselflocationshared() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberRspBody.boolSelfLocationShared)
  return _internal_boolselflocationshared();
}
inline void GroupMemberRspBody::_internal_set_boolselflocationshared(bool value) {
  
  boolselflocationshared_ = value;
}
inline void GroupMemberRspBody::set_boolselflocationshared(bool value) {
  _internal_set_boolselflocationshared(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberRspBody.boolSelfLocationShared)
}

// int32 groupType = 5;
inline void GroupMemberRspBody::clear_grouptype() {
  grouptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberRspBody::_internal_grouptype() const {
  return grouptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberRspBody::grouptype() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberRspBody.groupType)
  return _internal_grouptype();
}
inline void GroupMemberRspBody::_internal_set_grouptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grouptype_ = value;
}
inline void GroupMemberRspBody::set_grouptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grouptype(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberRspBody.groupType)
}

// -------------------------------------------------------------------

// GroupMemberInfo

// int64 uin = 1;
inline void GroupMemberInfo::clear_uin() {
  uin_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::_internal_uin() const {
  return uin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::uin() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.uin)
  return _internal_uin();
}
inline void GroupMemberInfo::_internal_set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uin_ = value;
}
inline void GroupMemberInfo::set_uin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.uin)
}

// int32 result = 2;
inline void GroupMemberInfo::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::result() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.result)
  return _internal_result();
}
inline void GroupMemberInfo::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void GroupMemberInfo::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.result)
}

// bytes errmsg = 3;
inline void GroupMemberInfo::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::errmsg() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.errmsg)
}
inline std::string* GroupMemberInfo::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.errmsg)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GroupMemberInfo::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_errmsg() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.errmsg)
}

// bool IsFriend = 4;
inline void GroupMemberInfo::clear_isfriend() {
  isfriend_ = false;
}
inline bool GroupMemberInfo::_internal_isfriend() const {
  return isfriend_;
}
inline bool GroupMemberInfo::isfriend() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.IsFriend)
  return _internal_isfriend();
}
inline void GroupMemberInfo::_internal_set_isfriend(bool value) {
  
  isfriend_ = value;
}
inline void GroupMemberInfo::set_isfriend(bool value) {
  _internal_set_isfriend(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.IsFriend)
}

// bytes remark = 5;
inline void GroupMemberInfo::clear_remark() {
  remark_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::remark() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.remark)
  return _internal_remark();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_remark(ArgT0&& arg0, ArgT... args) {
 
 remark_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.remark)
}
inline std::string* GroupMemberInfo::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.remark)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_remark() const {
  return remark_.Get();
}
inline void GroupMemberInfo::_internal_set_remark(const std::string& value) {
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_remark() {
  
  return remark_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_remark() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.remark)
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.remark)
}

// bool IsConcerned = 6;
inline void GroupMemberInfo::clear_isconcerned() {
  isconcerned_ = false;
}
inline bool GroupMemberInfo::_internal_isconcerned() const {
  return isconcerned_;
}
inline bool GroupMemberInfo::isconcerned() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.IsConcerned)
  return _internal_isconcerned();
}
inline void GroupMemberInfo::_internal_set_isconcerned(bool value) {
  
  isconcerned_ = value;
}
inline void GroupMemberInfo::set_isconcerned(bool value) {
  _internal_set_isconcerned(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.IsConcerned)
}

// int32 credit = 7;
inline void GroupMemberInfo::clear_credit() {
  credit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_credit() const {
  return credit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::credit() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.credit)
  return _internal_credit();
}
inline void GroupMemberInfo::_internal_set_credit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  credit_ = value;
}
inline void GroupMemberInfo::set_credit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_credit(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.credit)
}

// bytes card = 8;
inline void GroupMemberInfo::clear_card() {
  card_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::card() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.card)
  return _internal_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_card(ArgT0&& arg0, ArgT... args) {
 
 card_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.card)
}
inline std::string* GroupMemberInfo::mutable_card() {
  std::string* _s = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.card)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_card() const {
  return card_.Get();
}
inline void GroupMemberInfo::_internal_set_card(const std::string& value) {
  
  card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_card() {
  
  return card_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_card() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.card)
  return card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.card)
}

// int32 sex = 9;
inline void GroupMemberInfo::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::sex() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.sex)
  return _internal_sex();
}
inline void GroupMemberInfo::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void GroupMemberInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.sex)
}

// bytes location = 10;
inline void GroupMemberInfo::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::location() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.location)
}
inline std::string* GroupMemberInfo::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.location)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_location() const {
  return location_.Get();
}
inline void GroupMemberInfo::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_location() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.location)
}

// bytes nick = 11;
inline void GroupMemberInfo::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::nick() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_nick(ArgT0&& arg0, ArgT... args) {
 
 nick_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.nick)
}
inline std::string* GroupMemberInfo::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.nick)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_nick() const {
  return nick_.Get();
}
inline void GroupMemberInfo::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_nick() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.nick)
}

// int32 age = 12;
inline void GroupMemberInfo::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::age() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.age)
  return _internal_age();
}
inline void GroupMemberInfo::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void GroupMemberInfo::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.age)
}

// bytes lev = 13;
inline void GroupMemberInfo::clear_lev() {
  lev_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::lev() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.lev)
  return _internal_lev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_lev(ArgT0&& arg0, ArgT... args) {
 
 lev_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.lev)
}
inline std::string* GroupMemberInfo::mutable_lev() {
  std::string* _s = _internal_mutable_lev();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.lev)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_lev() const {
  return lev_.Get();
}
inline void GroupMemberInfo::_internal_set_lev(const std::string& value) {
  
  lev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_lev() {
  
  return lev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_lev() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.lev)
  return lev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_lev(std::string* lev) {
  if (lev != nullptr) {
    
  } else {
    
  }
  lev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lev,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.lev)
}

// int64 join = 14;
inline void GroupMemberInfo::clear_join() {
  join_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::_internal_join() const {
  return join_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::join() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.join)
  return _internal_join();
}
inline void GroupMemberInfo::_internal_set_join(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  join_ = value;
}
inline void GroupMemberInfo::set_join(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_join(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.join)
}

// int64 lastSpeak = 15;
inline void GroupMemberInfo::clear_lastspeak() {
  lastspeak_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::_internal_lastspeak() const {
  return lastspeak_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::lastspeak() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.lastSpeak)
  return _internal_lastspeak();
}
inline void GroupMemberInfo::_internal_set_lastspeak(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastspeak_ = value;
}
inline void GroupMemberInfo::set_lastspeak(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastspeak(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.lastSpeak)
}

// bytes gbarTitle = 18;
inline void GroupMemberInfo::clear_gbartitle() {
  gbartitle_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::gbartitle() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.gbarTitle)
  return _internal_gbartitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_gbartitle(ArgT0&& arg0, ArgT... args) {
 
 gbartitle_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.gbarTitle)
}
inline std::string* GroupMemberInfo::mutable_gbartitle() {
  std::string* _s = _internal_mutable_gbartitle();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.gbarTitle)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_gbartitle() const {
  return gbartitle_.Get();
}
inline void GroupMemberInfo::_internal_set_gbartitle(const std::string& value) {
  
  gbartitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_gbartitle() {
  
  return gbartitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_gbartitle() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.gbarTitle)
  return gbartitle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_gbartitle(std::string* gbartitle) {
  if (gbartitle != nullptr) {
    
  } else {
    
  }
  gbartitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gbartitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.gbarTitle)
}

// bytes gbarUrl = 19;
inline void GroupMemberInfo::clear_gbarurl() {
  gbarurl_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::gbarurl() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.gbarUrl)
  return _internal_gbarurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_gbarurl(ArgT0&& arg0, ArgT... args) {
 
 gbarurl_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.gbarUrl)
}
inline std::string* GroupMemberInfo::mutable_gbarurl() {
  std::string* _s = _internal_mutable_gbarurl();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.gbarUrl)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_gbarurl() const {
  return gbarurl_.Get();
}
inline void GroupMemberInfo::_internal_set_gbarurl(const std::string& value) {
  
  gbarurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_gbarurl() {
  
  return gbarurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_gbarurl() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.gbarUrl)
  return gbarurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_gbarurl(std::string* gbarurl) {
  if (gbarurl != nullptr) {
    
  } else {
    
  }
  gbarurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gbarurl,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.gbarUrl)
}

// int32 gbarCnt = 20;
inline void GroupMemberInfo::clear_gbarcnt() {
  gbarcnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_gbarcnt() const {
  return gbarcnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::gbarcnt() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.gbarCnt)
  return _internal_gbarcnt();
}
inline void GroupMemberInfo::_internal_set_gbarcnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gbarcnt_ = value;
}
inline void GroupMemberInfo::set_gbarcnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gbarcnt(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.gbarCnt)
}

// bool isAllowModCard = 21;
inline void GroupMemberInfo::clear_isallowmodcard() {
  isallowmodcard_ = false;
}
inline bool GroupMemberInfo::_internal_isallowmodcard() const {
  return isallowmodcard_;
}
inline bool GroupMemberInfo::isallowmodcard() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.isAllowModCard)
  return _internal_isallowmodcard();
}
inline void GroupMemberInfo::_internal_set_isallowmodcard(bool value) {
  
  isallowmodcard_ = value;
}
inline void GroupMemberInfo::set_isallowmodcard(bool value) {
  _internal_set_isallowmodcard(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.isAllowModCard)
}

// bool isVip = 22;
inline void GroupMemberInfo::clear_isvip() {
  isvip_ = false;
}
inline bool GroupMemberInfo::_internal_isvip() const {
  return isvip_;
}
inline bool GroupMemberInfo::isvip() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.isVip)
  return _internal_isvip();
}
inline void GroupMemberInfo::_internal_set_isvip(bool value) {
  
  isvip_ = value;
}
inline void GroupMemberInfo::set_isvip(bool value) {
  _internal_set_isvip(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.isVip)
}

// bool isYearVip = 23;
inline void GroupMemberInfo::clear_isyearvip() {
  isyearvip_ = false;
}
inline bool GroupMemberInfo::_internal_isyearvip() const {
  return isyearvip_;
}
inline bool GroupMemberInfo::isyearvip() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.isYearVip)
  return _internal_isyearvip();
}
inline void GroupMemberInfo::_internal_set_isyearvip(bool value) {
  
  isyearvip_ = value;
}
inline void GroupMemberInfo::set_isyearvip(bool value) {
  _internal_set_isyearvip(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.isYearVip)
}

// bool isSuperVip = 24;
inline void GroupMemberInfo::clear_issupervip() {
  issupervip_ = false;
}
inline bool GroupMemberInfo::_internal_issupervip() const {
  return issupervip_;
}
inline bool GroupMemberInfo::issupervip() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.isSuperVip)
  return _internal_issupervip();
}
inline void GroupMemberInfo::_internal_set_issupervip(bool value) {
  
  issupervip_ = value;
}
inline void GroupMemberInfo::set_issupervip(bool value) {
  _internal_set_issupervip(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.isSuperVip)
}

// bool isSuperQq = 25;
inline void GroupMemberInfo::clear_issuperqq() {
  issuperqq_ = false;
}
inline bool GroupMemberInfo::_internal_issuperqq() const {
  return issuperqq_;
}
inline bool GroupMemberInfo::issuperqq() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.isSuperQq)
  return _internal_issuperqq();
}
inline void GroupMemberInfo::_internal_set_issuperqq(bool value) {
  
  issuperqq_ = value;
}
inline void GroupMemberInfo::set_issuperqq(bool value) {
  _internal_set_issuperqq(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.isSuperQq)
}

// int32 vipLev = 26;
inline void GroupMemberInfo::clear_viplev() {
  viplev_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_viplev() const {
  return viplev_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::viplev() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.vipLev)
  return _internal_viplev();
}
inline void GroupMemberInfo::_internal_set_viplev(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplev_ = value;
}
inline void GroupMemberInfo::set_viplev(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplev(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.vipLev)
}

// int32 role = 27;
inline void GroupMemberInfo::clear_role() {
  role_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::role() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.role)
  return _internal_role();
}
inline void GroupMemberInfo::_internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_ = value;
}
inline void GroupMemberInfo::set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.role)
}

// bool locationShared = 28;
inline void GroupMemberInfo::clear_locationshared() {
  locationshared_ = false;
}
inline bool GroupMemberInfo::_internal_locationshared() const {
  return locationshared_;
}
inline bool GroupMemberInfo::locationshared() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.locationShared)
  return _internal_locationshared();
}
inline void GroupMemberInfo::_internal_set_locationshared(bool value) {
  
  locationshared_ = value;
}
inline void GroupMemberInfo::set_locationshared(bool value) {
  _internal_set_locationshared(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.locationShared)
}

// int64 int64Distance = 29;
inline void GroupMemberInfo::clear_int64distance() {
  int64distance_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::_internal_int64distance() const {
  return int64distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMemberInfo::int64distance() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.int64Distance)
  return _internal_int64distance();
}
inline void GroupMemberInfo::_internal_set_int64distance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  int64distance_ = value;
}
inline void GroupMemberInfo::set_int64distance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64distance(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.int64Distance)
}

// int32 concernType = 30;
inline void GroupMemberInfo::clear_concerntype() {
  concerntype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_concerntype() const {
  return concerntype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::concerntype() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.concernType)
  return _internal_concerntype();
}
inline void GroupMemberInfo::_internal_set_concerntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  concerntype_ = value;
}
inline void GroupMemberInfo::set_concerntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_concerntype(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.concernType)
}

// bytes specialTitle = 31;
inline void GroupMemberInfo::clear_specialtitle() {
  specialtitle_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::specialtitle() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.specialTitle)
  return _internal_specialtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_specialtitle(ArgT0&& arg0, ArgT... args) {
 
 specialtitle_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.specialTitle)
}
inline std::string* GroupMemberInfo::mutable_specialtitle() {
  std::string* _s = _internal_mutable_specialtitle();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.specialTitle)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_specialtitle() const {
  return specialtitle_.Get();
}
inline void GroupMemberInfo::_internal_set_specialtitle(const std::string& value) {
  
  specialtitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_specialtitle() {
  
  return specialtitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_specialtitle() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.specialTitle)
  return specialtitle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_specialtitle(std::string* specialtitle) {
  if (specialtitle != nullptr) {
    
  } else {
    
  }
  specialtitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specialtitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.specialTitle)
}

// int32 specialTitleExpireTime = 32;
inline void GroupMemberInfo::clear_specialtitleexpiretime() {
  specialtitleexpiretime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_specialtitleexpiretime() const {
  return specialtitleexpiretime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::specialtitleexpiretime() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.specialTitleExpireTime)
  return _internal_specialtitleexpiretime();
}
inline void GroupMemberInfo::_internal_set_specialtitleexpiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  specialtitleexpiretime_ = value;
}
inline void GroupMemberInfo::set_specialtitleexpiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_specialtitleexpiretime(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.specialTitleExpireTime)
}

// bytes phoneNum = 35;
inline void GroupMemberInfo::clear_phonenum() {
  phonenum_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::phonenum() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.phoneNum)
  return _internal_phonenum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_phonenum(ArgT0&& arg0, ArgT... args) {
 
 phonenum_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.phoneNum)
}
inline std::string* GroupMemberInfo::mutable_phonenum() {
  std::string* _s = _internal_mutable_phonenum();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.phoneNum)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_phonenum() const {
  return phonenum_.Get();
}
inline void GroupMemberInfo::_internal_set_phonenum(const std::string& value) {
  
  phonenum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_phonenum() {
  
  return phonenum_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_phonenum() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.phoneNum)
  return phonenum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_phonenum(std::string* phonenum) {
  if (phonenum != nullptr) {
    
  } else {
    
  }
  phonenum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phonenum,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.phoneNum)
}

// bytes job = 36;
inline void GroupMemberInfo::clear_job() {
  job_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::job() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.job)
  return _internal_job();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_job(ArgT0&& arg0, ArgT... args) {
 
 job_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.job)
}
inline std::string* GroupMemberInfo::mutable_job() {
  std::string* _s = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.job)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_job() const {
  return job_.Get();
}
inline void GroupMemberInfo::_internal_set_job(const std::string& value) {
  
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_job() {
  
  return job_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_job() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.job)
  return job_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    
  } else {
    
  }
  job_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.job)
}

// int32 medalId = 37;
inline void GroupMemberInfo::clear_medalid() {
  medalid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_medalid() const {
  return medalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::medalid() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.medalId)
  return _internal_medalid();
}
inline void GroupMemberInfo::_internal_set_medalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  medalid_ = value;
}
inline void GroupMemberInfo::set_medalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_medalid(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.medalId)
}

// int32 level = 39;
inline void GroupMemberInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMemberInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.level)
  return _internal_level();
}
inline void GroupMemberInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void GroupMemberInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.level)
}

// string honor = 41;
inline void GroupMemberInfo::clear_honor() {
  honor_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::honor() const {
  // @@protoc_insertion_point(field_get:pb.GroupMemberInfo.honor)
  return _internal_honor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_honor(ArgT0&& arg0, ArgT... args) {
 
 honor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GroupMemberInfo.honor)
}
inline std::string* GroupMemberInfo::mutable_honor() {
  std::string* _s = _internal_mutable_honor();
  // @@protoc_insertion_point(field_mutable:pb.GroupMemberInfo.honor)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_honor() const {
  return honor_.Get();
}
inline void GroupMemberInfo::_internal_set_honor(const std::string& value) {
  
  honor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_honor() {
  
  return honor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_honor() {
  // @@protoc_insertion_point(field_release:pb.GroupMemberInfo.honor)
  return honor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupMemberInfo::set_allocated_honor(std::string* honor) {
  if (honor != nullptr) {
    
  } else {
    
  }
  honor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), honor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.GroupMemberInfo.honor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
