// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr DeviceInfo::DeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bootloader_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , procversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , incremental_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fingerprint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bootid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , androidid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , baseband_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , innerversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceInfoDefaultTypeInternal {
  constexpr DeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
constexpr RequestBody::RequestBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rpt_config_list_(){}
struct RequestBodyDefaultTypeInternal {
  constexpr RequestBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestBodyDefaultTypeInternal() {}
  union {
    RequestBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
constexpr ConfigSeq::ConfigSeq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , version_(0){}
struct ConfigSeqDefaultTypeInternal {
  constexpr ConfigSeqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSeqDefaultTypeInternal() {}
  union {
    ConfigSeq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSeqDefaultTypeInternal _ConfigSeq_default_instance_;
constexpr D50ReqBody::D50ReqBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uinlist_()
  , _uinlist_cached_byte_size_(0)
  , appid_(int64_t{0})
  , maxpkgsize_(0)
  , starttime_(0)
  , startindex_(0)
  , reqnum_(0)
  , reqmutualmarklbsshare_(0)
  , reqmusicswitch_(0)
  , reqmutualmarkalienation_(0)
  , reqmutualmarkscore_(0)
  , reqksingswitch_(0){}
struct D50ReqBodyDefaultTypeInternal {
  constexpr D50ReqBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~D50ReqBodyDefaultTypeInternal() {}
  union {
    D50ReqBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT D50ReqBodyDefaultTypeInternal _D50ReqBody_default_instance_;
constexpr ReqDataHighwayHead::ReqDataHighwayHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reqextendinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgbasehead_(nullptr)
  , msgseghead_(nullptr)
  , timestamp_(int64_t{0}){}
struct ReqDataHighwayHeadDefaultTypeInternal {
  constexpr ReqDataHighwayHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDataHighwayHeadDefaultTypeInternal() {}
  union {
    ReqDataHighwayHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDataHighwayHeadDefaultTypeInternal _ReqDataHighwayHead_default_instance_;
constexpr RspDataHighwayHead::RspDataHighwayHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rspextendinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgbasehead_(nullptr)
  , msgseghead_(nullptr)
  , errorcode_(0)
  , allowretry_(0)
  , cachecost_(0)
  , htcost_(0)
  , timestamp_(int64_t{0})
  , range_(int64_t{0})
  , isreset_(0){}
struct RspDataHighwayHeadDefaultTypeInternal {
  constexpr RspDataHighwayHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RspDataHighwayHeadDefaultTypeInternal() {}
  union {
    RspDataHighwayHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RspDataHighwayHeadDefaultTypeInternal _RspDataHighwayHead_default_instance_;
constexpr DataHighwayHead::DataHighwayHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buildver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0)
  , seq_(0)
  , retrytimes_(0)
  , appid_(0)
  , dataflag_(0)
  , commandid_(0)
  , localeid_(0){}
struct DataHighwayHeadDefaultTypeInternal {
  constexpr DataHighwayHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataHighwayHeadDefaultTypeInternal() {}
  union {
    DataHighwayHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataHighwayHeadDefaultTypeInternal _DataHighwayHead_default_instance_;
constexpr SegHead::SegHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serviceticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , md5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filemd5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filesize_(int64_t{0})
  , serviceid_(0)
  , datalength_(0)
  , dataoffset_(int64_t{0})
  , rtcode_(0)
  , flag_(0)
  , cacheaddr_(0)
  , querytimes_(0)
  , updatecacheip_(0){}
struct SegHeadDefaultTypeInternal {
  constexpr SegHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SegHeadDefaultTypeInternal() {}
  union {
    SegHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SegHeadDefaultTypeInternal _SegHead_default_instance_;
constexpr DeleteMessageRequest::DeleteMessageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct DeleteMessageRequestDefaultTypeInternal {
  constexpr DeleteMessageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteMessageRequestDefaultTypeInternal() {}
  union {
    DeleteMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
constexpr MessageItem::MessageItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fromuin_(int64_t{0})
  , touin_(int64_t{0})
  , msgtype_(0)
  , msgseq_(0)
  , msguid_(int64_t{0}){}
struct MessageItemDefaultTypeInternal {
  constexpr MessageItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageItemDefaultTypeInternal() {}
  union {
    MessageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageItemDefaultTypeInternal _MessageItem_default_instance_;
constexpr SubD4::SubD4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uin_(int64_t{0}){}
struct SubD4DefaultTypeInternal {
  constexpr SubD4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubD4DefaultTypeInternal() {}
  union {
    SubD4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubD4DefaultTypeInternal _SubD4_default_instance_;
constexpr Sub8A::Sub8A(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_info_()
  , reserved_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0)
  , instid_(0)
  , longmessageflag_(0){}
struct Sub8ADefaultTypeInternal {
  constexpr Sub8ADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Sub8ADefaultTypeInternal() {}
  union {
    Sub8A _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Sub8ADefaultTypeInternal _Sub8A_default_instance_;
constexpr Sub8AMsgInfo::Sub8AMsgInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fromuin_(int64_t{0})
  , touin_(int64_t{0})
  , msguid_(int64_t{0})
  , msgseq_(0)
  , msgrandom_(0)
  , msgtime_(int64_t{0})
  , pkgnum_(0)
  , pkgindex_(0)
  , devseq_(0){}
struct Sub8AMsgInfoDefaultTypeInternal {
  constexpr Sub8AMsgInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Sub8AMsgInfoDefaultTypeInternal() {}
  union {
    Sub8AMsgInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Sub8AMsgInfoDefaultTypeInternal _Sub8AMsgInfo_default_instance_;
constexpr SubB3::SubB3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgaddfrdnotify_(nullptr)
  , type_(0){}
struct SubB3DefaultTypeInternal {
  constexpr SubB3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubB3DefaultTypeInternal() {}
  union {
    SubB3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubB3DefaultTypeInternal _SubB3_default_instance_;
constexpr SubB3AddFrdNotify::SubB3AddFrdNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uin_(int64_t{0}){}
struct SubB3AddFrdNotifyDefaultTypeInternal {
  constexpr SubB3AddFrdNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubB3AddFrdNotifyDefaultTypeInternal() {}
  union {
    SubB3AddFrdNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubB3AddFrdNotifyDefaultTypeInternal _SubB3AddFrdNotify_default_instance_;
constexpr Sub44::Sub44(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friendsyncmsg_(nullptr)
  , groupsyncmsg_(nullptr){}
struct Sub44DefaultTypeInternal {
  constexpr Sub44DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Sub44DefaultTypeInternal() {}
  union {
    Sub44 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Sub44DefaultTypeInternal _Sub44_default_instance_;
constexpr Sub44FriendSyncMsg::Sub44FriendSyncMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strwording_()
  , uin_(int64_t{0})
  , fuin_(int64_t{0})
  , processtype_(0)
  , time_(0)
  , processflag_(0)
  , sourceid_(0)
  , sourcesubid_(0){}
struct Sub44FriendSyncMsgDefaultTypeInternal {
  constexpr Sub44FriendSyncMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Sub44FriendSyncMsgDefaultTypeInternal() {}
  union {
    Sub44FriendSyncMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Sub44FriendSyncMsgDefaultTypeInternal _Sub44FriendSyncMsg_default_instance_;
constexpr Sub44GroupSyncMsg::Sub44GroupSyncMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgbuf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , authkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgseq_(int64_t{0})
  , grpcode_(int64_t{0})
  , gacode_(int64_t{0})
  , optuin1_(int64_t{0})
  , msgtype_(0)
  , msgstatus_(0)
  , optuin2_(int64_t{0})
  , actionuin_(int64_t{0})
  , actiontime_(int64_t{0})
  , curmaxmemcount_(0)
  , nextmaxmemcount_(0)
  , curmemcount_(0)
  , reqsrcid_(0)
  , reqsrcsubid_(0)
  , inviterrole_(0)
  , extadminnum_(0)
  , processflag_(0){}
struct Sub44GroupSyncMsgDefaultTypeInternal {
  constexpr Sub44GroupSyncMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Sub44GroupSyncMsgDefaultTypeInternal() {}
  union {
    Sub44GroupSyncMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Sub44GroupSyncMsgDefaultTypeInternal _Sub44GroupSyncMsg_default_instance_;
constexpr GroupMemberReqBody::GroupMemberReqBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupcode_(int64_t{0})
  , uin_(int64_t{0})
  , newclient_(false)
  , clienttype_(0)
  , richcardnamever_(0){}
struct GroupMemberReqBodyDefaultTypeInternal {
  constexpr GroupMemberReqBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupMemberReqBodyDefaultTypeInternal() {}
  union {
    GroupMemberReqBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupMemberReqBodyDefaultTypeInternal _GroupMemberReqBody_default_instance_;
constexpr GroupMemberRspBody::GroupMemberRspBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meminfo_(nullptr)
  , groupcode_(int64_t{0})
  , selfrole_(0)
  , boolselflocationshared_(false)
  , grouptype_(0){}
struct GroupMemberRspBodyDefaultTypeInternal {
  constexpr GroupMemberRspBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupMemberRspBodyDefaultTypeInternal() {}
  union {
    GroupMemberRspBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupMemberRspBodyDefaultTypeInternal _GroupMemberRspBody_default_instance_;
constexpr GroupMemberInfo::GroupMemberInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remark_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lev_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gbartitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gbarurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , specialtitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phonenum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , honor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uin_(int64_t{0})
  , result_(0)
  , credit_(0)
  , sex_(0)
  , age_(0)
  , join_(int64_t{0})
  , isfriend_(false)
  , isconcerned_(false)
  , isallowmodcard_(false)
  , isvip_(false)
  , gbarcnt_(0)
  , lastspeak_(int64_t{0})
  , isyearvip_(false)
  , issupervip_(false)
  , issuperqq_(false)
  , locationshared_(false)
  , viplev_(0)
  , role_(0)
  , concerntype_(0)
  , int64distance_(int64_t{0})
  , specialtitleexpiretime_(0)
  , medalid_(0)
  , level_(0){}
struct GroupMemberInfoDefaultTypeInternal {
  constexpr GroupMemberInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupMemberInfoDefaultTypeInternal() {}
  union {
    GroupMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupMemberInfoDefaultTypeInternal _GroupMemberInfo_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, bootloader_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, procversion_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, codename_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, incremental_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, bootid_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, androidid_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, baseband_),
  PROTOBUF_FIELD_OFFSET(::pb::DeviceInfo, innerversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::RequestBody, rpt_config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ConfigSeq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ConfigSeq, type_),
  PROTOBUF_FIELD_OFFSET(::pb::ConfigSeq, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, appid_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, maxpkgsize_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, starttime_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, startindex_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, reqnum_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, uinlist_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, reqmusicswitch_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, reqmutualmarkalienation_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, reqmutualmarkscore_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, reqksingswitch_),
  PROTOBUF_FIELD_OFFSET(::pb::D50ReqBody, reqmutualmarklbsshare_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqDataHighwayHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ReqDataHighwayHead, msgbasehead_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqDataHighwayHead, msgseghead_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqDataHighwayHead, reqextendinfo_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqDataHighwayHead, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, msgbasehead_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, msgseghead_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, errorcode_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, allowretry_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, cachecost_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, htcost_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, rspextendinfo_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, range_),
  PROTOBUF_FIELD_OFFSET(::pb::RspDataHighwayHead, isreset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, version_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, uin_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, command_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, seq_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, retrytimes_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, appid_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, dataflag_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, commandid_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, buildver_),
  PROTOBUF_FIELD_OFFSET(::pb::DataHighwayHead, localeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, serviceid_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, filesize_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, dataoffset_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, datalength_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, rtcode_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, serviceticket_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, flag_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, md5_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, filemd5_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, cacheaddr_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, querytimes_),
  PROTOBUF_FIELD_OFFSET(::pb::SegHead, updatecacheip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DeleteMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::DeleteMessageRequest, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, fromuin_),
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, touin_),
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, msgtype_),
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, msgseq_),
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, msguid_),
  PROTOBUF_FIELD_OFFSET(::pb::MessageItem, sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubD4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::SubD4, uin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Sub8A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Sub8A, msg_info_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8A, appid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8A, instid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8A, longmessageflag_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8A, reserved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, fromuin_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, touin_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, msgseq_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, msguid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, msgtime_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, msgrandom_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, pkgnum_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, pkgindex_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub8AMsgInfo, devseq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubB3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::SubB3, type_),
  PROTOBUF_FIELD_OFFSET(::pb::SubB3, msgaddfrdnotify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubB3AddFrdNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::SubB3AddFrdNotify, uin_),
  PROTOBUF_FIELD_OFFSET(::pb::SubB3AddFrdNotify, nick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Sub44, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Sub44, friendsyncmsg_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44, groupsyncmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, uin_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, fuin_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, processtype_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, time_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, processflag_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, sourceid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, sourcesubid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44FriendSyncMsg, strwording_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, msgtype_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, msgseq_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, grpcode_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, gacode_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, optuin1_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, optuin2_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, msgbuf_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, authkey_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, msgstatus_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, actionuin_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, actiontime_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, curmaxmemcount_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, nextmaxmemcount_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, curmemcount_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, reqsrcid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, reqsrcsubid_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, inviterrole_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, extadminnum_),
  PROTOBUF_FIELD_OFFSET(::pb::Sub44GroupSyncMsg, processflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberReqBody, groupcode_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberReqBody, uin_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberReqBody, newclient_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberReqBody, clienttype_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberReqBody, richcardnamever_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberRspBody, groupcode_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberRspBody, selfrole_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberRspBody, meminfo_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberRspBody, boolselflocationshared_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberRspBody, grouptype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, uin_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, result_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, errmsg_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, isfriend_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, remark_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, isconcerned_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, credit_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, card_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, location_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, age_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, lev_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, join_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, lastspeak_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, gbartitle_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, gbarurl_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, gbarcnt_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, isallowmodcard_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, isvip_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, isyearvip_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, issupervip_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, issuperqq_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, viplev_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, role_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, locationshared_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, int64distance_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, concerntype_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, specialtitle_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, specialtitleexpiretime_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, phonenum_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, job_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, medalid_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, level_),
  PROTOBUF_FIELD_OFFSET(::pb::GroupMemberInfo, honor_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::DeviceInfo)},
  { 15, -1, -1, sizeof(::pb::RequestBody)},
  { 22, -1, -1, sizeof(::pb::ConfigSeq)},
  { 30, -1, -1, sizeof(::pb::D50ReqBody)},
  { 47, -1, -1, sizeof(::pb::ReqDataHighwayHead)},
  { 57, -1, -1, sizeof(::pb::RspDataHighwayHead)},
  { 73, -1, -1, sizeof(::pb::DataHighwayHead)},
  { 89, -1, -1, sizeof(::pb::SegHead)},
  { 107, -1, -1, sizeof(::pb::DeleteMessageRequest)},
  { 114, -1, -1, sizeof(::pb::MessageItem)},
  { 126, -1, -1, sizeof(::pb::SubD4)},
  { 133, -1, -1, sizeof(::pb::Sub8A)},
  { 144, -1, -1, sizeof(::pb::Sub8AMsgInfo)},
  { 159, -1, -1, sizeof(::pb::SubB3)},
  { 167, -1, -1, sizeof(::pb::SubB3AddFrdNotify)},
  { 175, -1, -1, sizeof(::pb::Sub44)},
  { 183, -1, -1, sizeof(::pb::Sub44FriendSyncMsg)},
  { 197, -1, -1, sizeof(::pb::Sub44GroupSyncMsg)},
  { 222, -1, -1, sizeof(::pb::GroupMemberReqBody)},
  { 233, -1, -1, sizeof(::pb::GroupMemberRspBody)},
  { 244, -1, -1, sizeof(::pb::GroupMemberInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConfigSeq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_D50ReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqDataHighwayHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspDataHighwayHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DataHighwayHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SegHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DeleteMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MessageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubD4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Sub8A_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Sub8AMsgInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubB3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubB3AddFrdNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Sub44_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Sub44FriendSyncMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Sub44GroupSyncMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GroupMemberReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GroupMemberRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GroupMemberInfo_default_instance_),
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\022\002pb\"\274\001\n\nDeviceInfo\022\022\n\nbootl"
  "oader\030\001 \001(\t\022\023\n\013procVersion\030\002 \001(\t\022\020\n\010code"
  "name\030\003 \001(\t\022\023\n\013incremental\030\004 \001(\t\022\023\n\013finge"
  "rprint\030\005 \001(\t\022\016\n\006bootId\030\006 \001(\t\022\021\n\tandroidI"
  "d\030\007 \001(\t\022\020\n\010baseBand\030\010 \001(\t\022\024\n\014innerVersio"
  "n\030\t \001(\t\"5\n\013RequestBody\022&\n\017rpt_config_lis"
  "t\030\001 \003(\0132\r.pb.ConfigSeq\"*\n\tConfigSeq\022\014\n\004t"
  "ype\030\001 \001(\005\022\017\n\007version\030\002 \001(\005\"\215\002\n\nD50ReqBod"
  "y\022\r\n\005appid\030\001 \001(\003\022\022\n\nmaxPkgSize\030\002 \001(\005\022\021\n\t"
  "startTime\030\003 \001(\005\022\022\n\nstartIndex\030\004 \001(\005\022\016\n\006r"
  "eqNum\030\005 \001(\005\022\017\n\007uinList\030\006 \003(\003\022\030\n\016reqMusic"
  "Switch\030\371\306\005 \001(\005\022!\n\027reqMutualmarkAlienatio"
  "n\030\211\225\006 \001(\005\022\034\n\022reqMutualmarkScore\030\311\315\010 \001(\005\022"
  "\030\n\016reqKsingSwitch\030\331\233\t \001(\005\022\037\n\025reqMutualma"
  "rkLbsshare\030\211\206\013 \001(\005\"\211\001\n\022ReqDataHighwayHea"
  "d\022(\n\013msgBasehead\030\001 \001(\0132\023.pb.DataHighwayH"
  "ead\022\037\n\nmsgSeghead\030\002 \001(\0132\013.pb.SegHead\022\025\n\r"
  "reqExtendinfo\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\003\"\363"
  "\001\n\022RspDataHighwayHead\022(\n\013msgBasehead\030\001 \001"
  "(\0132\023.pb.DataHighwayHead\022\037\n\nmsgSeghead\030\002 "
  "\001(\0132\013.pb.SegHead\022\021\n\terrorCode\030\003 \001(\005\022\022\n\na"
  "llowRetry\030\004 \001(\005\022\021\n\tcachecost\030\005 \001(\005\022\016\n\006ht"
  "cost\030\006 \001(\005\022\025\n\rrspExtendinfo\030\007 \001(\014\022\021\n\ttim"
  "estamp\030\010 \001(\003\022\r\n\005range\030\t \001(\003\022\017\n\007isReset\030\n"
  " \001(\005\"\271\001\n\017DataHighwayHead\022\017\n\007version\030\001 \001("
  "\005\022\013\n\003uin\030\002 \001(\t\022\017\n\007command\030\003 \001(\t\022\013\n\003seq\030\004"
  " \001(\005\022\022\n\nretryTimes\030\005 \001(\005\022\r\n\005appid\030\006 \001(\005\022"
  "\020\n\010dataflag\030\007 \001(\005\022\021\n\tcommandId\030\010 \001(\005\022\020\n\010"
  "buildVer\030\t \001(\t\022\020\n\010localeId\030\n \001(\005\"\347\001\n\007Seg"
  "Head\022\021\n\tserviceid\030\001 \001(\005\022\020\n\010filesize\030\002 \001("
  "\003\022\022\n\ndataoffset\030\003 \001(\003\022\022\n\ndatalength\030\004 \001("
  "\005\022\016\n\006rtcode\030\005 \001(\005\022\025\n\rserviceticket\030\006 \001(\014"
  "\022\014\n\004flag\030\007 \001(\005\022\013\n\003md5\030\010 \001(\014\022\017\n\007fileMd5\030\t"
  " \001(\014\022\021\n\tcacheAddr\030\n \001(\005\022\022\n\nqueryTimes\030\013 "
  "\001(\005\022\025\n\rupdateCacheip\030\014 \001(\005\"6\n\024DeleteMess"
  "ageRequest\022\036\n\005items\030\001 \003(\0132\017.pb.MessageIt"
  "em\"k\n\013MessageItem\022\017\n\007fromUin\030\001 \001(\003\022\r\n\005to"
  "Uin\030\002 \001(\003\022\017\n\007msgType\030\003 \001(\005\022\016\n\006msgSeq\030\004 \001"
  "(\005\022\016\n\006msgUid\030\005 \001(\003\022\013\n\003sig\030\007 \001(\014\"\024\n\005SubD4"
  "\022\013\n\003uin\030\001 \001(\003\"u\n\005Sub8A\022\"\n\010msg_info\030\001 \003(\013"
  "2\020.pb.Sub8AMsgInfo\022\r\n\005appId\030\002 \001(\005\022\016\n\006ins"
  "tId\030\003 \001(\005\022\027\n\017longMessageFlag\030\004 \001(\005\022\020\n\010re"
  "served\030\005 \001(\014\"\244\001\n\014Sub8AMsgInfo\022\017\n\007fromUin"
  "\030\001 \001(\003\022\r\n\005toUin\030\002 \001(\003\022\016\n\006msgSeq\030\003 \001(\005\022\016\n"
  "\006msgUid\030\004 \001(\003\022\017\n\007msgTime\030\005 \001(\003\022\021\n\tmsgRan"
  "dom\030\006 \001(\005\022\016\n\006pkgNum\030\007 \001(\005\022\020\n\010pkgIndex\030\010 "
  "\001(\005\022\016\n\006devSeq\030\t \001(\005\"E\n\005SubB3\022\014\n\004type\030\001 \001"
  "(\005\022.\n\017msgAddFrdNotify\030\002 \001(\0132\025.pb.SubB3Ad"
  "dFrdNotify\".\n\021SubB3AddFrdNotify\022\013\n\003uin\030\001"
  " \001(\003\022\014\n\004nick\030\005 \001(\t\"c\n\005Sub44\022-\n\rfriendSyn"
  "cMsg\030\001 \001(\0132\026.pb.Sub44FriendSyncMsg\022+\n\014gr"
  "oupSyncMsg\030\002 \001(\0132\025.pb.Sub44GroupSyncMsg\""
  "\242\001\n\022Sub44FriendSyncMsg\022\013\n\003uin\030\001 \001(\003\022\014\n\004f"
  "Uin\030\002 \001(\003\022\023\n\013processType\030\003 \001(\005\022\014\n\004time\030\004"
  " \001(\005\022\023\n\013processFlag\030\005 \001(\005\022\020\n\010sourceId\030\006 "
  "\001(\005\022\023\n\013sourceSubId\030\007 \001(\005\022\022\n\nstrWording\030\010"
  " \003(\t\"\376\002\n\021Sub44GroupSyncMsg\022\017\n\007msgType\030\001 "
  "\001(\005\022\016\n\006msgSeq\030\002 \001(\003\022\017\n\007grpCode\030\003 \001(\003\022\016\n\006"
  "gaCode\030\004 \001(\003\022\017\n\007optUin1\030\005 \001(\003\022\017\n\007optUin2"
  "\030\006 \001(\003\022\016\n\006msgBuf\030\007 \001(\014\022\017\n\007authKey\030\010 \001(\014\022"
  "\021\n\tmsgStatus\030\t \001(\005\022\021\n\tactionUin\030\n \001(\003\022\022\n"
  "\nactionTime\030\013 \001(\003\022\026\n\016curMaxMemCount\030\014 \001("
  "\005\022\027\n\017nextMaxMemCount\030\r \001(\005\022\023\n\013curMemCoun"
  "t\030\016 \001(\005\022\020\n\010reqSrcId\030\017 \001(\005\022\023\n\013reqSrcSubId"
  "\030\020 \001(\005\022\023\n\013inviterRole\030\021 \001(\005\022\023\n\013extAdminN"
  "um\030\022 \001(\005\022\023\n\013processFlag\030\023 \001(\005\"t\n\022GroupMe"
  "mberReqBody\022\021\n\tgroupCode\030\001 \001(\003\022\013\n\003uin\030\002 "
  "\001(\003\022\021\n\tnewClient\030\003 \001(\010\022\022\n\nclientType\030\004 \001"
  "(\005\022\027\n\017richCardNameVer\030\005 \001(\005\"\222\001\n\022GroupMem"
  "berRspBody\022\021\n\tgroupCode\030\001 \001(\003\022\020\n\010selfRol"
  "e\030\002 \001(\005\022$\n\007memInfo\030\003 \001(\0132\023.pb.GroupMembe"
  "rInfo\022\036\n\026boolSelfLocationShared\030\004 \001(\010\022\021\n"
  "\tgroupType\030\005 \001(\005\"\367\004\n\017GroupMemberInfo\022\013\n\003"
  "uin\030\001 \001(\003\022\016\n\006result\030\002 \001(\005\022\016\n\006errmsg\030\003 \001("
  "\014\022\020\n\010IsFriend\030\004 \001(\010\022\016\n\006remark\030\005 \001(\014\022\023\n\013I"
  "sConcerned\030\006 \001(\010\022\016\n\006credit\030\007 \001(\005\022\014\n\004card"
  "\030\010 \001(\014\022\013\n\003sex\030\t \001(\005\022\020\n\010location\030\n \001(\014\022\014\n"
  "\004nick\030\013 \001(\014\022\013\n\003age\030\014 \001(\005\022\013\n\003lev\030\r \001(\014\022\014\n"
  "\004join\030\016 \001(\003\022\021\n\tlastSpeak\030\017 \001(\003\022\021\n\tgbarTi"
  "tle\030\022 \001(\014\022\017\n\007gbarUrl\030\023 \001(\014\022\017\n\007gbarCnt\030\024 "
  "\001(\005\022\026\n\016isAllowModCard\030\025 \001(\010\022\r\n\005isVip\030\026 \001"
  "(\010\022\021\n\tisYearVip\030\027 \001(\010\022\022\n\nisSuperVip\030\030 \001("
  "\010\022\021\n\tisSuperQq\030\031 \001(\010\022\016\n\006vipLev\030\032 \001(\005\022\014\n\004"
  "role\030\033 \001(\005\022\026\n\016locationShared\030\034 \001(\010\022\025\n\rin"
  "t64Distance\030\035 \001(\003\022\023\n\013concernType\030\036 \001(\005\022\024"
  "\n\014specialTitle\030\037 \001(\014\022\036\n\026specialTitleExpi"
  "reTime\030  \001(\005\022\020\n\010phoneNum\030# \001(\014\022\013\n\003job\030$ "
  "\001(\014\022\017\n\007medalId\030% \001(\005\022\r\n\005level\030\' \001(\005\022\r\n\005h"
  "onor\030) \001(\tB\007Z\005./;pbb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto = {
  false, false, 3547, descriptor_table_protodef_data_2eproto, "data.proto", 
  &descriptor_table_data_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_data_2eproto::offsets,
  file_level_metadata_data_2eproto, file_level_enum_descriptors_data_2eproto, file_level_service_descriptors_data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_data_2eproto_getter() {
  return &descriptor_table_data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_data_2eproto(&descriptor_table_data_2eproto);
namespace pb {

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bootloader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bootloader().empty()) {
    bootloader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bootloader(), 
      GetArenaForAllocation());
  }
  procversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_procversion().empty()) {
    procversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_procversion(), 
      GetArenaForAllocation());
  }
  codename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codename().empty()) {
    codename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codename(), 
      GetArenaForAllocation());
  }
  incremental_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_incremental().empty()) {
    incremental_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_incremental(), 
      GetArenaForAllocation());
  }
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fingerprint(), 
      GetArenaForAllocation());
  }
  bootid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bootid().empty()) {
    bootid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bootid(), 
      GetArenaForAllocation());
  }
  androidid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_androidid().empty()) {
    androidid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_androidid(), 
      GetArenaForAllocation());
  }
  baseband_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_baseband().empty()) {
    baseband_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_baseband(), 
      GetArenaForAllocation());
  }
  innerversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_innerversion().empty()) {
    innerversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_innerversion(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
bootloader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
procversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
codename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
incremental_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bootid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
androidid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
baseband_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
innerversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:pb.DeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bootloader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  procversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  incremental_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bootid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  baseband_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  innerversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bootloader_.ClearToEmpty();
  procversion_.ClearToEmpty();
  codename_.ClearToEmpty();
  incremental_.ClearToEmpty();
  fingerprint_.ClearToEmpty();
  bootid_.ClearToEmpty();
  androidid_.ClearToEmpty();
  baseband_.ClearToEmpty();
  innerversion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bootloader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bootloader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.bootloader"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string procVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_procversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.procVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string codename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_codename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.codename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string incremental = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_incremental();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.incremental"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.fingerprint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bootId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bootid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.bootId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string androidId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_androidid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.androidId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string baseBand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_baseband();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.baseBand"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string innerVersion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_innerversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DeviceInfo.innerVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bootloader = 1;
  if (!this->_internal_bootloader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bootloader().data(), static_cast<int>(this->_internal_bootloader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.bootloader");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bootloader(), target);
  }

  // string procVersion = 2;
  if (!this->_internal_procversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procversion().data(), static_cast<int>(this->_internal_procversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.procVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_procversion(), target);
  }

  // string codename = 3;
  if (!this->_internal_codename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codename().data(), static_cast<int>(this->_internal_codename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.codename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_codename(), target);
  }

  // string incremental = 4;
  if (!this->_internal_incremental().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_incremental().data(), static_cast<int>(this->_internal_incremental().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.incremental");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_incremental(), target);
  }

  // string fingerprint = 5;
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.fingerprint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fingerprint(), target);
  }

  // string bootId = 6;
  if (!this->_internal_bootid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bootid().data(), static_cast<int>(this->_internal_bootid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.bootId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bootid(), target);
  }

  // string androidId = 7;
  if (!this->_internal_androidid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_androidid().data(), static_cast<int>(this->_internal_androidid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.androidId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_androidid(), target);
  }

  // string baseBand = 8;
  if (!this->_internal_baseband().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_baseband().data(), static_cast<int>(this->_internal_baseband().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.baseBand");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_baseband(), target);
  }

  // string innerVersion = 9;
  if (!this->_internal_innerversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_innerversion().data(), static_cast<int>(this->_internal_innerversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeviceInfo.innerVersion");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_innerversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bootloader = 1;
  if (!this->_internal_bootloader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bootloader());
  }

  // string procVersion = 2;
  if (!this->_internal_procversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procversion());
  }

  // string codename = 3;
  if (!this->_internal_codename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codename());
  }

  // string incremental = 4;
  if (!this->_internal_incremental().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_incremental());
  }

  // string fingerprint = 5;
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string bootId = 6;
  if (!this->_internal_bootid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bootid());
  }

  // string androidId = 7;
  if (!this->_internal_androidid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_androidid());
  }

  // string baseBand = 8;
  if (!this->_internal_baseband().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baseband());
  }

  // string innerVersion = 9;
  if (!this->_internal_innerversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_innerversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }

void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceInfo *>(to)->MergeFrom(
      static_cast<const DeviceInfo &>(from));
}


void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bootloader().empty()) {
    _internal_set_bootloader(from._internal_bootloader());
  }
  if (!from._internal_procversion().empty()) {
    _internal_set_procversion(from._internal_procversion());
  }
  if (!from._internal_codename().empty()) {
    _internal_set_codename(from._internal_codename());
  }
  if (!from._internal_incremental().empty()) {
    _internal_set_incremental(from._internal_incremental());
  }
  if (!from._internal_fingerprint().empty()) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_bootid().empty()) {
    _internal_set_bootid(from._internal_bootid());
  }
  if (!from._internal_androidid().empty()) {
    _internal_set_androidid(from._internal_androidid());
  }
  if (!from._internal_baseband().empty()) {
    _internal_set_baseband(from._internal_baseband());
  }
  if (!from._internal_innerversion().empty()) {
    _internal_set_innerversion(from._internal_innerversion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bootloader_, lhs_arena,
      &other->bootloader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &procversion_, lhs_arena,
      &other->procversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codename_, lhs_arena,
      &other->codename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &incremental_, lhs_arena,
      &other->incremental_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fingerprint_, lhs_arena,
      &other->fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bootid_, lhs_arena,
      &other->bootid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &androidid_, lhs_arena,
      &other->androidid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &baseband_, lhs_arena,
      &other->baseband_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &innerversion_, lhs_arena,
      &other->innerversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[0]);
}

// ===================================================================

class RequestBody::_Internal {
 public:
};

RequestBody::RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rpt_config_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rpt_config_list_(from.rpt_config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RequestBody)
}

void RequestBody::SharedCtor() {
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:pb.RequestBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestBody::ArenaDtor(void* object) {
  RequestBody* _this = reinterpret_cast< RequestBody* >(object);
  (void)_this;
}
void RequestBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpt_config_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.ConfigSeq rpt_config_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rpt_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ConfigSeq rpt_config_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rpt_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rpt_config_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestBody)
  return target;
}

size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ConfigSeq rpt_config_list = 1;
  total_size += 1UL * this->_internal_rpt_config_list_size();
  for (const auto& msg : this->rpt_config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBody::GetClassData() const { return &_class_data_; }

void RequestBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestBody *>(to)->MergeFrom(
      static_cast<const RequestBody &>(from));
}


void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rpt_config_list_.MergeFrom(from.rpt_config_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  return true;
}

void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rpt_config_list_.InternalSwap(&other->rpt_config_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[1]);
}

// ===================================================================

class ConfigSeq::_Internal {
 public:
};

ConfigSeq::ConfigSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.ConfigSeq)
}
ConfigSeq::ConfigSeq(const ConfigSeq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:pb.ConfigSeq)
}

void ConfigSeq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
}

ConfigSeq::~ConfigSeq() {
  // @@protoc_insertion_point(destructor:pb.ConfigSeq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigSeq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigSeq::ArenaDtor(void* object) {
  ConfigSeq* _this = reinterpret_cast< ConfigSeq* >(object);
  (void)_this;
}
void ConfigSeq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigSeq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigSeq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ConfigSeq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&type_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSeq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigSeq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ConfigSeq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ConfigSeq)
  return target;
}

size_t ConfigSeq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ConfigSeq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSeq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigSeq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSeq::GetClassData() const { return &_class_data_; }

void ConfigSeq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigSeq *>(to)->MergeFrom(
      static_cast<const ConfigSeq &>(from));
}


void ConfigSeq::MergeFrom(const ConfigSeq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ConfigSeq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSeq::CopyFrom(const ConfigSeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ConfigSeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSeq::IsInitialized() const {
  return true;
}

void ConfigSeq::InternalSwap(ConfigSeq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSeq, version_)
      + sizeof(ConfigSeq::version_)
      - PROTOBUF_FIELD_OFFSET(ConfigSeq, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSeq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[2]);
}

// ===================================================================

class D50ReqBody::_Internal {
 public:
};

D50ReqBody::D50ReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uinlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.D50ReqBody)
}
D50ReqBody::D50ReqBody(const D50ReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uinlist_(from.uinlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reqksingswitch_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(reqksingswitch_));
  // @@protoc_insertion_point(copy_constructor:pb.D50ReqBody)
}

void D50ReqBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reqksingswitch_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(reqksingswitch_));
}

D50ReqBody::~D50ReqBody() {
  // @@protoc_insertion_point(destructor:pb.D50ReqBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void D50ReqBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void D50ReqBody::ArenaDtor(void* object) {
  D50ReqBody* _this = reinterpret_cast< D50ReqBody* >(object);
  (void)_this;
}
void D50ReqBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void D50ReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void D50ReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.D50ReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uinlist_.Clear();
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reqksingswitch_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(reqksingswitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* D50ReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxPkgSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxpkgsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 startIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          startindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 uinList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_uinlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_uinlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMusicSwitch = 91001;
      case 91001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          reqmusicswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMutualmarkAlienation = 101001;
      case 101001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reqmutualmarkalienation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMutualmarkScore = 141001;
      case 141001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reqmutualmarkscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqKsingSwitch = 151001;
      case 151001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          reqksingswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMutualmarkLbsshare = 181001;
      case 181001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reqmutualmarklbsshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* D50ReqBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.D50ReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 appid = 1;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_appid(), target);
  }

  // int32 maxPkgSize = 2;
  if (this->_internal_maxpkgsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxpkgsize(), target);
  }

  // int32 startTime = 3;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_starttime(), target);
  }

  // int32 startIndex = 4;
  if (this->_internal_startindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_startindex(), target);
  }

  // int32 reqNum = 5;
  if (this->_internal_reqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_reqnum(), target);
  }

  // repeated int64 uinList = 6;
  {
    int byte_size = _uinlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_uinlist(), byte_size, target);
    }
  }

  // int32 reqMusicSwitch = 91001;
  if (this->_internal_reqmusicswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(91001, this->_internal_reqmusicswitch(), target);
  }

  // int32 reqMutualmarkAlienation = 101001;
  if (this->_internal_reqmutualmarkalienation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101001, this->_internal_reqmutualmarkalienation(), target);
  }

  // int32 reqMutualmarkScore = 141001;
  if (this->_internal_reqmutualmarkscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(141001, this->_internal_reqmutualmarkscore(), target);
  }

  // int32 reqKsingSwitch = 151001;
  if (this->_internal_reqksingswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(151001, this->_internal_reqksingswitch(), target);
  }

  // int32 reqMutualmarkLbsshare = 181001;
  if (this->_internal_reqmutualmarklbsshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(181001, this->_internal_reqmutualmarklbsshare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.D50ReqBody)
  return target;
}

size_t D50ReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.D50ReqBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 uinList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->uinlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uinlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 appid = 1;
  if (this->_internal_appid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_appid());
  }

  // int32 maxPkgSize = 2;
  if (this->_internal_maxpkgsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maxpkgsize());
  }

  // int32 startTime = 3;
  if (this->_internal_starttime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_starttime());
  }

  // int32 startIndex = 4;
  if (this->_internal_startindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_startindex());
  }

  // int32 reqNum = 5;
  if (this->_internal_reqnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqnum());
  }

  // int32 reqMutualmarkLbsshare = 181001;
  if (this->_internal_reqmutualmarklbsshare() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqmutualmarklbsshare());
  }

  // int32 reqMusicSwitch = 91001;
  if (this->_internal_reqmusicswitch() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqmusicswitch());
  }

  // int32 reqMutualmarkAlienation = 101001;
  if (this->_internal_reqmutualmarkalienation() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqmutualmarkalienation());
  }

  // int32 reqMutualmarkScore = 141001;
  if (this->_internal_reqmutualmarkscore() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqmutualmarkscore());
  }

  // int32 reqKsingSwitch = 151001;
  if (this->_internal_reqksingswitch() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqksingswitch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData D50ReqBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    D50ReqBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*D50ReqBody::GetClassData() const { return &_class_data_; }

void D50ReqBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<D50ReqBody *>(to)->MergeFrom(
      static_cast<const D50ReqBody &>(from));
}


void D50ReqBody::MergeFrom(const D50ReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.D50ReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uinlist_.MergeFrom(from.uinlist_);
  if (from._internal_appid() != 0) {
    _internal_set_appid(from._internal_appid());
  }
  if (from._internal_maxpkgsize() != 0) {
    _internal_set_maxpkgsize(from._internal_maxpkgsize());
  }
  if (from._internal_starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_startindex() != 0) {
    _internal_set_startindex(from._internal_startindex());
  }
  if (from._internal_reqnum() != 0) {
    _internal_set_reqnum(from._internal_reqnum());
  }
  if (from._internal_reqmutualmarklbsshare() != 0) {
    _internal_set_reqmutualmarklbsshare(from._internal_reqmutualmarklbsshare());
  }
  if (from._internal_reqmusicswitch() != 0) {
    _internal_set_reqmusicswitch(from._internal_reqmusicswitch());
  }
  if (from._internal_reqmutualmarkalienation() != 0) {
    _internal_set_reqmutualmarkalienation(from._internal_reqmutualmarkalienation());
  }
  if (from._internal_reqmutualmarkscore() != 0) {
    _internal_set_reqmutualmarkscore(from._internal_reqmutualmarkscore());
  }
  if (from._internal_reqksingswitch() != 0) {
    _internal_set_reqksingswitch(from._internal_reqksingswitch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void D50ReqBody::CopyFrom(const D50ReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.D50ReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D50ReqBody::IsInitialized() const {
  return true;
}

void D50ReqBody::InternalSwap(D50ReqBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uinlist_.InternalSwap(&other->uinlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(D50ReqBody, reqksingswitch_)
      + sizeof(D50ReqBody::reqksingswitch_)
      - PROTOBUF_FIELD_OFFSET(D50ReqBody, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata D50ReqBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[3]);
}

// ===================================================================

class ReqDataHighwayHead::_Internal {
 public:
  static const ::pb::DataHighwayHead& msgbasehead(const ReqDataHighwayHead* msg);
  static const ::pb::SegHead& msgseghead(const ReqDataHighwayHead* msg);
};

const ::pb::DataHighwayHead&
ReqDataHighwayHead::_Internal::msgbasehead(const ReqDataHighwayHead* msg) {
  return *msg->msgbasehead_;
}
const ::pb::SegHead&
ReqDataHighwayHead::_Internal::msgseghead(const ReqDataHighwayHead* msg) {
  return *msg->msgseghead_;
}
ReqDataHighwayHead::ReqDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.ReqDataHighwayHead)
}
ReqDataHighwayHead::ReqDataHighwayHead(const ReqDataHighwayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reqextendinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqextendinfo().empty()) {
    reqextendinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reqextendinfo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_msgbasehead()) {
    msgbasehead_ = new ::pb::DataHighwayHead(*from.msgbasehead_);
  } else {
    msgbasehead_ = nullptr;
  }
  if (from._internal_has_msgseghead()) {
    msgseghead_ = new ::pb::SegHead(*from.msgseghead_);
  } else {
    msgseghead_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqDataHighwayHead)
}

void ReqDataHighwayHead::SharedCtor() {
reqextendinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgbasehead_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&msgbasehead_)) + sizeof(timestamp_));
}

ReqDataHighwayHead::~ReqDataHighwayHead() {
  // @@protoc_insertion_point(destructor:pb.ReqDataHighwayHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqDataHighwayHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reqextendinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msgbasehead_;
  if (this != internal_default_instance()) delete msgseghead_;
}

void ReqDataHighwayHead::ArenaDtor(void* object) {
  ReqDataHighwayHead* _this = reinterpret_cast< ReqDataHighwayHead* >(object);
  (void)_this;
}
void ReqDataHighwayHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDataHighwayHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDataHighwayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqDataHighwayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqextendinfo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && msgbasehead_ != nullptr) {
    delete msgbasehead_;
  }
  msgbasehead_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msgseghead_ != nullptr) {
    delete msgseghead_;
  }
  msgseghead_ = nullptr;
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDataHighwayHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.DataHighwayHead msgBasehead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgbasehead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.SegHead msgSeghead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgseghead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes reqExtendinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reqextendinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDataHighwayHead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqDataHighwayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msgbasehead(this), target, stream);
  }

  // .pb.SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msgseghead(this), target, stream);
  }

  // bytes reqExtendinfo = 3;
  if (!this->_internal_reqextendinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reqextendinfo(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqDataHighwayHead)
  return target;
}

size_t ReqDataHighwayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqDataHighwayHead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reqExtendinfo = 3;
  if (!this->_internal_reqextendinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reqextendinfo());
  }

  // .pb.DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgbasehead_);
  }

  // .pb.SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgseghead_);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDataHighwayHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDataHighwayHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDataHighwayHead::GetClassData() const { return &_class_data_; }

void ReqDataHighwayHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDataHighwayHead *>(to)->MergeFrom(
      static_cast<const ReqDataHighwayHead &>(from));
}


void ReqDataHighwayHead::MergeFrom(const ReqDataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqDataHighwayHead)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reqextendinfo().empty()) {
    _internal_set_reqextendinfo(from._internal_reqextendinfo());
  }
  if (from._internal_has_msgbasehead()) {
    _internal_mutable_msgbasehead()->::pb::DataHighwayHead::MergeFrom(from._internal_msgbasehead());
  }
  if (from._internal_has_msgseghead()) {
    _internal_mutable_msgseghead()->::pb::SegHead::MergeFrom(from._internal_msgseghead());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDataHighwayHead::CopyFrom(const ReqDataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqDataHighwayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDataHighwayHead::IsInitialized() const {
  return true;
}

void ReqDataHighwayHead::InternalSwap(ReqDataHighwayHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reqextendinfo_, lhs_arena,
      &other->reqextendinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDataHighwayHead, timestamp_)
      + sizeof(ReqDataHighwayHead::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ReqDataHighwayHead, msgbasehead_)>(
          reinterpret_cast<char*>(&msgbasehead_),
          reinterpret_cast<char*>(&other->msgbasehead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDataHighwayHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[4]);
}

// ===================================================================

class RspDataHighwayHead::_Internal {
 public:
  static const ::pb::DataHighwayHead& msgbasehead(const RspDataHighwayHead* msg);
  static const ::pb::SegHead& msgseghead(const RspDataHighwayHead* msg);
};

const ::pb::DataHighwayHead&
RspDataHighwayHead::_Internal::msgbasehead(const RspDataHighwayHead* msg) {
  return *msg->msgbasehead_;
}
const ::pb::SegHead&
RspDataHighwayHead::_Internal::msgseghead(const RspDataHighwayHead* msg) {
  return *msg->msgseghead_;
}
RspDataHighwayHead::RspDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.RspDataHighwayHead)
}
RspDataHighwayHead::RspDataHighwayHead(const RspDataHighwayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rspextendinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rspextendinfo().empty()) {
    rspextendinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rspextendinfo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_msgbasehead()) {
    msgbasehead_ = new ::pb::DataHighwayHead(*from.msgbasehead_);
  } else {
    msgbasehead_ = nullptr;
  }
  if (from._internal_has_msgseghead()) {
    msgseghead_ = new ::pb::SegHead(*from.msgseghead_);
  } else {
    msgseghead_ = nullptr;
  }
  ::memcpy(&errorcode_, &from.errorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&isreset_) -
    reinterpret_cast<char*>(&errorcode_)) + sizeof(isreset_));
  // @@protoc_insertion_point(copy_constructor:pb.RspDataHighwayHead)
}

void RspDataHighwayHead::SharedCtor() {
rspextendinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgbasehead_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isreset_) -
    reinterpret_cast<char*>(&msgbasehead_)) + sizeof(isreset_));
}

RspDataHighwayHead::~RspDataHighwayHead() {
  // @@protoc_insertion_point(destructor:pb.RspDataHighwayHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RspDataHighwayHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rspextendinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msgbasehead_;
  if (this != internal_default_instance()) delete msgseghead_;
}

void RspDataHighwayHead::ArenaDtor(void* object) {
  RspDataHighwayHead* _this = reinterpret_cast< RspDataHighwayHead* >(object);
  (void)_this;
}
void RspDataHighwayHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RspDataHighwayHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RspDataHighwayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspDataHighwayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rspextendinfo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && msgbasehead_ != nullptr) {
    delete msgbasehead_;
  }
  msgbasehead_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msgseghead_ != nullptr) {
    delete msgseghead_;
  }
  msgseghead_ = nullptr;
  ::memset(&errorcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isreset_) -
      reinterpret_cast<char*>(&errorcode_)) + sizeof(isreset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RspDataHighwayHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.DataHighwayHead msgBasehead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgbasehead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.SegHead msgSeghead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgseghead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 allowRetry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allowretry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cachecost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cachecost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 htcost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          htcost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rspExtendinfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_rspextendinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 isReset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          isreset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RspDataHighwayHead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspDataHighwayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msgbasehead(this), target, stream);
  }

  // .pb.SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msgseghead(this), target, stream);
  }

  // int32 errorCode = 3;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_errorcode(), target);
  }

  // int32 allowRetry = 4;
  if (this->_internal_allowretry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_allowretry(), target);
  }

  // int32 cachecost = 5;
  if (this->_internal_cachecost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cachecost(), target);
  }

  // int32 htcost = 6;
  if (this->_internal_htcost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_htcost(), target);
  }

  // bytes rspExtendinfo = 7;
  if (!this->_internal_rspextendinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_rspextendinfo(), target);
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timestamp(), target);
  }

  // int64 range = 9;
  if (this->_internal_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_range(), target);
  }

  // int32 isReset = 10;
  if (this->_internal_isreset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_isreset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspDataHighwayHead)
  return target;
}

size_t RspDataHighwayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspDataHighwayHead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rspExtendinfo = 7;
  if (!this->_internal_rspextendinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rspextendinfo());
  }

  // .pb.DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgbasehead_);
  }

  // .pb.SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgseghead_);
  }

  // int32 errorCode = 3;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  // int32 allowRetry = 4;
  if (this->_internal_allowretry() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_allowretry());
  }

  // int32 cachecost = 5;
  if (this->_internal_cachecost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cachecost());
  }

  // int32 htcost = 6;
  if (this->_internal_htcost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_htcost());
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 range = 9;
  if (this->_internal_range() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_range());
  }

  // int32 isReset = 10;
  if (this->_internal_isreset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_isreset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RspDataHighwayHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RspDataHighwayHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RspDataHighwayHead::GetClassData() const { return &_class_data_; }

void RspDataHighwayHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RspDataHighwayHead *>(to)->MergeFrom(
      static_cast<const RspDataHighwayHead &>(from));
}


void RspDataHighwayHead::MergeFrom(const RspDataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspDataHighwayHead)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rspextendinfo().empty()) {
    _internal_set_rspextendinfo(from._internal_rspextendinfo());
  }
  if (from._internal_has_msgbasehead()) {
    _internal_mutable_msgbasehead()->::pb::DataHighwayHead::MergeFrom(from._internal_msgbasehead());
  }
  if (from._internal_has_msgseghead()) {
    _internal_mutable_msgseghead()->::pb::SegHead::MergeFrom(from._internal_msgseghead());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  if (from._internal_allowretry() != 0) {
    _internal_set_allowretry(from._internal_allowretry());
  }
  if (from._internal_cachecost() != 0) {
    _internal_set_cachecost(from._internal_cachecost());
  }
  if (from._internal_htcost() != 0) {
    _internal_set_htcost(from._internal_htcost());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_range() != 0) {
    _internal_set_range(from._internal_range());
  }
  if (from._internal_isreset() != 0) {
    _internal_set_isreset(from._internal_isreset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RspDataHighwayHead::CopyFrom(const RspDataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspDataHighwayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDataHighwayHead::IsInitialized() const {
  return true;
}

void RspDataHighwayHead::InternalSwap(RspDataHighwayHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rspextendinfo_, lhs_arena,
      &other->rspextendinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RspDataHighwayHead, isreset_)
      + sizeof(RspDataHighwayHead::isreset_)
      - PROTOBUF_FIELD_OFFSET(RspDataHighwayHead, msgbasehead_)>(
          reinterpret_cast<char*>(&msgbasehead_),
          reinterpret_cast<char*>(&other->msgbasehead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RspDataHighwayHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[5]);
}

// ===================================================================

class DataHighwayHead::_Internal {
 public:
};

DataHighwayHead::DataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.DataHighwayHead)
}
DataHighwayHead::DataHighwayHead(const DataHighwayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uin().empty()) {
    uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uin(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  buildver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buildver().empty()) {
    buildver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buildver(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&localeid_) -
    reinterpret_cast<char*>(&version_)) + sizeof(localeid_));
  // @@protoc_insertion_point(copy_constructor:pb.DataHighwayHead)
}

void DataHighwayHead::SharedCtor() {
uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buildver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localeid_) -
    reinterpret_cast<char*>(&version_)) + sizeof(localeid_));
}

DataHighwayHead::~DataHighwayHead() {
  // @@protoc_insertion_point(destructor:pb.DataHighwayHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataHighwayHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buildver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataHighwayHead::ArenaDtor(void* object) {
  DataHighwayHead* _this = reinterpret_cast< DataHighwayHead* >(object);
  (void)_this;
}
void DataHighwayHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataHighwayHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataHighwayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DataHighwayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uin_.ClearToEmpty();
  command_.ClearToEmpty();
  buildver_.ClearToEmpty();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localeid_) -
      reinterpret_cast<char*>(&version_)) + sizeof(localeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataHighwayHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DataHighwayHead.uin"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DataHighwayHead.command"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retryTimes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          retrytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dataflag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dataflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 commandId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          commandid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string buildVer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_buildver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DataHighwayHead.buildVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 localeId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          localeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataHighwayHead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DataHighwayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string uin = 2;
  if (!this->_internal_uin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uin().data(), static_cast<int>(this->_internal_uin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DataHighwayHead.uin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uin(), target);
  }

  // string command = 3;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DataHighwayHead.command");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_command(), target);
  }

  // int32 seq = 4;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_seq(), target);
  }

  // int32 retryTimes = 5;
  if (this->_internal_retrytimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_retrytimes(), target);
  }

  // int32 appid = 6;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_appid(), target);
  }

  // int32 dataflag = 7;
  if (this->_internal_dataflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dataflag(), target);
  }

  // int32 commandId = 8;
  if (this->_internal_commandid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_commandid(), target);
  }

  // string buildVer = 9;
  if (!this->_internal_buildver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildver().data(), static_cast<int>(this->_internal_buildver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DataHighwayHead.buildVer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_buildver(), target);
  }

  // int32 localeId = 10;
  if (this->_internal_localeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_localeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DataHighwayHead)
  return target;
}

size_t DataHighwayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DataHighwayHead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uin = 2;
  if (!this->_internal_uin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uin());
  }

  // string command = 3;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string buildVer = 9;
  if (!this->_internal_buildver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildver());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int32 seq = 4;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seq());
  }

  // int32 retryTimes = 5;
  if (this->_internal_retrytimes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_retrytimes());
  }

  // int32 appid = 6;
  if (this->_internal_appid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
  }

  // int32 dataflag = 7;
  if (this->_internal_dataflag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dataflag());
  }

  // int32 commandId = 8;
  if (this->_internal_commandid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_commandid());
  }

  // int32 localeId = 10;
  if (this->_internal_localeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_localeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataHighwayHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataHighwayHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataHighwayHead::GetClassData() const { return &_class_data_; }

void DataHighwayHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataHighwayHead *>(to)->MergeFrom(
      static_cast<const DataHighwayHead &>(from));
}


void DataHighwayHead::MergeFrom(const DataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DataHighwayHead)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uin().empty()) {
    _internal_set_uin(from._internal_uin());
  }
  if (!from._internal_command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (!from._internal_buildver().empty()) {
    _internal_set_buildver(from._internal_buildver());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_retrytimes() != 0) {
    _internal_set_retrytimes(from._internal_retrytimes());
  }
  if (from._internal_appid() != 0) {
    _internal_set_appid(from._internal_appid());
  }
  if (from._internal_dataflag() != 0) {
    _internal_set_dataflag(from._internal_dataflag());
  }
  if (from._internal_commandid() != 0) {
    _internal_set_commandid(from._internal_commandid());
  }
  if (from._internal_localeid() != 0) {
    _internal_set_localeid(from._internal_localeid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataHighwayHead::CopyFrom(const DataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DataHighwayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHighwayHead::IsInitialized() const {
  return true;
}

void DataHighwayHead::InternalSwap(DataHighwayHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uin_, lhs_arena,
      &other->uin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buildver_, lhs_arena,
      &other->buildver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataHighwayHead, localeid_)
      + sizeof(DataHighwayHead::localeid_)
      - PROTOBUF_FIELD_OFFSET(DataHighwayHead, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataHighwayHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[6]);
}

// ===================================================================

class SegHead::_Internal {
 public:
};

SegHead::SegHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.SegHead)
}
SegHead::SegHead(const SegHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serviceticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceticket().empty()) {
    serviceticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceticket(), 
      GetArenaForAllocation());
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArenaForAllocation());
  }
  filemd5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filemd5().empty()) {
    filemd5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filemd5(), 
      GetArenaForAllocation());
  }
  ::memcpy(&filesize_, &from.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&updatecacheip_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(updatecacheip_));
  // @@protoc_insertion_point(copy_constructor:pb.SegHead)
}

void SegHead::SharedCtor() {
serviceticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filemd5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filesize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updatecacheip_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(updatecacheip_));
}

SegHead::~SegHead() {
  // @@protoc_insertion_point(destructor:pb.SegHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SegHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serviceticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filemd5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SegHead::ArenaDtor(void* object) {
  SegHead* _this = reinterpret_cast< SegHead* >(object);
  (void)_this;
}
void SegHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SegHead::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SegHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviceticket_.ClearToEmpty();
  md5_.ClearToEmpty();
  filemd5_.ClearToEmpty();
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatecacheip_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(updatecacheip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 serviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 filesize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dataoffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dataoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 datalength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datalength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rtcode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rtcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes serviceticket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_serviceticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes md5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fileMd5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_filemd5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cacheAddr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cacheaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 queryTimes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          querytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 updateCacheip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          updatecacheip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegHead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SegHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceid = 1;
  if (this->_internal_serviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // int64 filesize = 2;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_filesize(), target);
  }

  // int64 dataoffset = 3;
  if (this->_internal_dataoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_dataoffset(), target);
  }

  // int32 datalength = 4;
  if (this->_internal_datalength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_datalength(), target);
  }

  // int32 rtcode = 5;
  if (this->_internal_rtcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rtcode(), target);
  }

  // bytes serviceticket = 6;
  if (!this->_internal_serviceticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_serviceticket(), target);
  }

  // int32 flag = 7;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_flag(), target);
  }

  // bytes md5 = 8;
  if (!this->_internal_md5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_md5(), target);
  }

  // bytes fileMd5 = 9;
  if (!this->_internal_filemd5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_filemd5(), target);
  }

  // int32 cacheAddr = 10;
  if (this->_internal_cacheaddr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cacheaddr(), target);
  }

  // int32 queryTimes = 11;
  if (this->_internal_querytimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_querytimes(), target);
  }

  // int32 updateCacheip = 12;
  if (this->_internal_updatecacheip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_updatecacheip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SegHead)
  return target;
}

size_t SegHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SegHead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serviceticket = 6;
  if (!this->_internal_serviceticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serviceticket());
  }

  // bytes md5 = 8;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_md5());
  }

  // bytes fileMd5 = 9;
  if (!this->_internal_filemd5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filemd5());
  }

  // int64 filesize = 2;
  if (this->_internal_filesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_filesize());
  }

  // int32 serviceid = 1;
  if (this->_internal_serviceid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serviceid());
  }

  // int32 datalength = 4;
  if (this->_internal_datalength() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_datalength());
  }

  // int64 dataoffset = 3;
  if (this->_internal_dataoffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dataoffset());
  }

  // int32 rtcode = 5;
  if (this->_internal_rtcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rtcode());
  }

  // int32 flag = 7;
  if (this->_internal_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // int32 cacheAddr = 10;
  if (this->_internal_cacheaddr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cacheaddr());
  }

  // int32 queryTimes = 11;
  if (this->_internal_querytimes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_querytimes());
  }

  // int32 updateCacheip = 12;
  if (this->_internal_updatecacheip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_updatecacheip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SegHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegHead::GetClassData() const { return &_class_data_; }

void SegHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SegHead *>(to)->MergeFrom(
      static_cast<const SegHead &>(from));
}


void SegHead::MergeFrom(const SegHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SegHead)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceticket().empty()) {
    _internal_set_serviceticket(from._internal_serviceticket());
  }
  if (!from._internal_md5().empty()) {
    _internal_set_md5(from._internal_md5());
  }
  if (!from._internal_filemd5().empty()) {
    _internal_set_filemd5(from._internal_filemd5());
  }
  if (from._internal_filesize() != 0) {
    _internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from._internal_datalength() != 0) {
    _internal_set_datalength(from._internal_datalength());
  }
  if (from._internal_dataoffset() != 0) {
    _internal_set_dataoffset(from._internal_dataoffset());
  }
  if (from._internal_rtcode() != 0) {
    _internal_set_rtcode(from._internal_rtcode());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from._internal_cacheaddr() != 0) {
    _internal_set_cacheaddr(from._internal_cacheaddr());
  }
  if (from._internal_querytimes() != 0) {
    _internal_set_querytimes(from._internal_querytimes());
  }
  if (from._internal_updatecacheip() != 0) {
    _internal_set_updatecacheip(from._internal_updatecacheip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegHead::CopyFrom(const SegHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SegHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegHead::IsInitialized() const {
  return true;
}

void SegHead::InternalSwap(SegHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serviceticket_, lhs_arena,
      &other->serviceticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &md5_, lhs_arena,
      &other->md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filemd5_, lhs_arena,
      &other->filemd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegHead, updatecacheip_)
      + sizeof(SegHead::updatecacheip_)
      - PROTOBUF_FIELD_OFFSET(SegHead, filesize_)>(
          reinterpret_cast<char*>(&filesize_),
          reinterpret_cast<char*>(&other->filesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[7]);
}

// ===================================================================

class DeleteMessageRequest::_Internal {
 public:
};

DeleteMessageRequest::DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.DeleteMessageRequest)
}
DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.DeleteMessageRequest)
}

void DeleteMessageRequest::SharedCtor() {
}

DeleteMessageRequest::~DeleteMessageRequest() {
  // @@protoc_insertion_point(destructor:pb.DeleteMessageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteMessageRequest::ArenaDtor(void* object) {
  DeleteMessageRequest* _this = reinterpret_cast< DeleteMessageRequest* >(object);
  (void)_this;
}
void DeleteMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DeleteMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.MessageItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DeleteMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.MessageItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DeleteMessageRequest)
  return target;
}

size_t DeleteMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DeleteMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MessageItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMessageRequest::GetClassData() const { return &_class_data_; }

void DeleteMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteMessageRequest *>(to)->MergeFrom(
      static_cast<const DeleteMessageRequest &>(from));
}


void DeleteMessageRequest::MergeFrom(const DeleteMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DeleteMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMessageRequest::CopyFrom(const DeleteMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DeleteMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMessageRequest::IsInitialized() const {
  return true;
}

void DeleteMessageRequest::InternalSwap(DeleteMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMessageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[8]);
}

// ===================================================================

class MessageItem::_Internal {
 public:
};

MessageItem::MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.MessageItem)
}
MessageItem::MessageItem(const MessageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sig(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fromuin_, &from.fromuin_,
    static_cast<size_t>(reinterpret_cast<char*>(&msguid_) -
    reinterpret_cast<char*>(&fromuin_)) + sizeof(msguid_));
  // @@protoc_insertion_point(copy_constructor:pb.MessageItem)
}

void MessageItem::SharedCtor() {
sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fromuin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msguid_) -
    reinterpret_cast<char*>(&fromuin_)) + sizeof(msguid_));
}

MessageItem::~MessageItem() {
  // @@protoc_insertion_point(destructor:pb.MessageItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageItem::ArenaDtor(void* object) {
  MessageItem* _this = reinterpret_cast< MessageItem* >(object);
  (void)_this;
}
void MessageItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MessageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_.ClearToEmpty();
  ::memset(&fromuin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msguid_) -
      reinterpret_cast<char*>(&fromuin_)) + sizeof(msguid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fromUin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fromuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 toUin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          touin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgSeq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sig = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MessageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fromuin(), target);
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_touin(), target);
  }

  // int32 msgType = 3;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgtype(), target);
  }

  // int32 msgSeq = 4;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgseq(), target);
  }

  // int64 msgUid = 5;
  if (this->_internal_msguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_msguid(), target);
  }

  // bytes sig = 7;
  if (!this->_internal_sig().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MessageItem)
  return target;
}

size_t MessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MessageItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig = 7;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fromuin());
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_touin());
  }

  // int32 msgType = 3;
  if (this->_internal_msgtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // int32 msgSeq = 4;
  if (this->_internal_msgseq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgseq());
  }

  // int64 msgUid = 5;
  if (this->_internal_msguid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageItem::GetClassData() const { return &_class_data_; }

void MessageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageItem *>(to)->MergeFrom(
      static_cast<const MessageItem &>(from));
}


void MessageItem::MergeFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig().empty()) {
    _internal_set_sig(from._internal_sig());
  }
  if (from._internal_fromuin() != 0) {
    _internal_set_fromuin(from._internal_fromuin());
  }
  if (from._internal_touin() != 0) {
    _internal_set_touin(from._internal_touin());
  }
  if (from._internal_msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_msgseq() != 0) {
    _internal_set_msgseq(from._internal_msgseq());
  }
  if (from._internal_msguid() != 0) {
    _internal_set_msguid(from._internal_msguid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageItem::CopyFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  return true;
}

void MessageItem::InternalSwap(MessageItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sig_, lhs_arena,
      &other->sig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageItem, msguid_)
      + sizeof(MessageItem::msguid_)
      - PROTOBUF_FIELD_OFFSET(MessageItem, fromuin_)>(
          reinterpret_cast<char*>(&fromuin_),
          reinterpret_cast<char*>(&other->fromuin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[9]);
}

// ===================================================================

class SubD4::_Internal {
 public:
};

SubD4::SubD4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.SubD4)
}
SubD4::SubD4(const SubD4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uin_ = from.uin_;
  // @@protoc_insertion_point(copy_constructor:pb.SubD4)
}

void SubD4::SharedCtor() {
uin_ = int64_t{0};
}

SubD4::~SubD4() {
  // @@protoc_insertion_point(destructor:pb.SubD4)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubD4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubD4::ArenaDtor(void* object) {
  SubD4* _this = reinterpret_cast< SubD4* >(object);
  (void)_this;
}
void SubD4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubD4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubD4::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubD4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uin_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubD4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubD4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubD4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubD4)
  return target;
}

size_t SubD4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubD4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubD4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubD4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubD4::GetClassData() const { return &_class_data_; }

void SubD4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubD4 *>(to)->MergeFrom(
      static_cast<const SubD4 &>(from));
}


void SubD4::MergeFrom(const SubD4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubD4)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uin() != 0) {
    _internal_set_uin(from._internal_uin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubD4::CopyFrom(const SubD4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubD4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubD4::IsInitialized() const {
  return true;
}

void SubD4::InternalSwap(SubD4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uin_, other->uin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubD4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[10]);
}

// ===================================================================

class Sub8A::_Internal {
 public:
};

Sub8A::Sub8A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Sub8A)
}
Sub8A::Sub8A(const Sub8A& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_info_(from.msg_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reserved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reserved().empty()) {
    reserved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserved(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&longmessageflag_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(longmessageflag_));
  // @@protoc_insertion_point(copy_constructor:pb.Sub8A)
}

void Sub8A::SharedCtor() {
reserved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longmessageflag_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(longmessageflag_));
}

Sub8A::~Sub8A() {
  // @@protoc_insertion_point(destructor:pb.Sub8A)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sub8A::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reserved_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sub8A::ArenaDtor(void* object) {
  Sub8A* _this = reinterpret_cast< Sub8A* >(object);
  (void)_this;
}
void Sub8A::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sub8A::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sub8A::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Sub8A)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_info_.Clear();
  reserved_.ClearToEmpty();
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longmessageflag_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(longmessageflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub8A::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.Sub8AMsgInfo msg_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 appId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 instId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          instid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 longMessageFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          longmessageflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes reserved = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reserved();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sub8A::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Sub8A)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Sub8AMsgInfo msg_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg_info(i), target, stream);
  }

  // int32 appId = 2;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_appid(), target);
  }

  // int32 instId = 3;
  if (this->_internal_instid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_instid(), target);
  }

  // int32 longMessageFlag = 4;
  if (this->_internal_longmessageflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_longmessageflag(), target);
  }

  // bytes reserved = 5;
  if (!this->_internal_reserved().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_reserved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Sub8A)
  return target;
}

size_t Sub8A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Sub8A)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Sub8AMsgInfo msg_info = 1;
  total_size += 1UL * this->_internal_msg_info_size();
  for (const auto& msg : this->msg_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes reserved = 5;
  if (!this->_internal_reserved().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reserved());
  }

  // int32 appId = 2;
  if (this->_internal_appid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
  }

  // int32 instId = 3;
  if (this->_internal_instid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_instid());
  }

  // int32 longMessageFlag = 4;
  if (this->_internal_longmessageflag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_longmessageflag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub8A::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sub8A::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub8A::GetClassData() const { return &_class_data_; }

void Sub8A::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sub8A *>(to)->MergeFrom(
      static_cast<const Sub8A &>(from));
}


void Sub8A::MergeFrom(const Sub8A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Sub8A)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_info_.MergeFrom(from.msg_info_);
  if (!from._internal_reserved().empty()) {
    _internal_set_reserved(from._internal_reserved());
  }
  if (from._internal_appid() != 0) {
    _internal_set_appid(from._internal_appid());
  }
  if (from._internal_instid() != 0) {
    _internal_set_instid(from._internal_instid());
  }
  if (from._internal_longmessageflag() != 0) {
    _internal_set_longmessageflag(from._internal_longmessageflag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub8A::CopyFrom(const Sub8A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Sub8A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub8A::IsInitialized() const {
  return true;
}

void Sub8A::InternalSwap(Sub8A* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_info_.InternalSwap(&other->msg_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserved_, lhs_arena,
      &other->reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub8A, longmessageflag_)
      + sizeof(Sub8A::longmessageflag_)
      - PROTOBUF_FIELD_OFFSET(Sub8A, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub8A::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[11]);
}

// ===================================================================

class Sub8AMsgInfo::_Internal {
 public:
};

Sub8AMsgInfo::Sub8AMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Sub8AMsgInfo)
}
Sub8AMsgInfo::Sub8AMsgInfo(const Sub8AMsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fromuin_, &from.fromuin_,
    static_cast<size_t>(reinterpret_cast<char*>(&devseq_) -
    reinterpret_cast<char*>(&fromuin_)) + sizeof(devseq_));
  // @@protoc_insertion_point(copy_constructor:pb.Sub8AMsgInfo)
}

void Sub8AMsgInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fromuin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&devseq_) -
    reinterpret_cast<char*>(&fromuin_)) + sizeof(devseq_));
}

Sub8AMsgInfo::~Sub8AMsgInfo() {
  // @@protoc_insertion_point(destructor:pb.Sub8AMsgInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sub8AMsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sub8AMsgInfo::ArenaDtor(void* object) {
  Sub8AMsgInfo* _this = reinterpret_cast< Sub8AMsgInfo* >(object);
  (void)_this;
}
void Sub8AMsgInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sub8AMsgInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sub8AMsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Sub8AMsgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fromuin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devseq_) -
      reinterpret_cast<char*>(&fromuin_)) + sizeof(devseq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub8AMsgInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fromUin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fromuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 toUin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          touin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgSeq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msgtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgRandom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          msgrandom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pkgNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pkgnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pkgIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pkgindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 devSeq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          devseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sub8AMsgInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Sub8AMsgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fromuin(), target);
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_touin(), target);
  }

  // int32 msgSeq = 3;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgseq(), target);
  }

  // int64 msgUid = 4;
  if (this->_internal_msguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_msguid(), target);
  }

  // int64 msgTime = 5;
  if (this->_internal_msgtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_msgtime(), target);
  }

  // int32 msgRandom = 6;
  if (this->_internal_msgrandom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_msgrandom(), target);
  }

  // int32 pkgNum = 7;
  if (this->_internal_pkgnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_pkgnum(), target);
  }

  // int32 pkgIndex = 8;
  if (this->_internal_pkgindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pkgindex(), target);
  }

  // int32 devSeq = 9;
  if (this->_internal_devseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_devseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Sub8AMsgInfo)
  return target;
}

size_t Sub8AMsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Sub8AMsgInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fromuin());
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_touin());
  }

  // int64 msgUid = 4;
  if (this->_internal_msguid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msguid());
  }

  // int32 msgSeq = 3;
  if (this->_internal_msgseq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgseq());
  }

  // int32 msgRandom = 6;
  if (this->_internal_msgrandom() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgrandom());
  }

  // int64 msgTime = 5;
  if (this->_internal_msgtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msgtime());
  }

  // int32 pkgNum = 7;
  if (this->_internal_pkgnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pkgnum());
  }

  // int32 pkgIndex = 8;
  if (this->_internal_pkgindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pkgindex());
  }

  // int32 devSeq = 9;
  if (this->_internal_devseq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_devseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub8AMsgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sub8AMsgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub8AMsgInfo::GetClassData() const { return &_class_data_; }

void Sub8AMsgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sub8AMsgInfo *>(to)->MergeFrom(
      static_cast<const Sub8AMsgInfo &>(from));
}


void Sub8AMsgInfo::MergeFrom(const Sub8AMsgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Sub8AMsgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromuin() != 0) {
    _internal_set_fromuin(from._internal_fromuin());
  }
  if (from._internal_touin() != 0) {
    _internal_set_touin(from._internal_touin());
  }
  if (from._internal_msguid() != 0) {
    _internal_set_msguid(from._internal_msguid());
  }
  if (from._internal_msgseq() != 0) {
    _internal_set_msgseq(from._internal_msgseq());
  }
  if (from._internal_msgrandom() != 0) {
    _internal_set_msgrandom(from._internal_msgrandom());
  }
  if (from._internal_msgtime() != 0) {
    _internal_set_msgtime(from._internal_msgtime());
  }
  if (from._internal_pkgnum() != 0) {
    _internal_set_pkgnum(from._internal_pkgnum());
  }
  if (from._internal_pkgindex() != 0) {
    _internal_set_pkgindex(from._internal_pkgindex());
  }
  if (from._internal_devseq() != 0) {
    _internal_set_devseq(from._internal_devseq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub8AMsgInfo::CopyFrom(const Sub8AMsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Sub8AMsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub8AMsgInfo::IsInitialized() const {
  return true;
}

void Sub8AMsgInfo::InternalSwap(Sub8AMsgInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub8AMsgInfo, devseq_)
      + sizeof(Sub8AMsgInfo::devseq_)
      - PROTOBUF_FIELD_OFFSET(Sub8AMsgInfo, fromuin_)>(
          reinterpret_cast<char*>(&fromuin_),
          reinterpret_cast<char*>(&other->fromuin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub8AMsgInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[12]);
}

// ===================================================================

class SubB3::_Internal {
 public:
  static const ::pb::SubB3AddFrdNotify& msgaddfrdnotify(const SubB3* msg);
};

const ::pb::SubB3AddFrdNotify&
SubB3::_Internal::msgaddfrdnotify(const SubB3* msg) {
  return *msg->msgaddfrdnotify_;
}
SubB3::SubB3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.SubB3)
}
SubB3::SubB3(const SubB3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msgaddfrdnotify()) {
    msgaddfrdnotify_ = new ::pb::SubB3AddFrdNotify(*from.msgaddfrdnotify_);
  } else {
    msgaddfrdnotify_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.SubB3)
}

void SubB3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgaddfrdnotify_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&msgaddfrdnotify_)) + sizeof(type_));
}

SubB3::~SubB3() {
  // @@protoc_insertion_point(destructor:pb.SubB3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubB3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msgaddfrdnotify_;
}

void SubB3::ArenaDtor(void* object) {
  SubB3* _this = reinterpret_cast< SubB3* >(object);
  (void)_this;
}
void SubB3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubB3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubB3::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubB3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msgaddfrdnotify_ != nullptr) {
    delete msgaddfrdnotify_;
  }
  msgaddfrdnotify_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubB3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.SubB3AddFrdNotify msgAddFrdNotify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgaddfrdnotify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubB3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubB3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .pb.SubB3AddFrdNotify msgAddFrdNotify = 2;
  if (this->_internal_has_msgaddfrdnotify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msgaddfrdnotify(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubB3)
  return target;
}

size_t SubB3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubB3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.SubB3AddFrdNotify msgAddFrdNotify = 2;
  if (this->_internal_has_msgaddfrdnotify()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgaddfrdnotify_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubB3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubB3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubB3::GetClassData() const { return &_class_data_; }

void SubB3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubB3 *>(to)->MergeFrom(
      static_cast<const SubB3 &>(from));
}


void SubB3::MergeFrom(const SubB3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubB3)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msgaddfrdnotify()) {
    _internal_mutable_msgaddfrdnotify()->::pb::SubB3AddFrdNotify::MergeFrom(from._internal_msgaddfrdnotify());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubB3::CopyFrom(const SubB3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubB3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubB3::IsInitialized() const {
  return true;
}

void SubB3::InternalSwap(SubB3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubB3, type_)
      + sizeof(SubB3::type_)
      - PROTOBUF_FIELD_OFFSET(SubB3, msgaddfrdnotify_)>(
          reinterpret_cast<char*>(&msgaddfrdnotify_),
          reinterpret_cast<char*>(&other->msgaddfrdnotify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubB3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[13]);
}

// ===================================================================

class SubB3AddFrdNotify::_Internal {
 public:
};

SubB3AddFrdNotify::SubB3AddFrdNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.SubB3AddFrdNotify)
}
SubB3AddFrdNotify::SubB3AddFrdNotify(const SubB3AddFrdNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArenaForAllocation());
  }
  uin_ = from.uin_;
  // @@protoc_insertion_point(copy_constructor:pb.SubB3AddFrdNotify)
}

void SubB3AddFrdNotify::SharedCtor() {
nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
uin_ = int64_t{0};
}

SubB3AddFrdNotify::~SubB3AddFrdNotify() {
  // @@protoc_insertion_point(destructor:pb.SubB3AddFrdNotify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubB3AddFrdNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubB3AddFrdNotify::ArenaDtor(void* object) {
  SubB3AddFrdNotify* _this = reinterpret_cast< SubB3AddFrdNotify* >(object);
  (void)_this;
}
void SubB3AddFrdNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubB3AddFrdNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubB3AddFrdNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubB3AddFrdNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  uin_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubB3AddFrdNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SubB3AddFrdNotify.nick"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubB3AddFrdNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubB3AddFrdNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  // string nick = 5;
  if (!this->_internal_nick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SubB3AddFrdNotify.nick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubB3AddFrdNotify)
  return target;
}

size_t SubB3AddFrdNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubB3AddFrdNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 5;
  if (!this->_internal_nick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubB3AddFrdNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubB3AddFrdNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubB3AddFrdNotify::GetClassData() const { return &_class_data_; }

void SubB3AddFrdNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubB3AddFrdNotify *>(to)->MergeFrom(
      static_cast<const SubB3AddFrdNotify &>(from));
}


void SubB3AddFrdNotify::MergeFrom(const SubB3AddFrdNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubB3AddFrdNotify)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick().empty()) {
    _internal_set_nick(from._internal_nick());
  }
  if (from._internal_uin() != 0) {
    _internal_set_uin(from._internal_uin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubB3AddFrdNotify::CopyFrom(const SubB3AddFrdNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubB3AddFrdNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubB3AddFrdNotify::IsInitialized() const {
  return true;
}

void SubB3AddFrdNotify::InternalSwap(SubB3AddFrdNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_, lhs_arena,
      &other->nick_, rhs_arena
  );
  swap(uin_, other->uin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubB3AddFrdNotify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[14]);
}

// ===================================================================

class Sub44::_Internal {
 public:
  static const ::pb::Sub44FriendSyncMsg& friendsyncmsg(const Sub44* msg);
  static const ::pb::Sub44GroupSyncMsg& groupsyncmsg(const Sub44* msg);
};

const ::pb::Sub44FriendSyncMsg&
Sub44::_Internal::friendsyncmsg(const Sub44* msg) {
  return *msg->friendsyncmsg_;
}
const ::pb::Sub44GroupSyncMsg&
Sub44::_Internal::groupsyncmsg(const Sub44* msg) {
  return *msg->groupsyncmsg_;
}
Sub44::Sub44(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Sub44)
}
Sub44::Sub44(const Sub44& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_friendsyncmsg()) {
    friendsyncmsg_ = new ::pb::Sub44FriendSyncMsg(*from.friendsyncmsg_);
  } else {
    friendsyncmsg_ = nullptr;
  }
  if (from._internal_has_groupsyncmsg()) {
    groupsyncmsg_ = new ::pb::Sub44GroupSyncMsg(*from.groupsyncmsg_);
  } else {
    groupsyncmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.Sub44)
}

void Sub44::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&friendsyncmsg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&groupsyncmsg_) -
    reinterpret_cast<char*>(&friendsyncmsg_)) + sizeof(groupsyncmsg_));
}

Sub44::~Sub44() {
  // @@protoc_insertion_point(destructor:pb.Sub44)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sub44::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete friendsyncmsg_;
  if (this != internal_default_instance()) delete groupsyncmsg_;
}

void Sub44::ArenaDtor(void* object) {
  Sub44* _this = reinterpret_cast< Sub44* >(object);
  (void)_this;
}
void Sub44::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sub44::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sub44::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Sub44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && friendsyncmsg_ != nullptr) {
    delete friendsyncmsg_;
  }
  friendsyncmsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && groupsyncmsg_ != nullptr) {
    delete groupsyncmsg_;
  }
  groupsyncmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub44::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Sub44FriendSyncMsg friendSyncMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsyncmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Sub44GroupSyncMsg groupSyncMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupsyncmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sub44::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Sub44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Sub44FriendSyncMsg friendSyncMsg = 1;
  if (this->_internal_has_friendsyncmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::friendsyncmsg(this), target, stream);
  }

  // .pb.Sub44GroupSyncMsg groupSyncMsg = 2;
  if (this->_internal_has_groupsyncmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::groupsyncmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Sub44)
  return target;
}

size_t Sub44::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Sub44)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Sub44FriendSyncMsg friendSyncMsg = 1;
  if (this->_internal_has_friendsyncmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friendsyncmsg_);
  }

  // .pb.Sub44GroupSyncMsg groupSyncMsg = 2;
  if (this->_internal_has_groupsyncmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groupsyncmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub44::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sub44::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub44::GetClassData() const { return &_class_data_; }

void Sub44::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sub44 *>(to)->MergeFrom(
      static_cast<const Sub44 &>(from));
}


void Sub44::MergeFrom(const Sub44& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Sub44)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friendsyncmsg()) {
    _internal_mutable_friendsyncmsg()->::pb::Sub44FriendSyncMsg::MergeFrom(from._internal_friendsyncmsg());
  }
  if (from._internal_has_groupsyncmsg()) {
    _internal_mutable_groupsyncmsg()->::pb::Sub44GroupSyncMsg::MergeFrom(from._internal_groupsyncmsg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub44::CopyFrom(const Sub44& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Sub44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub44::IsInitialized() const {
  return true;
}

void Sub44::InternalSwap(Sub44* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub44, groupsyncmsg_)
      + sizeof(Sub44::groupsyncmsg_)
      - PROTOBUF_FIELD_OFFSET(Sub44, friendsyncmsg_)>(
          reinterpret_cast<char*>(&friendsyncmsg_),
          reinterpret_cast<char*>(&other->friendsyncmsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub44::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[15]);
}

// ===================================================================

class Sub44FriendSyncMsg::_Internal {
 public:
};

Sub44FriendSyncMsg::Sub44FriendSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  strwording_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Sub44FriendSyncMsg)
}
Sub44FriendSyncMsg::Sub44FriendSyncMsg(const Sub44FriendSyncMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      strwording_(from.strwording_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uin_, &from.uin_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourcesubid_) -
    reinterpret_cast<char*>(&uin_)) + sizeof(sourcesubid_));
  // @@protoc_insertion_point(copy_constructor:pb.Sub44FriendSyncMsg)
}

void Sub44FriendSyncMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sourcesubid_) -
    reinterpret_cast<char*>(&uin_)) + sizeof(sourcesubid_));
}

Sub44FriendSyncMsg::~Sub44FriendSyncMsg() {
  // @@protoc_insertion_point(destructor:pb.Sub44FriendSyncMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sub44FriendSyncMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sub44FriendSyncMsg::ArenaDtor(void* object) {
  Sub44FriendSyncMsg* _this = reinterpret_cast< Sub44FriendSyncMsg* >(object);
  (void)_this;
}
void Sub44FriendSyncMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sub44FriendSyncMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sub44FriendSyncMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Sub44FriendSyncMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strwording_.Clear();
  ::memset(&uin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourcesubid_) -
      reinterpret_cast<char*>(&uin_)) + sizeof(sourcesubid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub44FriendSyncMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fUin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          processtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processFlag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          processflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sourceId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sourceSubId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sourcesubid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string strWording = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strwording();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Sub44FriendSyncMsg.strWording"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sub44FriendSyncMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Sub44FriendSyncMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  // int64 fUin = 2;
  if (this->_internal_fuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_fuin(), target);
  }

  // int32 processType = 3;
  if (this->_internal_processtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_processtype(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  // int32 processFlag = 5;
  if (this->_internal_processflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_processflag(), target);
  }

  // int32 sourceId = 6;
  if (this->_internal_sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sourceid(), target);
  }

  // int32 sourceSubId = 7;
  if (this->_internal_sourcesubid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sourcesubid(), target);
  }

  // repeated string strWording = 8;
  for (int i = 0, n = this->_internal_strwording_size(); i < n; i++) {
    const auto& s = this->_internal_strwording(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Sub44FriendSyncMsg.strWording");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Sub44FriendSyncMsg)
  return target;
}

size_t Sub44FriendSyncMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Sub44FriendSyncMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strWording = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strwording_.size());
  for (int i = 0, n = strwording_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strwording_.Get(i));
  }

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  // int64 fUin = 2;
  if (this->_internal_fuin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fuin());
  }

  // int32 processType = 3;
  if (this->_internal_processtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processtype());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  // int32 processFlag = 5;
  if (this->_internal_processflag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processflag());
  }

  // int32 sourceId = 6;
  if (this->_internal_sourceid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sourceid());
  }

  // int32 sourceSubId = 7;
  if (this->_internal_sourcesubid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sourcesubid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub44FriendSyncMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sub44FriendSyncMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub44FriendSyncMsg::GetClassData() const { return &_class_data_; }

void Sub44FriendSyncMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sub44FriendSyncMsg *>(to)->MergeFrom(
      static_cast<const Sub44FriendSyncMsg &>(from));
}


void Sub44FriendSyncMsg::MergeFrom(const Sub44FriendSyncMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Sub44FriendSyncMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strwording_.MergeFrom(from.strwording_);
  if (from._internal_uin() != 0) {
    _internal_set_uin(from._internal_uin());
  }
  if (from._internal_fuin() != 0) {
    _internal_set_fuin(from._internal_fuin());
  }
  if (from._internal_processtype() != 0) {
    _internal_set_processtype(from._internal_processtype());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_processflag() != 0) {
    _internal_set_processflag(from._internal_processflag());
  }
  if (from._internal_sourceid() != 0) {
    _internal_set_sourceid(from._internal_sourceid());
  }
  if (from._internal_sourcesubid() != 0) {
    _internal_set_sourcesubid(from._internal_sourcesubid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub44FriendSyncMsg::CopyFrom(const Sub44FriendSyncMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Sub44FriendSyncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub44FriendSyncMsg::IsInitialized() const {
  return true;
}

void Sub44FriendSyncMsg::InternalSwap(Sub44FriendSyncMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  strwording_.InternalSwap(&other->strwording_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub44FriendSyncMsg, sourcesubid_)
      + sizeof(Sub44FriendSyncMsg::sourcesubid_)
      - PROTOBUF_FIELD_OFFSET(Sub44FriendSyncMsg, uin_)>(
          reinterpret_cast<char*>(&uin_),
          reinterpret_cast<char*>(&other->uin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub44FriendSyncMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[16]);
}

// ===================================================================

class Sub44GroupSyncMsg::_Internal {
 public:
};

Sub44GroupSyncMsg::Sub44GroupSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Sub44GroupSyncMsg)
}
Sub44GroupSyncMsg::Sub44GroupSyncMsg(const Sub44GroupSyncMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msgbuf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgbuf().empty()) {
    msgbuf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgbuf(), 
      GetArenaForAllocation());
  }
  authkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authkey().empty()) {
    authkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authkey(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msgseq_, &from.msgseq_,
    static_cast<size_t>(reinterpret_cast<char*>(&processflag_) -
    reinterpret_cast<char*>(&msgseq_)) + sizeof(processflag_));
  // @@protoc_insertion_point(copy_constructor:pb.Sub44GroupSyncMsg)
}

void Sub44GroupSyncMsg::SharedCtor() {
msgbuf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
authkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processflag_) -
    reinterpret_cast<char*>(&msgseq_)) + sizeof(processflag_));
}

Sub44GroupSyncMsg::~Sub44GroupSyncMsg() {
  // @@protoc_insertion_point(destructor:pb.Sub44GroupSyncMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sub44GroupSyncMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msgbuf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sub44GroupSyncMsg::ArenaDtor(void* object) {
  Sub44GroupSyncMsg* _this = reinterpret_cast< Sub44GroupSyncMsg* >(object);
  (void)_this;
}
void Sub44GroupSyncMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sub44GroupSyncMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sub44GroupSyncMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Sub44GroupSyncMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgbuf_.ClearToEmpty();
  authkey_.ClearToEmpty();
  ::memset(&msgseq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processflag_) -
      reinterpret_cast<char*>(&msgseq_)) + sizeof(processflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub44GroupSyncMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgSeq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 grpCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grpcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gaCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gacode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 optUin1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          optuin1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 optUin2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          optuin2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msgBuf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_msgbuf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes authKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_authkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          msgstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 actionUin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          actionuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 actionTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          actiontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curMaxMemCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          curmaxmemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nextMaxMemCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nextmaxmemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curMemCount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          curmemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqSrcId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          reqsrcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqSrcSubId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          reqsrcsubid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inviterRole = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          inviterrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 extAdminNum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          extadminnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processFlag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          processflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sub44GroupSyncMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Sub44GroupSyncMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgType = 1;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // int64 msgSeq = 2;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_msgseq(), target);
  }

  // int64 grpCode = 3;
  if (this->_internal_grpcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_grpcode(), target);
  }

  // int64 gaCode = 4;
  if (this->_internal_gacode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gacode(), target);
  }

  // int64 optUin1 = 5;
  if (this->_internal_optuin1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_optuin1(), target);
  }

  // int64 optUin2 = 6;
  if (this->_internal_optuin2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_optuin2(), target);
  }

  // bytes msgBuf = 7;
  if (!this->_internal_msgbuf().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_msgbuf(), target);
  }

  // bytes authKey = 8;
  if (!this->_internal_authkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_authkey(), target);
  }

  // int32 msgStatus = 9;
  if (this->_internal_msgstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_msgstatus(), target);
  }

  // int64 actionUin = 10;
  if (this->_internal_actionuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_actionuin(), target);
  }

  // int64 actionTime = 11;
  if (this->_internal_actiontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_actiontime(), target);
  }

  // int32 curMaxMemCount = 12;
  if (this->_internal_curmaxmemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_curmaxmemcount(), target);
  }

  // int32 nextMaxMemCount = 13;
  if (this->_internal_nextmaxmemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_nextmaxmemcount(), target);
  }

  // int32 curMemCount = 14;
  if (this->_internal_curmemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_curmemcount(), target);
  }

  // int32 reqSrcId = 15;
  if (this->_internal_reqsrcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_reqsrcid(), target);
  }

  // int32 reqSrcSubId = 16;
  if (this->_internal_reqsrcsubid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_reqsrcsubid(), target);
  }

  // int32 inviterRole = 17;
  if (this->_internal_inviterrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_inviterrole(), target);
  }

  // int32 extAdminNum = 18;
  if (this->_internal_extadminnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_extadminnum(), target);
  }

  // int32 processFlag = 19;
  if (this->_internal_processflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_processflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Sub44GroupSyncMsg)
  return target;
}

size_t Sub44GroupSyncMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Sub44GroupSyncMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msgBuf = 7;
  if (!this->_internal_msgbuf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgbuf());
  }

  // bytes authKey = 8;
  if (!this->_internal_authkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_authkey());
  }

  // int64 msgSeq = 2;
  if (this->_internal_msgseq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msgseq());
  }

  // int64 grpCode = 3;
  if (this->_internal_grpcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_grpcode());
  }

  // int64 gaCode = 4;
  if (this->_internal_gacode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gacode());
  }

  // int64 optUin1 = 5;
  if (this->_internal_optuin1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_optuin1());
  }

  // int32 msgType = 1;
  if (this->_internal_msgtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // int32 msgStatus = 9;
  if (this->_internal_msgstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgstatus());
  }

  // int64 optUin2 = 6;
  if (this->_internal_optuin2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_optuin2());
  }

  // int64 actionUin = 10;
  if (this->_internal_actionuin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_actionuin());
  }

  // int64 actionTime = 11;
  if (this->_internal_actiontime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_actiontime());
  }

  // int32 curMaxMemCount = 12;
  if (this->_internal_curmaxmemcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_curmaxmemcount());
  }

  // int32 nextMaxMemCount = 13;
  if (this->_internal_nextmaxmemcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nextmaxmemcount());
  }

  // int32 curMemCount = 14;
  if (this->_internal_curmemcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_curmemcount());
  }

  // int32 reqSrcId = 15;
  if (this->_internal_reqsrcid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqsrcid());
  }

  // int32 reqSrcSubId = 16;
  if (this->_internal_reqsrcsubid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqsrcsubid());
  }

  // int32 inviterRole = 17;
  if (this->_internal_inviterrole() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inviterrole());
  }

  // int32 extAdminNum = 18;
  if (this->_internal_extadminnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extadminnum());
  }

  // int32 processFlag = 19;
  if (this->_internal_processflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processflag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub44GroupSyncMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sub44GroupSyncMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub44GroupSyncMsg::GetClassData() const { return &_class_data_; }

void Sub44GroupSyncMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sub44GroupSyncMsg *>(to)->MergeFrom(
      static_cast<const Sub44GroupSyncMsg &>(from));
}


void Sub44GroupSyncMsg::MergeFrom(const Sub44GroupSyncMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Sub44GroupSyncMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgbuf().empty()) {
    _internal_set_msgbuf(from._internal_msgbuf());
  }
  if (!from._internal_authkey().empty()) {
    _internal_set_authkey(from._internal_authkey());
  }
  if (from._internal_msgseq() != 0) {
    _internal_set_msgseq(from._internal_msgseq());
  }
  if (from._internal_grpcode() != 0) {
    _internal_set_grpcode(from._internal_grpcode());
  }
  if (from._internal_gacode() != 0) {
    _internal_set_gacode(from._internal_gacode());
  }
  if (from._internal_optuin1() != 0) {
    _internal_set_optuin1(from._internal_optuin1());
  }
  if (from._internal_msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_msgstatus() != 0) {
    _internal_set_msgstatus(from._internal_msgstatus());
  }
  if (from._internal_optuin2() != 0) {
    _internal_set_optuin2(from._internal_optuin2());
  }
  if (from._internal_actionuin() != 0) {
    _internal_set_actionuin(from._internal_actionuin());
  }
  if (from._internal_actiontime() != 0) {
    _internal_set_actiontime(from._internal_actiontime());
  }
  if (from._internal_curmaxmemcount() != 0) {
    _internal_set_curmaxmemcount(from._internal_curmaxmemcount());
  }
  if (from._internal_nextmaxmemcount() != 0) {
    _internal_set_nextmaxmemcount(from._internal_nextmaxmemcount());
  }
  if (from._internal_curmemcount() != 0) {
    _internal_set_curmemcount(from._internal_curmemcount());
  }
  if (from._internal_reqsrcid() != 0) {
    _internal_set_reqsrcid(from._internal_reqsrcid());
  }
  if (from._internal_reqsrcsubid() != 0) {
    _internal_set_reqsrcsubid(from._internal_reqsrcsubid());
  }
  if (from._internal_inviterrole() != 0) {
    _internal_set_inviterrole(from._internal_inviterrole());
  }
  if (from._internal_extadminnum() != 0) {
    _internal_set_extadminnum(from._internal_extadminnum());
  }
  if (from._internal_processflag() != 0) {
    _internal_set_processflag(from._internal_processflag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub44GroupSyncMsg::CopyFrom(const Sub44GroupSyncMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Sub44GroupSyncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub44GroupSyncMsg::IsInitialized() const {
  return true;
}

void Sub44GroupSyncMsg::InternalSwap(Sub44GroupSyncMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msgbuf_, lhs_arena,
      &other->msgbuf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &authkey_, lhs_arena,
      &other->authkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub44GroupSyncMsg, processflag_)
      + sizeof(Sub44GroupSyncMsg::processflag_)
      - PROTOBUF_FIELD_OFFSET(Sub44GroupSyncMsg, msgseq_)>(
          reinterpret_cast<char*>(&msgseq_),
          reinterpret_cast<char*>(&other->msgseq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub44GroupSyncMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[17]);
}

// ===================================================================

class GroupMemberReqBody::_Internal {
 public:
};

GroupMemberReqBody::GroupMemberReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.GroupMemberReqBody)
}
GroupMemberReqBody::GroupMemberReqBody(const GroupMemberReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&groupcode_, &from.groupcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&richcardnamever_) -
    reinterpret_cast<char*>(&groupcode_)) + sizeof(richcardnamever_));
  // @@protoc_insertion_point(copy_constructor:pb.GroupMemberReqBody)
}

void GroupMemberReqBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&groupcode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&richcardnamever_) -
    reinterpret_cast<char*>(&groupcode_)) + sizeof(richcardnamever_));
}

GroupMemberReqBody::~GroupMemberReqBody() {
  // @@protoc_insertion_point(destructor:pb.GroupMemberReqBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupMemberReqBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GroupMemberReqBody::ArenaDtor(void* object) {
  GroupMemberReqBody* _this = reinterpret_cast< GroupMemberReqBody* >(object);
  (void)_this;
}
void GroupMemberReqBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMemberReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupMemberReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GroupMemberReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&groupcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&richcardnamever_) -
      reinterpret_cast<char*>(&groupcode_)) + sizeof(richcardnamever_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMemberReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 groupCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool newClient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          newclient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 clientType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          clienttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 richCardNameVer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          richcardnamever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMemberReqBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GroupMemberReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_groupcode(), target);
  }

  // int64 uin = 2;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uin(), target);
  }

  // bool newClient = 3;
  if (this->_internal_newclient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_newclient(), target);
  }

  // int32 clientType = 4;
  if (this->_internal_clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_clienttype(), target);
  }

  // int32 richCardNameVer = 5;
  if (this->_internal_richcardnamever() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_richcardnamever(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GroupMemberReqBody)
  return target;
}

size_t GroupMemberReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GroupMemberReqBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_groupcode());
  }

  // int64 uin = 2;
  if (this->_internal_uin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  // bool newClient = 3;
  if (this->_internal_newclient() != 0) {
    total_size += 1 + 1;
  }

  // int32 clientType = 4;
  if (this->_internal_clienttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_clienttype());
  }

  // int32 richCardNameVer = 5;
  if (this->_internal_richcardnamever() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_richcardnamever());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMemberReqBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupMemberReqBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMemberReqBody::GetClassData() const { return &_class_data_; }

void GroupMemberReqBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GroupMemberReqBody *>(to)->MergeFrom(
      static_cast<const GroupMemberReqBody &>(from));
}


void GroupMemberReqBody::MergeFrom(const GroupMemberReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GroupMemberReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_groupcode() != 0) {
    _internal_set_groupcode(from._internal_groupcode());
  }
  if (from._internal_uin() != 0) {
    _internal_set_uin(from._internal_uin());
  }
  if (from._internal_newclient() != 0) {
    _internal_set_newclient(from._internal_newclient());
  }
  if (from._internal_clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
  if (from._internal_richcardnamever() != 0) {
    _internal_set_richcardnamever(from._internal_richcardnamever());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMemberReqBody::CopyFrom(const GroupMemberReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GroupMemberReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberReqBody::IsInitialized() const {
  return true;
}

void GroupMemberReqBody::InternalSwap(GroupMemberReqBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMemberReqBody, richcardnamever_)
      + sizeof(GroupMemberReqBody::richcardnamever_)
      - PROTOBUF_FIELD_OFFSET(GroupMemberReqBody, groupcode_)>(
          reinterpret_cast<char*>(&groupcode_),
          reinterpret_cast<char*>(&other->groupcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMemberReqBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[18]);
}

// ===================================================================

class GroupMemberRspBody::_Internal {
 public:
  static const ::pb::GroupMemberInfo& meminfo(const GroupMemberRspBody* msg);
};

const ::pb::GroupMemberInfo&
GroupMemberRspBody::_Internal::meminfo(const GroupMemberRspBody* msg) {
  return *msg->meminfo_;
}
GroupMemberRspBody::GroupMemberRspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.GroupMemberRspBody)
}
GroupMemberRspBody::GroupMemberRspBody(const GroupMemberRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meminfo()) {
    meminfo_ = new ::pb::GroupMemberInfo(*from.meminfo_);
  } else {
    meminfo_ = nullptr;
  }
  ::memcpy(&groupcode_, &from.groupcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&grouptype_) -
    reinterpret_cast<char*>(&groupcode_)) + sizeof(grouptype_));
  // @@protoc_insertion_point(copy_constructor:pb.GroupMemberRspBody)
}

void GroupMemberRspBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meminfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grouptype_) -
    reinterpret_cast<char*>(&meminfo_)) + sizeof(grouptype_));
}

GroupMemberRspBody::~GroupMemberRspBody() {
  // @@protoc_insertion_point(destructor:pb.GroupMemberRspBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupMemberRspBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete meminfo_;
}

void GroupMemberRspBody::ArenaDtor(void* object) {
  GroupMemberRspBody* _this = reinterpret_cast< GroupMemberRspBody* >(object);
  (void)_this;
}
void GroupMemberRspBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMemberRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupMemberRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GroupMemberRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && meminfo_ != nullptr) {
    delete meminfo_;
  }
  meminfo_ = nullptr;
  ::memset(&groupcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grouptype_) -
      reinterpret_cast<char*>(&groupcode_)) + sizeof(grouptype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMemberRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 groupCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 selfRole = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          selfrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.GroupMemberInfo memInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool boolSelfLocationShared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          boolselflocationshared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 groupType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          grouptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMemberRspBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GroupMemberRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_groupcode(), target);
  }

  // int32 selfRole = 2;
  if (this->_internal_selfrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_selfrole(), target);
  }

  // .pb.GroupMemberInfo memInfo = 3;
  if (this->_internal_has_meminfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::meminfo(this), target, stream);
  }

  // bool boolSelfLocationShared = 4;
  if (this->_internal_boolselflocationshared() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_boolselflocationshared(), target);
  }

  // int32 groupType = 5;
  if (this->_internal_grouptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_grouptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GroupMemberRspBody)
  return target;
}

size_t GroupMemberRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GroupMemberRspBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.GroupMemberInfo memInfo = 3;
  if (this->_internal_has_meminfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meminfo_);
  }

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_groupcode());
  }

  // int32 selfRole = 2;
  if (this->_internal_selfrole() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_selfrole());
  }

  // bool boolSelfLocationShared = 4;
  if (this->_internal_boolselflocationshared() != 0) {
    total_size += 1 + 1;
  }

  // int32 groupType = 5;
  if (this->_internal_grouptype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_grouptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMemberRspBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupMemberRspBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMemberRspBody::GetClassData() const { return &_class_data_; }

void GroupMemberRspBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GroupMemberRspBody *>(to)->MergeFrom(
      static_cast<const GroupMemberRspBody &>(from));
}


void GroupMemberRspBody::MergeFrom(const GroupMemberRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GroupMemberRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meminfo()) {
    _internal_mutable_meminfo()->::pb::GroupMemberInfo::MergeFrom(from._internal_meminfo());
  }
  if (from._internal_groupcode() != 0) {
    _internal_set_groupcode(from._internal_groupcode());
  }
  if (from._internal_selfrole() != 0) {
    _internal_set_selfrole(from._internal_selfrole());
  }
  if (from._internal_boolselflocationshared() != 0) {
    _internal_set_boolselflocationshared(from._internal_boolselflocationshared());
  }
  if (from._internal_grouptype() != 0) {
    _internal_set_grouptype(from._internal_grouptype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMemberRspBody::CopyFrom(const GroupMemberRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GroupMemberRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberRspBody::IsInitialized() const {
  return true;
}

void GroupMemberRspBody::InternalSwap(GroupMemberRspBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMemberRspBody, grouptype_)
      + sizeof(GroupMemberRspBody::grouptype_)
      - PROTOBUF_FIELD_OFFSET(GroupMemberRspBody, meminfo_)>(
          reinterpret_cast<char*>(&meminfo_),
          reinterpret_cast<char*>(&other->meminfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMemberRspBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[19]);
}

// ===================================================================

class GroupMemberInfo::_Internal {
 public:
};

GroupMemberInfo::GroupMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.GroupMemberInfo)
}
GroupMemberInfo::GroupMemberInfo(const GroupMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remark().empty()) {
    remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remark(), 
      GetArenaForAllocation());
  }
  card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card().empty()) {
    card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card(), 
      GetArenaForAllocation());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArenaForAllocation());
  }
  lev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lev().empty()) {
    lev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lev(), 
      GetArenaForAllocation());
  }
  gbartitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gbartitle().empty()) {
    gbartitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gbartitle(), 
      GetArenaForAllocation());
  }
  gbarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gbarurl().empty()) {
    gbarurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gbarurl(), 
      GetArenaForAllocation());
  }
  specialtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_specialtitle().empty()) {
    specialtitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specialtitle(), 
      GetArenaForAllocation());
  }
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phonenum().empty()) {
    phonenum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phonenum(), 
      GetArenaForAllocation());
  }
  job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job().empty()) {
    job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job(), 
      GetArenaForAllocation());
  }
  honor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_honor().empty()) {
    honor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_honor(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uin_, &from.uin_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&uin_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:pb.GroupMemberInfo)
}

void GroupMemberInfo::SharedCtor() {
errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gbartitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gbarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
specialtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
honor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&uin_)) + sizeof(level_));
}

GroupMemberInfo::~GroupMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.GroupMemberInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gbartitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gbarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specialtitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  honor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupMemberInfo::ArenaDtor(void* object) {
  GroupMemberInfo* _this = reinterpret_cast< GroupMemberInfo* >(object);
  (void)_this;
}
void GroupMemberInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GroupMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmpty();
  remark_.ClearToEmpty();
  card_.ClearToEmpty();
  location_.ClearToEmpty();
  nick_.ClearToEmpty();
  lev_.ClearToEmpty();
  gbartitle_.ClearToEmpty();
  gbarurl_.ClearToEmpty();
  specialtitle_.ClearToEmpty();
  phonenum_.ClearToEmpty();
  job_.ClearToEmpty();
  honor_.ClearToEmpty();
  ::memset(&uin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&uin_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMemberInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsFriend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isfriend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes remark = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_remark();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsConcerned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isconcerned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 credit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          credit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes card = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_card();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes location = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes lev = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_lev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 join = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lastSpeak = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          lastspeak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gbarTitle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_gbartitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gbarUrl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_gbarurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gbarCnt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          gbarcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isAllowModCard = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          isallowmodcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isVip = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          isvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isYearVip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          isyearvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSuperVip = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          issupervip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSuperQq = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          issuperqq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vipLev = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          viplev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 role = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool locationShared = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          locationshared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64Distance = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          int64distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 concernType = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          concerntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes specialTitle = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_specialtitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 specialTitleExpireTime = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          specialtitleexpiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes phoneNum = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes job = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_job();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 medalId = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          medalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string honor = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_honor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GroupMemberInfo.honor"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMemberInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GroupMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // bytes errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // bool IsFriend = 4;
  if (this->_internal_isfriend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isfriend(), target);
  }

  // bytes remark = 5;
  if (!this->_internal_remark().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_remark(), target);
  }

  // bool IsConcerned = 6;
  if (this->_internal_isconcerned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isconcerned(), target);
  }

  // int32 credit = 7;
  if (this->_internal_credit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_credit(), target);
  }

  // bytes card = 8;
  if (!this->_internal_card().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_card(), target);
  }

  // int32 sex = 9;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_sex(), target);
  }

  // bytes location = 10;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_location(), target);
  }

  // bytes nick = 11;
  if (!this->_internal_nick().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_nick(), target);
  }

  // int32 age = 12;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_age(), target);
  }

  // bytes lev = 13;
  if (!this->_internal_lev().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_lev(), target);
  }

  // int64 join = 14;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_join(), target);
  }

  // int64 lastSpeak = 15;
  if (this->_internal_lastspeak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_lastspeak(), target);
  }

  // bytes gbarTitle = 18;
  if (!this->_internal_gbartitle().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_gbartitle(), target);
  }

  // bytes gbarUrl = 19;
  if (!this->_internal_gbarurl().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_gbarurl(), target);
  }

  // int32 gbarCnt = 20;
  if (this->_internal_gbarcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_gbarcnt(), target);
  }

  // bool isAllowModCard = 21;
  if (this->_internal_isallowmodcard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_isallowmodcard(), target);
  }

  // bool isVip = 22;
  if (this->_internal_isvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_isvip(), target);
  }

  // bool isYearVip = 23;
  if (this->_internal_isyearvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_isyearvip(), target);
  }

  // bool isSuperVip = 24;
  if (this->_internal_issupervip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_issupervip(), target);
  }

  // bool isSuperQq = 25;
  if (this->_internal_issuperqq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_issuperqq(), target);
  }

  // int32 vipLev = 26;
  if (this->_internal_viplev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_viplev(), target);
  }

  // int32 role = 27;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_role(), target);
  }

  // bool locationShared = 28;
  if (this->_internal_locationshared() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_locationshared(), target);
  }

  // int64 int64Distance = 29;
  if (this->_internal_int64distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->_internal_int64distance(), target);
  }

  // int32 concernType = 30;
  if (this->_internal_concerntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_concerntype(), target);
  }

  // bytes specialTitle = 31;
  if (!this->_internal_specialtitle().empty()) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_specialtitle(), target);
  }

  // int32 specialTitleExpireTime = 32;
  if (this->_internal_specialtitleexpiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_specialtitleexpiretime(), target);
  }

  // bytes phoneNum = 35;
  if (!this->_internal_phonenum().empty()) {
    target = stream->WriteBytesMaybeAliased(
        35, this->_internal_phonenum(), target);
  }

  // bytes job = 36;
  if (!this->_internal_job().empty()) {
    target = stream->WriteBytesMaybeAliased(
        36, this->_internal_job(), target);
  }

  // int32 medalId = 37;
  if (this->_internal_medalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_medalid(), target);
  }

  // int32 level = 39;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_level(), target);
  }

  // string honor = 41;
  if (!this->_internal_honor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_honor().data(), static_cast<int>(this->_internal_honor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GroupMemberInfo.honor");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_honor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GroupMemberInfo)
  return target;
}

size_t GroupMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GroupMemberInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // bytes remark = 5;
  if (!this->_internal_remark().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remark());
  }

  // bytes card = 8;
  if (!this->_internal_card().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_card());
  }

  // bytes location = 10;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  // bytes nick = 11;
  if (!this->_internal_nick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick());
  }

  // bytes lev = 13;
  if (!this->_internal_lev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lev());
  }

  // bytes gbarTitle = 18;
  if (!this->_internal_gbartitle().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gbartitle());
  }

  // bytes gbarUrl = 19;
  if (!this->_internal_gbarurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gbarurl());
  }

  // bytes specialTitle = 31;
  if (!this->_internal_specialtitle().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_specialtitle());
  }

  // bytes phoneNum = 35;
  if (!this->_internal_phonenum().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_phonenum());
  }

  // bytes job = 36;
  if (!this->_internal_job().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job());
  }

  // string honor = 41;
  if (!this->_internal_honor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_honor());
  }

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 credit = 7;
  if (this->_internal_credit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_credit());
  }

  // int32 sex = 9;
  if (this->_internal_sex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
  }

  // int32 age = 12;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int64 join = 14;
  if (this->_internal_join() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_join());
  }

  // bool IsFriend = 4;
  if (this->_internal_isfriend() != 0) {
    total_size += 1 + 1;
  }

  // bool IsConcerned = 6;
  if (this->_internal_isconcerned() != 0) {
    total_size += 1 + 1;
  }

  // bool isAllowModCard = 21;
  if (this->_internal_isallowmodcard() != 0) {
    total_size += 2 + 1;
  }

  // bool isVip = 22;
  if (this->_internal_isvip() != 0) {
    total_size += 2 + 1;
  }

  // int32 gbarCnt = 20;
  if (this->_internal_gbarcnt() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gbarcnt());
  }

  // int64 lastSpeak = 15;
  if (this->_internal_lastspeak() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lastspeak());
  }

  // bool isYearVip = 23;
  if (this->_internal_isyearvip() != 0) {
    total_size += 2 + 1;
  }

  // bool isSuperVip = 24;
  if (this->_internal_issupervip() != 0) {
    total_size += 2 + 1;
  }

  // bool isSuperQq = 25;
  if (this->_internal_issuperqq() != 0) {
    total_size += 2 + 1;
  }

  // bool locationShared = 28;
  if (this->_internal_locationshared() != 0) {
    total_size += 2 + 1;
  }

  // int32 vipLev = 26;
  if (this->_internal_viplev() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplev());
  }

  // int32 role = 27;
  if (this->_internal_role() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role());
  }

  // int32 concernType = 30;
  if (this->_internal_concerntype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_concerntype());
  }

  // int64 int64Distance = 29;
  if (this->_internal_int64distance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64distance());
  }

  // int32 specialTitleExpireTime = 32;
  if (this->_internal_specialtitleexpiretime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_specialtitleexpiretime());
  }

  // int32 medalId = 37;
  if (this->_internal_medalid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_medalid());
  }

  // int32 level = 39;
  if (this->_internal_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupMemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMemberInfo::GetClassData() const { return &_class_data_; }

void GroupMemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GroupMemberInfo *>(to)->MergeFrom(
      static_cast<const GroupMemberInfo &>(from));
}


void GroupMemberInfo::MergeFrom(const GroupMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GroupMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (!from._internal_remark().empty()) {
    _internal_set_remark(from._internal_remark());
  }
  if (!from._internal_card().empty()) {
    _internal_set_card(from._internal_card());
  }
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (!from._internal_nick().empty()) {
    _internal_set_nick(from._internal_nick());
  }
  if (!from._internal_lev().empty()) {
    _internal_set_lev(from._internal_lev());
  }
  if (!from._internal_gbartitle().empty()) {
    _internal_set_gbartitle(from._internal_gbartitle());
  }
  if (!from._internal_gbarurl().empty()) {
    _internal_set_gbarurl(from._internal_gbarurl());
  }
  if (!from._internal_specialtitle().empty()) {
    _internal_set_specialtitle(from._internal_specialtitle());
  }
  if (!from._internal_phonenum().empty()) {
    _internal_set_phonenum(from._internal_phonenum());
  }
  if (!from._internal_job().empty()) {
    _internal_set_job(from._internal_job());
  }
  if (!from._internal_honor().empty()) {
    _internal_set_honor(from._internal_honor());
  }
  if (from._internal_uin() != 0) {
    _internal_set_uin(from._internal_uin());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_credit() != 0) {
    _internal_set_credit(from._internal_credit());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from._internal_join() != 0) {
    _internal_set_join(from._internal_join());
  }
  if (from._internal_isfriend() != 0) {
    _internal_set_isfriend(from._internal_isfriend());
  }
  if (from._internal_isconcerned() != 0) {
    _internal_set_isconcerned(from._internal_isconcerned());
  }
  if (from._internal_isallowmodcard() != 0) {
    _internal_set_isallowmodcard(from._internal_isallowmodcard());
  }
  if (from._internal_isvip() != 0) {
    _internal_set_isvip(from._internal_isvip());
  }
  if (from._internal_gbarcnt() != 0) {
    _internal_set_gbarcnt(from._internal_gbarcnt());
  }
  if (from._internal_lastspeak() != 0) {
    _internal_set_lastspeak(from._internal_lastspeak());
  }
  if (from._internal_isyearvip() != 0) {
    _internal_set_isyearvip(from._internal_isyearvip());
  }
  if (from._internal_issupervip() != 0) {
    _internal_set_issupervip(from._internal_issupervip());
  }
  if (from._internal_issuperqq() != 0) {
    _internal_set_issuperqq(from._internal_issuperqq());
  }
  if (from._internal_locationshared() != 0) {
    _internal_set_locationshared(from._internal_locationshared());
  }
  if (from._internal_viplev() != 0) {
    _internal_set_viplev(from._internal_viplev());
  }
  if (from._internal_role() != 0) {
    _internal_set_role(from._internal_role());
  }
  if (from._internal_concerntype() != 0) {
    _internal_set_concerntype(from._internal_concerntype());
  }
  if (from._internal_int64distance() != 0) {
    _internal_set_int64distance(from._internal_int64distance());
  }
  if (from._internal_specialtitleexpiretime() != 0) {
    _internal_set_specialtitleexpiretime(from._internal_specialtitleexpiretime());
  }
  if (from._internal_medalid() != 0) {
    _internal_set_medalid(from._internal_medalid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMemberInfo::CopyFrom(const GroupMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GroupMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberInfo::IsInitialized() const {
  return true;
}

void GroupMemberInfo::InternalSwap(GroupMemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remark_, lhs_arena,
      &other->remark_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &card_, lhs_arena,
      &other->card_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_, lhs_arena,
      &other->nick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lev_, lhs_arena,
      &other->lev_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gbartitle_, lhs_arena,
      &other->gbartitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gbarurl_, lhs_arena,
      &other->gbarurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &specialtitle_, lhs_arena,
      &other->specialtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phonenum_, lhs_arena,
      &other->phonenum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_, lhs_arena,
      &other->job_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &honor_, lhs_arena,
      &other->honor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMemberInfo, level_)
      + sizeof(GroupMemberInfo::level_)
      - PROTOBUF_FIELD_OFFSET(GroupMemberInfo, uin_)>(
          reinterpret_cast<char*>(&uin_),
          reinterpret_cast<char*>(&other->uin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMemberInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::DeviceInfo* Arena::CreateMaybeMessage< ::pb::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestBody* Arena::CreateMaybeMessage< ::pb::RequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConfigSeq* Arena::CreateMaybeMessage< ::pb::ConfigSeq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ConfigSeq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::D50ReqBody* Arena::CreateMaybeMessage< ::pb::D50ReqBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::D50ReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqDataHighwayHead* Arena::CreateMaybeMessage< ::pb::ReqDataHighwayHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ReqDataHighwayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspDataHighwayHead* Arena::CreateMaybeMessage< ::pb::RspDataHighwayHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RspDataHighwayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DataHighwayHead* Arena::CreateMaybeMessage< ::pb::DataHighwayHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::DataHighwayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SegHead* Arena::CreateMaybeMessage< ::pb::SegHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SegHead >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DeleteMessageRequest* Arena::CreateMaybeMessage< ::pb::DeleteMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::DeleteMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MessageItem* Arena::CreateMaybeMessage< ::pb::MessageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::MessageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubD4* Arena::CreateMaybeMessage< ::pb::SubD4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubD4 >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Sub8A* Arena::CreateMaybeMessage< ::pb::Sub8A >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Sub8A >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Sub8AMsgInfo* Arena::CreateMaybeMessage< ::pb::Sub8AMsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Sub8AMsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubB3* Arena::CreateMaybeMessage< ::pb::SubB3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubB3 >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubB3AddFrdNotify* Arena::CreateMaybeMessage< ::pb::SubB3AddFrdNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubB3AddFrdNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Sub44* Arena::CreateMaybeMessage< ::pb::Sub44 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Sub44 >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Sub44FriendSyncMsg* Arena::CreateMaybeMessage< ::pb::Sub44FriendSyncMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Sub44FriendSyncMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Sub44GroupSyncMsg* Arena::CreateMaybeMessage< ::pb::Sub44GroupSyncMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Sub44GroupSyncMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GroupMemberReqBody* Arena::CreateMaybeMessage< ::pb::GroupMemberReqBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GroupMemberReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GroupMemberRspBody* Arena::CreateMaybeMessage< ::pb::GroupMemberRspBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GroupMemberRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GroupMemberInfo* Arena::CreateMaybeMessage< ::pb::GroupMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GroupMemberInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
