// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oidb0x480.proto

#include "oidb0x480.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace oidb {
constexpr hb480::hb480(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , m1_(0)
  , m2_(0)
  , m3_(0){}
struct hb480DefaultTypeInternal {
  constexpr hb480DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~hb480DefaultTypeInternal() {}
  union {
    hb480 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT hb480DefaultTypeInternal _hb480_default_instance_;
}  // namespace oidb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_oidb0x480_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_oidb0x480_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_oidb0x480_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_oidb0x480_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::oidb::hb480, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::hb480, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::hb480, m1_),
  PROTOBUF_FIELD_OFFSET(::oidb::hb480, m2_),
  PROTOBUF_FIELD_OFFSET(::oidb::hb480, m3_),
  PROTOBUF_FIELD_OFFSET(::oidb::hb480, m4_),
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::oidb::hb480)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_hb480_default_instance_),
};

const char descriptor_table_protodef_oidb0x480_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017oidb0x480.proto\022\004oidb\"7\n\005hb480\022\n\n\002m1\030\001"
  " \001(\005\022\n\n\002m2\030\002 \001(\005\022\n\n\002m3\030\003 \001(\005\022\n\n\002m4\030\004 \001(\014"
  "B\tZ\007./;oidb"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_oidb0x480_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oidb0x480_2eproto = {
  false, false, 91, descriptor_table_protodef_oidb0x480_2eproto, "oidb0x480.proto", 
  &descriptor_table_oidb0x480_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_oidb0x480_2eproto::offsets,
  file_level_metadata_oidb0x480_2eproto, file_level_enum_descriptors_oidb0x480_2eproto, file_level_service_descriptors_oidb0x480_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_oidb0x480_2eproto_getter() {
  return &descriptor_table_oidb0x480_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_oidb0x480_2eproto(&descriptor_table_oidb0x480_2eproto);
namespace oidb {

// ===================================================================

class hb480::_Internal {
 public:
  using HasBits = decltype(std::declval<hb480>()._has_bits_);
  static void set_has_m1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m4(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

hb480::hb480(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.hb480)
}
hb480::hb480(const hb480& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m4()) {
    m4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m4(), 
      GetArenaForAllocation());
  }
  ::memcpy(&m1_, &from.m1_,
    static_cast<size_t>(reinterpret_cast<char*>(&m3_) -
    reinterpret_cast<char*>(&m1_)) + sizeof(m3_));
  // @@protoc_insertion_point(copy_constructor:oidb.hb480)
}

void hb480::SharedCtor() {
m4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m3_) -
    reinterpret_cast<char*>(&m1_)) + sizeof(m3_));
}

hb480::~hb480() {
  // @@protoc_insertion_point(destructor:oidb.hb480)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void hb480::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hb480::ArenaDtor(void* object) {
  hb480* _this = reinterpret_cast< hb480* >(object);
  (void)_this;
}
void hb480::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hb480::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void hb480::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.hb480)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&m1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m3_) -
        reinterpret_cast<char*>(&m1_)) + sizeof(m3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hb480::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m1(&has_bits);
          m1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m2(&has_bits);
          m2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m3(&has_bits);
          m3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes m4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_m4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hb480::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.hb480)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 m1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m1(), target);
  }

  // optional int32 m2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m2(), target);
  }

  // optional int32 m3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m3(), target);
  }

  // optional bytes m4 = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_m4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.hb480)
  return target;
}

size_t hb480::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.hb480)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes m4 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_m4());
    }

    // optional int32 m1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_m1());
    }

    // optional int32 m2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_m2());
    }

    // optional int32 m3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_m3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData hb480::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    hb480::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*hb480::GetClassData() const { return &_class_data_; }

void hb480::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<hb480 *>(to)->MergeFrom(
      static_cast<const hb480 &>(from));
}


void hb480::MergeFrom(const hb480& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.hb480)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m4(from._internal_m4());
    }
    if (cached_has_bits & 0x00000002u) {
      m1_ = from.m1_;
    }
    if (cached_has_bits & 0x00000004u) {
      m2_ = from.m2_;
    }
    if (cached_has_bits & 0x00000008u) {
      m3_ = from.m3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void hb480::CopyFrom(const hb480& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.hb480)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hb480::IsInitialized() const {
  return true;
}

void hb480::InternalSwap(hb480* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &m4_, lhs_arena,
      &other->m4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hb480, m3_)
      + sizeof(hb480::m3_)
      - PROTOBUF_FIELD_OFFSET(hb480, m1_)>(
          reinterpret_cast<char*>(&m1_),
          reinterpret_cast<char*>(&other->m1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hb480::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x480_2eproto_getter, &descriptor_table_oidb0x480_2eproto_once,
      file_level_metadata_oidb0x480_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oidb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::oidb::hb480* Arena::CreateMaybeMessage< ::oidb::hb480 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::hb480 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
