// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oidb0x480.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oidb0x480_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oidb0x480_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oidb0x480_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oidb0x480_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oidb0x480_2eproto;
namespace oidb {
class hb480;
struct hb480DefaultTypeInternal;
extern hb480DefaultTypeInternal _hb480_default_instance_;
}  // namespace oidb
PROTOBUF_NAMESPACE_OPEN
template<> ::oidb::hb480* Arena::CreateMaybeMessage<::oidb::hb480>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oidb {

// ===================================================================

class hb480 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.hb480) */ {
 public:
  inline hb480() : hb480(nullptr) {}
  ~hb480() override;
  explicit constexpr hb480(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  hb480(const hb480& from);
  hb480(hb480&& from) noexcept
    : hb480() {
    *this = ::std::move(from);
  }

  inline hb480& operator=(const hb480& from) {
    CopyFrom(from);
    return *this;
  }
  inline hb480& operator=(hb480&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const hb480& default_instance() {
    return *internal_default_instance();
  }
  static inline const hb480* internal_default_instance() {
    return reinterpret_cast<const hb480*>(
               &_hb480_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(hb480& a, hb480& b) {
    a.Swap(&b);
  }
  inline void Swap(hb480* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hb480* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hb480* New() const final {
    return new hb480();
  }

  hb480* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hb480>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const hb480& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const hb480& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hb480* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.hb480";
  }
  protected:
  explicit hb480(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM4FieldNumber = 4,
    kM1FieldNumber = 1,
    kM2FieldNumber = 2,
    kM3FieldNumber = 3,
  };
  // optional bytes m4 = 4;
  bool has_m4() const;
  private:
  bool _internal_has_m4() const;
  public:
  void clear_m4();
  const std::string& m4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m4();
  PROTOBUF_MUST_USE_RESULT std::string* release_m4();
  void set_allocated_m4(std::string* m4);
  private:
  const std::string& _internal_m4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m4(const std::string& value);
  std::string* _internal_mutable_m4();
  public:

  // optional int32 m1 = 1;
  bool has_m1() const;
  private:
  bool _internal_has_m1() const;
  public:
  void clear_m1();
  ::PROTOBUF_NAMESPACE_ID::int32 m1() const;
  void set_m1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m1() const;
  void _internal_set_m1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 m2 = 2;
  bool has_m2() const;
  private:
  bool _internal_has_m2() const;
  public:
  void clear_m2();
  ::PROTOBUF_NAMESPACE_ID::int32 m2() const;
  void set_m2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m2() const;
  void _internal_set_m2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 m3 = 3;
  bool has_m3() const;
  private:
  bool _internal_has_m3() const;
  public:
  void clear_m3();
  ::PROTOBUF_NAMESPACE_ID::int32 m3() const;
  void set_m3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m3() const;
  void _internal_set_m3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.hb480)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m4_;
  ::PROTOBUF_NAMESPACE_ID::int32 m1_;
  ::PROTOBUF_NAMESPACE_ID::int32 m2_;
  ::PROTOBUF_NAMESPACE_ID::int32 m3_;
  friend struct ::TableStruct_oidb0x480_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// hb480

// optional int32 m1 = 1;
inline bool hb480::_internal_has_m1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool hb480::has_m1() const {
  return _internal_has_m1();
}
inline void hb480::clear_m1() {
  m1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hb480::_internal_m1() const {
  return m1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hb480::m1() const {
  // @@protoc_insertion_point(field_get:oidb.hb480.m1)
  return _internal_m1();
}
inline void hb480::_internal_set_m1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m1_ = value;
}
inline void hb480::set_m1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m1(value);
  // @@protoc_insertion_point(field_set:oidb.hb480.m1)
}

// optional int32 m2 = 2;
inline bool hb480::_internal_has_m2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool hb480::has_m2() const {
  return _internal_has_m2();
}
inline void hb480::clear_m2() {
  m2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hb480::_internal_m2() const {
  return m2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hb480::m2() const {
  // @@protoc_insertion_point(field_get:oidb.hb480.m2)
  return _internal_m2();
}
inline void hb480::_internal_set_m2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m2_ = value;
}
inline void hb480::set_m2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m2(value);
  // @@protoc_insertion_point(field_set:oidb.hb480.m2)
}

// optional int32 m3 = 3;
inline bool hb480::_internal_has_m3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool hb480::has_m3() const {
  return _internal_has_m3();
}
inline void hb480::clear_m3() {
  m3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hb480::_internal_m3() const {
  return m3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hb480::m3() const {
  // @@protoc_insertion_point(field_get:oidb.hb480.m3)
  return _internal_m3();
}
inline void hb480::_internal_set_m3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m3_ = value;
}
inline void hb480::set_m3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m3(value);
  // @@protoc_insertion_point(field_set:oidb.hb480.m3)
}

// optional bytes m4 = 4;
inline bool hb480::_internal_has_m4() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool hb480::has_m4() const {
  return _internal_has_m4();
}
inline void hb480::clear_m4() {
  m4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& hb480::m4() const {
  // @@protoc_insertion_point(field_get:oidb.hb480.m4)
  return _internal_m4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void hb480::set_m4(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 m4_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.hb480.m4)
}
inline std::string* hb480::mutable_m4() {
  std::string* _s = _internal_mutable_m4();
  // @@protoc_insertion_point(field_mutable:oidb.hb480.m4)
  return _s;
}
inline const std::string& hb480::_internal_m4() const {
  return m4_.Get();
}
inline void hb480::_internal_set_m4(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* hb480::_internal_mutable_m4() {
  _has_bits_[0] |= 0x00000001u;
  return m4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* hb480::release_m4() {
  // @@protoc_insertion_point(field_release:oidb.hb480.m4)
  if (!_internal_has_m4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void hb480::set_allocated_m4(std::string* m4) {
  if (m4 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m4,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.hb480.m4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace oidb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oidb0x480_2eproto
