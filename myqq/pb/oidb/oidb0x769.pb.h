// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oidb0x769.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oidb0x769_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oidb0x769_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oidb0x769_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oidb0x769_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oidb0x769_2eproto;
namespace oidb {
class C41219OS;
struct C41219OSDefaultTypeInternal;
extern C41219OSDefaultTypeInternal _C41219OS_default_instance_;
class CPU;
struct CPUDefaultTypeInternal;
extern CPUDefaultTypeInternal _CPU_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Content;
struct ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class D769ConfigSeq;
struct D769ConfigSeqDefaultTypeInternal;
extern D769ConfigSeqDefaultTypeInternal _D769ConfigSeq_default_instance_;
class D769DeviceInfo;
struct D769DeviceInfoDefaultTypeInternal;
extern D769DeviceInfoDefaultTypeInternal _D769DeviceInfo_default_instance_;
class D769ReqBody;
struct D769ReqBodyDefaultTypeInternal;
extern D769ReqBodyDefaultTypeInternal _D769ReqBody_default_instance_;
class D769RspBody;
struct D769RspBodyDefaultTypeInternal;
extern D769RspBodyDefaultTypeInternal _D769RspBody_default_instance_;
class Memory;
struct MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class QueryUinPackageUsageReq;
struct QueryUinPackageUsageReqDefaultTypeInternal;
extern QueryUinPackageUsageReqDefaultTypeInternal _QueryUinPackageUsageReq_default_instance_;
class QueryUinPackageUsageRsp;
struct QueryUinPackageUsageRspDefaultTypeInternal;
extern QueryUinPackageUsageRspDefaultTypeInternal _QueryUinPackageUsageRsp_default_instance_;
class Screen;
struct ScreenDefaultTypeInternal;
extern ScreenDefaultTypeInternal _Screen_default_instance_;
class Storage;
struct StorageDefaultTypeInternal;
extern StorageDefaultTypeInternal _Storage_default_instance_;
class UinPackageUsedInfo;
struct UinPackageUsedInfoDefaultTypeInternal;
extern UinPackageUsedInfoDefaultTypeInternal _UinPackageUsedInfo_default_instance_;
}  // namespace oidb
PROTOBUF_NAMESPACE_OPEN
template<> ::oidb::C41219OS* Arena::CreateMaybeMessage<::oidb::C41219OS>(Arena*);
template<> ::oidb::CPU* Arena::CreateMaybeMessage<::oidb::CPU>(Arena*);
template<> ::oidb::Camera* Arena::CreateMaybeMessage<::oidb::Camera>(Arena*);
template<> ::oidb::Content* Arena::CreateMaybeMessage<::oidb::Content>(Arena*);
template<> ::oidb::D769ConfigSeq* Arena::CreateMaybeMessage<::oidb::D769ConfigSeq>(Arena*);
template<> ::oidb::D769DeviceInfo* Arena::CreateMaybeMessage<::oidb::D769DeviceInfo>(Arena*);
template<> ::oidb::D769ReqBody* Arena::CreateMaybeMessage<::oidb::D769ReqBody>(Arena*);
template<> ::oidb::D769RspBody* Arena::CreateMaybeMessage<::oidb::D769RspBody>(Arena*);
template<> ::oidb::Memory* Arena::CreateMaybeMessage<::oidb::Memory>(Arena*);
template<> ::oidb::QueryUinPackageUsageReq* Arena::CreateMaybeMessage<::oidb::QueryUinPackageUsageReq>(Arena*);
template<> ::oidb::QueryUinPackageUsageRsp* Arena::CreateMaybeMessage<::oidb::QueryUinPackageUsageRsp>(Arena*);
template<> ::oidb::Screen* Arena::CreateMaybeMessage<::oidb::Screen>(Arena*);
template<> ::oidb::Storage* Arena::CreateMaybeMessage<::oidb::Storage>(Arena*);
template<> ::oidb::UinPackageUsedInfo* Arena::CreateMaybeMessage<::oidb::UinPackageUsedInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oidb {

// ===================================================================

class CPU final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.CPU) */ {
 public:
  inline CPU() : CPU(nullptr) {}
  ~CPU() override;
  explicit constexpr CPU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPU(const CPU& from);
  CPU(CPU&& from) noexcept
    : CPU() {
    *this = ::std::move(from);
  }

  inline CPU& operator=(const CPU& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPU& operator=(CPU&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPU& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPU* internal_default_instance() {
    return reinterpret_cast<const CPU*>(
               &_CPU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPU& a, CPU& b) {
    a.Swap(&b);
  }
  inline void Swap(CPU* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPU* New() const final {
    return new CPU();
  }

  CPU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPU>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPU& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPU& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.CPU";
  }
  protected:
  explicit CPU(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kCoresFieldNumber = 2,
    kFrequencyFieldNumber = 3,
  };
  // optional string model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional uint32 cores = 2;
  bool has_cores() const;
  private:
  bool _internal_has_cores() const;
  public:
  void clear_cores();
  ::PROTOBUF_NAMESPACE_ID::uint32 cores() const;
  void set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cores() const;
  void _internal_set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 frequency = 3;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.CPU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cores_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return new Camera();
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Camera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryFieldNumber = 1,
    kSecondaryFieldNumber = 2,
    kFlashFieldNumber = 3,
  };
  // optional uint64 primary = 1;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  ::PROTOBUF_NAMESPACE_ID::uint64 primary() const;
  void set_primary(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_primary() const;
  void _internal_set_primary(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 secondary = 2;
  bool has_secondary() const;
  private:
  bool _internal_has_secondary() const;
  public:
  void clear_secondary();
  ::PROTOBUF_NAMESPACE_ID::uint64 secondary() const;
  void set_secondary(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_secondary() const;
  void _internal_set_secondary(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool flash = 3;
  bool has_flash() const;
  private:
  bool _internal_has_flash() const;
  public:
  void clear_flash();
  bool flash() const;
  void set_flash(bool value);
  private:
  bool _internal_flash() const;
  void _internal_set_flash(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 primary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 secondary_;
  bool flash_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class D769ConfigSeq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.D769ConfigSeq) */ {
 public:
  inline D769ConfigSeq() : D769ConfigSeq(nullptr) {}
  ~D769ConfigSeq() override;
  explicit constexpr D769ConfigSeq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D769ConfigSeq(const D769ConfigSeq& from);
  D769ConfigSeq(D769ConfigSeq&& from) noexcept
    : D769ConfigSeq() {
    *this = ::std::move(from);
  }

  inline D769ConfigSeq& operator=(const D769ConfigSeq& from) {
    CopyFrom(from);
    return *this;
  }
  inline D769ConfigSeq& operator=(D769ConfigSeq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D769ConfigSeq& default_instance() {
    return *internal_default_instance();
  }
  static inline const D769ConfigSeq* internal_default_instance() {
    return reinterpret_cast<const D769ConfigSeq*>(
               &_D769ConfigSeq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(D769ConfigSeq& a, D769ConfigSeq& b) {
    a.Swap(&b);
  }
  inline void Swap(D769ConfigSeq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D769ConfigSeq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline D769ConfigSeq* New() const final {
    return new D769ConfigSeq();
  }

  D769ConfigSeq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<D769ConfigSeq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const D769ConfigSeq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const D769ConfigSeq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D769ConfigSeq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.D769ConfigSeq";
  }
  protected:
  explicit D769ConfigSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.D769ConfigSeq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class Content final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.Content) */ {
 public:
  inline Content() : Content(nullptr) {}
  ~Content() override;
  explicit constexpr Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Content* New() const final {
    return new Content();
  }

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Content& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Content& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.Content";
  }
  protected:
  explicit Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 10,
    kTaskIdFieldNumber = 1,
    kCompressFieldNumber = 2,
  };
  // optional bytes content = 10;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint32 taskId = 1;
  bool has_taskid() const;
  private:
  bool _internal_has_taskid() const;
  public:
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 compress = 2;
  bool has_compress() const;
  private:
  bool _internal_has_compress() const;
  public:
  void clear_compress();
  ::PROTOBUF_NAMESPACE_ID::uint32 compress() const;
  void set_compress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compress() const;
  void _internal_set_compress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.Content)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compress_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class D769DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.D769DeviceInfo) */ {
 public:
  inline D769DeviceInfo() : D769DeviceInfo(nullptr) {}
  ~D769DeviceInfo() override;
  explicit constexpr D769DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D769DeviceInfo(const D769DeviceInfo& from);
  D769DeviceInfo(D769DeviceInfo&& from) noexcept
    : D769DeviceInfo() {
    *this = ::std::move(from);
  }

  inline D769DeviceInfo& operator=(const D769DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline D769DeviceInfo& operator=(D769DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D769DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const D769DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const D769DeviceInfo*>(
               &_D769DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(D769DeviceInfo& a, D769DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(D769DeviceInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D769DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline D769DeviceInfo* New() const final {
    return new D769DeviceInfo();
  }

  D769DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<D769DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const D769DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const D769DeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D769DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.D769DeviceInfo";
  }
  protected:
  explicit D769DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 1,
    kModelFieldNumber = 2,
    kOsFieldNumber = 3,
    kCpuFieldNumber = 4,
    kMemoryFieldNumber = 5,
    kStorageFieldNumber = 6,
    kScreenFieldNumber = 7,
    kCameraFieldNumber = 8,
  };
  // optional string brand = 1;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  const std::string& brand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brand();
  PROTOBUF_MUST_USE_RESULT std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // optional string model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional .oidb.C41219OS os = 3;
  bool has_os() const;
  private:
  bool _internal_has_os() const;
  public:
  void clear_os();
  const ::oidb::C41219OS& os() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::C41219OS* release_os();
  ::oidb::C41219OS* mutable_os();
  void set_allocated_os(::oidb::C41219OS* os);
  private:
  const ::oidb::C41219OS& _internal_os() const;
  ::oidb::C41219OS* _internal_mutable_os();
  public:
  void unsafe_arena_set_allocated_os(
      ::oidb::C41219OS* os);
  ::oidb::C41219OS* unsafe_arena_release_os();

  // optional .oidb.CPU cpu = 4;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  const ::oidb::CPU& cpu() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::CPU* release_cpu();
  ::oidb::CPU* mutable_cpu();
  void set_allocated_cpu(::oidb::CPU* cpu);
  private:
  const ::oidb::CPU& _internal_cpu() const;
  ::oidb::CPU* _internal_mutable_cpu();
  public:
  void unsafe_arena_set_allocated_cpu(
      ::oidb::CPU* cpu);
  ::oidb::CPU* unsafe_arena_release_cpu();

  // optional .oidb.Memory memory = 5;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::oidb::Memory& memory() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::Memory* release_memory();
  ::oidb::Memory* mutable_memory();
  void set_allocated_memory(::oidb::Memory* memory);
  private:
  const ::oidb::Memory& _internal_memory() const;
  ::oidb::Memory* _internal_mutable_memory();
  public:
  void unsafe_arena_set_allocated_memory(
      ::oidb::Memory* memory);
  ::oidb::Memory* unsafe_arena_release_memory();

  // optional .oidb.Storage storage = 6;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::oidb::Storage& storage() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::Storage* release_storage();
  ::oidb::Storage* mutable_storage();
  void set_allocated_storage(::oidb::Storage* storage);
  private:
  const ::oidb::Storage& _internal_storage() const;
  ::oidb::Storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::oidb::Storage* storage);
  ::oidb::Storage* unsafe_arena_release_storage();

  // optional .oidb.Screen screen = 7;
  bool has_screen() const;
  private:
  bool _internal_has_screen() const;
  public:
  void clear_screen();
  const ::oidb::Screen& screen() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::Screen* release_screen();
  ::oidb::Screen* mutable_screen();
  void set_allocated_screen(::oidb::Screen* screen);
  private:
  const ::oidb::Screen& _internal_screen() const;
  ::oidb::Screen* _internal_mutable_screen();
  public:
  void unsafe_arena_set_allocated_screen(
      ::oidb::Screen* screen);
  ::oidb::Screen* unsafe_arena_release_screen();

  // optional .oidb.Camera camera = 8;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::oidb::Camera& camera() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::Camera* release_camera();
  ::oidb::Camera* mutable_camera();
  void set_allocated_camera(::oidb::Camera* camera);
  private:
  const ::oidb::Camera& _internal_camera() const;
  ::oidb::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::oidb::Camera* camera);
  ::oidb::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:oidb.D769DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::oidb::C41219OS* os_;
  ::oidb::CPU* cpu_;
  ::oidb::Memory* memory_;
  ::oidb::Storage* storage_;
  ::oidb::Screen* screen_;
  ::oidb::Camera* camera_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class Memory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.Memory) */ {
 public:
  inline Memory() : Memory(nullptr) {}
  ~Memory() override;
  explicit constexpr Memory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Memory(const Memory& from);
  Memory(Memory&& from) noexcept
    : Memory() {
    *this = ::std::move(from);
  }

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memory& operator=(Memory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Memory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Memory& a, Memory& b) {
    a.Swap(&b);
  }
  inline void Swap(Memory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Memory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Memory* New() const final {
    return new Memory();
  }

  Memory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Memory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Memory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.Memory";
  }
  protected:
  explicit Memory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kProcessFieldNumber = 2,
  };
  // optional uint64 total = 1;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 process = 2;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  ::PROTOBUF_NAMESPACE_ID::uint64 process() const;
  void set_process(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_process() const;
  void _internal_set_process(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.Memory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 process_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class C41219OS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.C41219OS) */ {
 public:
  inline C41219OS() : C41219OS(nullptr) {}
  ~C41219OS() override;
  explicit constexpr C41219OS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C41219OS(const C41219OS& from);
  C41219OS(C41219OS&& from) noexcept
    : C41219OS() {
    *this = ::std::move(from);
  }

  inline C41219OS& operator=(const C41219OS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C41219OS& operator=(C41219OS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C41219OS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C41219OS* internal_default_instance() {
    return reinterpret_cast<const C41219OS*>(
               &_C41219OS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C41219OS& a, C41219OS& b) {
    a.Swap(&b);
  }
  inline void Swap(C41219OS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C41219OS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C41219OS* New() const final {
    return new C41219OS();
  }

  C41219OS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C41219OS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C41219OS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C41219OS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C41219OS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.C41219OS";
  }
  protected:
  explicit C41219OS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kSdkFieldNumber = 3,
    kKernelFieldNumber = 4,
    kRomFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string sdk = 3;
  bool has_sdk() const;
  private:
  bool _internal_has_sdk() const;
  public:
  void clear_sdk();
  const std::string& sdk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk();
  void set_allocated_sdk(std::string* sdk);
  private:
  const std::string& _internal_sdk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk(const std::string& value);
  std::string* _internal_mutable_sdk();
  public:

  // optional string kernel = 4;
  bool has_kernel() const;
  private:
  bool _internal_has_kernel() const;
  public:
  void clear_kernel();
  const std::string& kernel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kernel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kernel();
  PROTOBUF_MUST_USE_RESULT std::string* release_kernel();
  void set_allocated_kernel(std::string* kernel);
  private:
  const std::string& _internal_kernel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kernel(const std::string& value);
  std::string* _internal_mutable_kernel();
  public:

  // optional string rom = 5;
  bool has_rom() const;
  private:
  bool _internal_has_rom() const;
  public:
  void clear_rom();
  const std::string& rom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rom();
  PROTOBUF_MUST_USE_RESULT std::string* release_rom();
  void set_allocated_rom(std::string* rom);
  private:
  const std::string& _internal_rom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rom(const std::string& value);
  std::string* _internal_mutable_rom();
  public:

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.C41219OS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rom_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class QueryUinPackageUsageReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.QueryUinPackageUsageReq) */ {
 public:
  inline QueryUinPackageUsageReq() : QueryUinPackageUsageReq(nullptr) {}
  ~QueryUinPackageUsageReq() override;
  explicit constexpr QueryUinPackageUsageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUinPackageUsageReq(const QueryUinPackageUsageReq& from);
  QueryUinPackageUsageReq(QueryUinPackageUsageReq&& from) noexcept
    : QueryUinPackageUsageReq() {
    *this = ::std::move(from);
  }

  inline QueryUinPackageUsageReq& operator=(const QueryUinPackageUsageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUinPackageUsageReq& operator=(QueryUinPackageUsageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUinPackageUsageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUinPackageUsageReq* internal_default_instance() {
    return reinterpret_cast<const QueryUinPackageUsageReq*>(
               &_QueryUinPackageUsageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryUinPackageUsageReq& a, QueryUinPackageUsageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUinPackageUsageReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUinPackageUsageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryUinPackageUsageReq* New() const final {
    return new QueryUinPackageUsageReq();
  }

  QueryUinPackageUsageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryUinPackageUsageReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUinPackageUsageReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUinPackageUsageReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUinPackageUsageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.QueryUinPackageUsageReq";
  }
  protected:
  explicit QueryUinPackageUsageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFileSizeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional uint64 uinFileSize = 2;
  bool has_uinfilesize() const;
  private:
  bool _internal_has_uinfilesize() const;
  public:
  void clear_uinfilesize();
  ::PROTOBUF_NAMESPACE_ID::uint64 uinfilesize() const;
  void set_uinfilesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uinfilesize() const;
  void _internal_set_uinfilesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.QueryUinPackageUsageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uinfilesize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class QueryUinPackageUsageRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.QueryUinPackageUsageRsp) */ {
 public:
  inline QueryUinPackageUsageRsp() : QueryUinPackageUsageRsp(nullptr) {}
  ~QueryUinPackageUsageRsp() override;
  explicit constexpr QueryUinPackageUsageRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUinPackageUsageRsp(const QueryUinPackageUsageRsp& from);
  QueryUinPackageUsageRsp(QueryUinPackageUsageRsp&& from) noexcept
    : QueryUinPackageUsageRsp() {
    *this = ::std::move(from);
  }

  inline QueryUinPackageUsageRsp& operator=(const QueryUinPackageUsageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUinPackageUsageRsp& operator=(QueryUinPackageUsageRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUinPackageUsageRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUinPackageUsageRsp* internal_default_instance() {
    return reinterpret_cast<const QueryUinPackageUsageRsp*>(
               &_QueryUinPackageUsageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryUinPackageUsageRsp& a, QueryUinPackageUsageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUinPackageUsageRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUinPackageUsageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryUinPackageUsageRsp* New() const final {
    return new QueryUinPackageUsageRsp();
  }

  QueryUinPackageUsageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryUinPackageUsageRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUinPackageUsageRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUinPackageUsageRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUinPackageUsageRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.QueryUinPackageUsageRsp";
  }
  protected:
  explicit QueryUinPackageUsageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinPackageUsedListFieldNumber = 10,
    kLeftUinNumFieldNumber = 2,
    kStatusFieldNumber = 1,
    kProportionFieldNumber = 4,
    kMaxUinNumFieldNumber = 3,
  };
  // repeated .oidb.UinPackageUsedInfo uinPackageUsedList = 10;
  int uinpackageusedlist_size() const;
  private:
  int _internal_uinpackageusedlist_size() const;
  public:
  void clear_uinpackageusedlist();
  ::oidb::UinPackageUsedInfo* mutable_uinpackageusedlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::UinPackageUsedInfo >*
      mutable_uinpackageusedlist();
  private:
  const ::oidb::UinPackageUsedInfo& _internal_uinpackageusedlist(int index) const;
  ::oidb::UinPackageUsedInfo* _internal_add_uinpackageusedlist();
  public:
  const ::oidb::UinPackageUsedInfo& uinpackageusedlist(int index) const;
  ::oidb::UinPackageUsedInfo* add_uinpackageusedlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::UinPackageUsedInfo >&
      uinpackageusedlist() const;

  // optional uint64 leftUinNum = 2;
  bool has_leftuinnum() const;
  private:
  bool _internal_has_leftuinnum() const;
  public:
  void clear_leftuinnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 leftuinnum() const;
  void set_leftuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leftuinnum() const;
  void _internal_set_leftuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 proportion = 4;
  bool has_proportion() const;
  private:
  bool _internal_has_proportion() const;
  public:
  void clear_proportion();
  ::PROTOBUF_NAMESPACE_ID::uint32 proportion() const;
  void set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proportion() const;
  void _internal_set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 maxUinNum = 3;
  bool has_maxuinnum() const;
  private:
  bool _internal_has_maxuinnum() const;
  public:
  void clear_maxuinnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxuinnum() const;
  void set_maxuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxuinnum() const;
  void _internal_set_maxuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.QueryUinPackageUsageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::UinPackageUsedInfo > uinpackageusedlist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leftuinnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proportion_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxuinnum_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class D769ReqBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.D769ReqBody) */ {
 public:
  inline D769ReqBody() : D769ReqBody(nullptr) {}
  ~D769ReqBody() override;
  explicit constexpr D769ReqBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D769ReqBody(const D769ReqBody& from);
  D769ReqBody(D769ReqBody&& from) noexcept
    : D769ReqBody() {
    *this = ::std::move(from);
  }

  inline D769ReqBody& operator=(const D769ReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline D769ReqBody& operator=(D769ReqBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D769ReqBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const D769ReqBody* internal_default_instance() {
    return reinterpret_cast<const D769ReqBody*>(
               &_D769ReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(D769ReqBody& a, D769ReqBody& b) {
    a.Swap(&b);
  }
  inline void Swap(D769ReqBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D769ReqBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline D769ReqBody* New() const final {
    return new D769ReqBody();
  }

  D769ReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<D769ReqBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const D769ReqBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const D769ReqBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D769ReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.D769ReqBody";
  }
  protected:
  explicit D769ReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 1,
    kInfoFieldNumber = 3,
    kProvinceFieldNumber = 4,
    kCityFieldNumber = 5,
    kDeviceInfoFieldNumber = 2,
    kQueryUinPackageUsageReqFieldNumber = 101,
    kReqDebugMsgFieldNumber = 6,
  };
  // repeated .oidb.D769ConfigSeq configList = 1;
  int configlist_size() const;
  private:
  int _internal_configlist_size() const;
  public:
  void clear_configlist();
  ::oidb::D769ConfigSeq* mutable_configlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >*
      mutable_configlist();
  private:
  const ::oidb::D769ConfigSeq& _internal_configlist(int index) const;
  ::oidb::D769ConfigSeq* _internal_add_configlist();
  public:
  const ::oidb::D769ConfigSeq& configlist(int index) const;
  ::oidb::D769ConfigSeq* add_configlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >&
      configlist() const;

  // optional string info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional string province = 4;
  bool has_province() const;
  private:
  bool _internal_has_province() const;
  public:
  void clear_province();
  const std::string& province() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_province(ArgT0&& arg0, ArgT... args);
  std::string* mutable_province();
  PROTOBUF_MUST_USE_RESULT std::string* release_province();
  void set_allocated_province(std::string* province);
  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(const std::string& value);
  std::string* _internal_mutable_province();
  public:

  // optional string city = 5;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_MUST_USE_RESULT std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional .oidb.D769DeviceInfo deviceInfo = 2;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::oidb::D769DeviceInfo& deviceinfo() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::D769DeviceInfo* release_deviceinfo();
  ::oidb::D769DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::oidb::D769DeviceInfo* deviceinfo);
  private:
  const ::oidb::D769DeviceInfo& _internal_deviceinfo() const;
  ::oidb::D769DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::oidb::D769DeviceInfo* deviceinfo);
  ::oidb::D769DeviceInfo* unsafe_arena_release_deviceinfo();

  // optional .oidb.QueryUinPackageUsageReq queryUinPackageUsageReq = 101;
  bool has_queryuinpackageusagereq() const;
  private:
  bool _internal_has_queryuinpackageusagereq() const;
  public:
  void clear_queryuinpackageusagereq();
  const ::oidb::QueryUinPackageUsageReq& queryuinpackageusagereq() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::QueryUinPackageUsageReq* release_queryuinpackageusagereq();
  ::oidb::QueryUinPackageUsageReq* mutable_queryuinpackageusagereq();
  void set_allocated_queryuinpackageusagereq(::oidb::QueryUinPackageUsageReq* queryuinpackageusagereq);
  private:
  const ::oidb::QueryUinPackageUsageReq& _internal_queryuinpackageusagereq() const;
  ::oidb::QueryUinPackageUsageReq* _internal_mutable_queryuinpackageusagereq();
  public:
  void unsafe_arena_set_allocated_queryuinpackageusagereq(
      ::oidb::QueryUinPackageUsageReq* queryuinpackageusagereq);
  ::oidb::QueryUinPackageUsageReq* unsafe_arena_release_queryuinpackageusagereq();

  // optional int32 reqDebugMsg = 6;
  bool has_reqdebugmsg() const;
  private:
  bool _internal_has_reqdebugmsg() const;
  public:
  void clear_reqdebugmsg();
  ::PROTOBUF_NAMESPACE_ID::int32 reqdebugmsg() const;
  void set_reqdebugmsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqdebugmsg() const;
  void _internal_set_reqdebugmsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.D769ReqBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq > configlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::oidb::D769DeviceInfo* deviceinfo_;
  ::oidb::QueryUinPackageUsageReq* queryuinpackageusagereq_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqdebugmsg_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class D769RspBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.D769RspBody) */ {
 public:
  inline D769RspBody() : D769RspBody(nullptr) {}
  ~D769RspBody() override;
  explicit constexpr D769RspBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D769RspBody(const D769RspBody& from);
  D769RspBody(D769RspBody&& from) noexcept
    : D769RspBody() {
    *this = ::std::move(from);
  }

  inline D769RspBody& operator=(const D769RspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline D769RspBody& operator=(D769RspBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D769RspBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const D769RspBody* internal_default_instance() {
    return reinterpret_cast<const D769RspBody*>(
               &_D769RspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(D769RspBody& a, D769RspBody& b) {
    a.Swap(&b);
  }
  inline void Swap(D769RspBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D769RspBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline D769RspBody* New() const final {
    return new D769RspBody();
  }

  D769RspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<D769RspBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const D769RspBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const D769RspBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D769RspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.D769RspBody";
  }
  protected:
  explicit D769RspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 2,
    kQueryUinPackageUsageRspFieldNumber = 101,
    kResultFieldNumber = 1,
  };
  // repeated .oidb.D769ConfigSeq configList = 2;
  int configlist_size() const;
  private:
  int _internal_configlist_size() const;
  public:
  void clear_configlist();
  ::oidb::D769ConfigSeq* mutable_configlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >*
      mutable_configlist();
  private:
  const ::oidb::D769ConfigSeq& _internal_configlist(int index) const;
  ::oidb::D769ConfigSeq* _internal_add_configlist();
  public:
  const ::oidb::D769ConfigSeq& configlist(int index) const;
  ::oidb::D769ConfigSeq* add_configlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >&
      configlist() const;

  // optional .oidb.QueryUinPackageUsageRsp queryUinPackageUsageRsp = 101;
  bool has_queryuinpackageusagersp() const;
  private:
  bool _internal_has_queryuinpackageusagersp() const;
  public:
  void clear_queryuinpackageusagersp();
  const ::oidb::QueryUinPackageUsageRsp& queryuinpackageusagersp() const;
  PROTOBUF_MUST_USE_RESULT ::oidb::QueryUinPackageUsageRsp* release_queryuinpackageusagersp();
  ::oidb::QueryUinPackageUsageRsp* mutable_queryuinpackageusagersp();
  void set_allocated_queryuinpackageusagersp(::oidb::QueryUinPackageUsageRsp* queryuinpackageusagersp);
  private:
  const ::oidb::QueryUinPackageUsageRsp& _internal_queryuinpackageusagersp() const;
  ::oidb::QueryUinPackageUsageRsp* _internal_mutable_queryuinpackageusagersp();
  public:
  void unsafe_arena_set_allocated_queryuinpackageusagersp(
      ::oidb::QueryUinPackageUsageRsp* queryuinpackageusagersp);
  ::oidb::QueryUinPackageUsageRsp* unsafe_arena_release_queryuinpackageusagersp();

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.D769RspBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq > configlist_;
  ::oidb::QueryUinPackageUsageRsp* queryuinpackageusagersp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class Screen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.Screen) */ {
 public:
  inline Screen() : Screen(nullptr) {}
  ~Screen() override;
  explicit constexpr Screen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Screen(const Screen& from);
  Screen(Screen&& from) noexcept
    : Screen() {
    *this = ::std::move(from);
  }

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screen& operator=(Screen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Screen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Screen* internal_default_instance() {
    return reinterpret_cast<const Screen*>(
               &_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Screen& a, Screen& b) {
    a.Swap(&b);
  }
  inline void Swap(Screen* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Screen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Screen* New() const final {
    return new Screen();
  }

  Screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Screen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Screen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Screen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.Screen";
  }
  protected:
  explicit Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kDpiFieldNumber = 4,
    kMultiTouchFieldNumber = 5,
  };
  // optional string model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dpi = 4;
  bool has_dpi() const;
  private:
  bool _internal_has_dpi() const;
  public:
  void clear_dpi();
  ::PROTOBUF_NAMESPACE_ID::uint32 dpi() const;
  void set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dpi() const;
  void _internal_set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool multiTouch = 5;
  bool has_multitouch() const;
  private:
  bool _internal_has_multitouch() const;
  public:
  void clear_multitouch();
  bool multitouch() const;
  void set_multitouch(bool value);
  private:
  bool _internal_multitouch() const;
  void _internal_set_multitouch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.Screen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dpi_;
  bool multitouch_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class Storage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.Storage) */ {
 public:
  inline Storage() : Storage(nullptr) {}
  ~Storage() override;
  explicit constexpr Storage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Storage(const Storage& from);
  Storage(Storage&& from) noexcept
    : Storage() {
    *this = ::std::move(from);
  }

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Storage& operator=(Storage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Storage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Storage* internal_default_instance() {
    return reinterpret_cast<const Storage*>(
               &_Storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Storage& a, Storage& b) {
    a.Swap(&b);
  }
  inline void Swap(Storage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Storage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Storage* New() const final {
    return new Storage();
  }

  Storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Storage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Storage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Storage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Storage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.Storage";
  }
  protected:
  explicit Storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuiltinFieldNumber = 1,
    kExternalFieldNumber = 2,
  };
  // optional uint64 builtin = 1;
  bool has_builtin() const;
  private:
  bool _internal_has_builtin() const;
  public:
  void clear_builtin();
  ::PROTOBUF_NAMESPACE_ID::uint64 builtin() const;
  void set_builtin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_builtin() const;
  void _internal_set_builtin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 external = 2;
  bool has_external() const;
  private:
  bool _internal_has_external() const;
  public:
  void clear_external();
  ::PROTOBUF_NAMESPACE_ID::uint64 external() const;
  void set_external(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_external() const;
  void _internal_set_external(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.Storage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 builtin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 external_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// -------------------------------------------------------------------

class UinPackageUsedInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oidb.UinPackageUsedInfo) */ {
 public:
  inline UinPackageUsedInfo() : UinPackageUsedInfo(nullptr) {}
  ~UinPackageUsedInfo() override;
  explicit constexpr UinPackageUsedInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UinPackageUsedInfo(const UinPackageUsedInfo& from);
  UinPackageUsedInfo(UinPackageUsedInfo&& from) noexcept
    : UinPackageUsedInfo() {
    *this = ::std::move(from);
  }

  inline UinPackageUsedInfo& operator=(const UinPackageUsedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UinPackageUsedInfo& operator=(UinPackageUsedInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UinPackageUsedInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UinPackageUsedInfo* internal_default_instance() {
    return reinterpret_cast<const UinPackageUsedInfo*>(
               &_UinPackageUsedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UinPackageUsedInfo& a, UinPackageUsedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UinPackageUsedInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UinPackageUsedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UinPackageUsedInfo* New() const final {
    return new UinPackageUsedInfo();
  }

  UinPackageUsedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UinPackageUsedInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UinPackageUsedInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UinPackageUsedInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UinPackageUsedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oidb.UinPackageUsedInfo";
  }
  protected:
  explicit UinPackageUsedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 2,
    kUrlFieldNumber = 3,
    kUinNumFieldNumber = 4,
    kRuleIdFieldNumber = 1,
  };
  // optional string author = 2;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_MUST_USE_RESULT std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint64 uinNum = 4;
  bool has_uinnum() const;
  private:
  bool _internal_has_uinnum() const;
  public:
  void clear_uinnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 uinnum() const;
  void set_uinnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uinnum() const;
  void _internal_set_uinnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ruleId = 1;
  bool has_ruleid() const;
  private:
  bool _internal_has_ruleid() const;
  public:
  void clear_ruleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ruleid() const;
  void set_ruleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ruleid() const;
  void _internal_set_ruleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:oidb.UinPackageUsedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uinnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ruleid_;
  friend struct ::TableStruct_oidb0x769_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPU

// optional string model = 1;
inline bool CPU::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPU::has_model() const {
  return _internal_has_model();
}
inline void CPU::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPU::model() const {
  // @@protoc_insertion_point(field_get:oidb.CPU.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPU::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.CPU.model)
}
inline std::string* CPU::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:oidb.CPU.model)
  return _s;
}
inline const std::string& CPU::_internal_model() const {
  return model_.Get();
}
inline void CPU::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPU::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000001u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPU::release_model() {
  // @@protoc_insertion_point(field_release:oidb.CPU.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CPU::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.CPU.model)
}

// optional uint32 cores = 2;
inline bool CPU::_internal_has_cores() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPU::has_cores() const {
  return _internal_has_cores();
}
inline void CPU::clear_cores() {
  cores_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPU::_internal_cores() const {
  return cores_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPU::cores() const {
  // @@protoc_insertion_point(field_get:oidb.CPU.cores)
  return _internal_cores();
}
inline void CPU::_internal_set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cores_ = value;
}
inline void CPU::set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cores(value);
  // @@protoc_insertion_point(field_set:oidb.CPU.cores)
}

// optional uint32 frequency = 3;
inline bool CPU::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPU::has_frequency() const {
  return _internal_has_frequency();
}
inline void CPU::clear_frequency() {
  frequency_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPU::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPU::frequency() const {
  // @@protoc_insertion_point(field_get:oidb.CPU.frequency)
  return _internal_frequency();
}
inline void CPU::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  frequency_ = value;
}
inline void CPU::set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:oidb.CPU.frequency)
}

// -------------------------------------------------------------------

// Camera

// optional uint64 primary = 1;
inline bool Camera::_internal_has_primary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Camera::has_primary() const {
  return _internal_has_primary();
}
inline void Camera::clear_primary() {
  primary_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Camera::_internal_primary() const {
  return primary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Camera::primary() const {
  // @@protoc_insertion_point(field_get:oidb.Camera.primary)
  return _internal_primary();
}
inline void Camera::_internal_set_primary(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  primary_ = value;
}
inline void Camera::set_primary(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:oidb.Camera.primary)
}

// optional uint64 secondary = 2;
inline bool Camera::_internal_has_secondary() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Camera::has_secondary() const {
  return _internal_has_secondary();
}
inline void Camera::clear_secondary() {
  secondary_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Camera::_internal_secondary() const {
  return secondary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Camera::secondary() const {
  // @@protoc_insertion_point(field_get:oidb.Camera.secondary)
  return _internal_secondary();
}
inline void Camera::_internal_set_secondary(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  secondary_ = value;
}
inline void Camera::set_secondary(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_secondary(value);
  // @@protoc_insertion_point(field_set:oidb.Camera.secondary)
}

// optional bool flash = 3;
inline bool Camera::_internal_has_flash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Camera::has_flash() const {
  return _internal_has_flash();
}
inline void Camera::clear_flash() {
  flash_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Camera::_internal_flash() const {
  return flash_;
}
inline bool Camera::flash() const {
  // @@protoc_insertion_point(field_get:oidb.Camera.flash)
  return _internal_flash();
}
inline void Camera::_internal_set_flash(bool value) {
  _has_bits_[0] |= 0x00000004u;
  flash_ = value;
}
inline void Camera::set_flash(bool value) {
  _internal_set_flash(value);
  // @@protoc_insertion_point(field_set:oidb.Camera.flash)
}

// -------------------------------------------------------------------

// D769ConfigSeq

// optional uint32 type = 1;
inline bool D769ConfigSeq::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool D769ConfigSeq::has_type() const {
  return _internal_has_type();
}
inline void D769ConfigSeq::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 D769ConfigSeq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 D769ConfigSeq::type() const {
  // @@protoc_insertion_point(field_get:oidb.D769ConfigSeq.type)
  return _internal_type();
}
inline void D769ConfigSeq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void D769ConfigSeq::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oidb.D769ConfigSeq.type)
}

// optional uint32 version = 2;
inline bool D769ConfigSeq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool D769ConfigSeq::has_version() const {
  return _internal_has_version();
}
inline void D769ConfigSeq::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 D769ConfigSeq::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 D769ConfigSeq::version() const {
  // @@protoc_insertion_point(field_get:oidb.D769ConfigSeq.version)
  return _internal_version();
}
inline void D769ConfigSeq::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void D769ConfigSeq::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:oidb.D769ConfigSeq.version)
}

// -------------------------------------------------------------------

// Content

// optional uint32 taskId = 1;
inline bool Content::_internal_has_taskid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Content::has_taskid() const {
  return _internal_has_taskid();
}
inline void Content::clear_taskid() {
  taskid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Content::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Content::taskid() const {
  // @@protoc_insertion_point(field_get:oidb.Content.taskId)
  return _internal_taskid();
}
inline void Content::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  taskid_ = value;
}
inline void Content::set_taskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:oidb.Content.taskId)
}

// optional uint32 compress = 2;
inline bool Content::_internal_has_compress() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Content::has_compress() const {
  return _internal_has_compress();
}
inline void Content::clear_compress() {
  compress_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Content::_internal_compress() const {
  return compress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Content::compress() const {
  // @@protoc_insertion_point(field_get:oidb.Content.compress)
  return _internal_compress();
}
inline void Content::_internal_set_compress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  compress_ = value;
}
inline void Content::set_compress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compress(value);
  // @@protoc_insertion_point(field_set:oidb.Content.compress)
}

// optional bytes content = 10;
inline bool Content::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Content::has_content() const {
  return _internal_has_content();
}
inline void Content::clear_content() {
  content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Content::content() const {
  // @@protoc_insertion_point(field_get:oidb.Content.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Content::set_content(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.Content.content)
}
inline std::string* Content::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:oidb.Content.content)
  return _s;
}
inline const std::string& Content::_internal_content() const {
  return content_.Get();
}
inline void Content::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Content::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Content::release_content() {
  // @@protoc_insertion_point(field_release:oidb.Content.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Content::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.Content.content)
}

// -------------------------------------------------------------------

// D769DeviceInfo

// optional string brand = 1;
inline bool D769DeviceInfo::_internal_has_brand() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool D769DeviceInfo::has_brand() const {
  return _internal_has_brand();
}
inline void D769DeviceInfo::clear_brand() {
  brand_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& D769DeviceInfo::brand() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.brand)
  return _internal_brand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void D769DeviceInfo::set_brand(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.D769DeviceInfo.brand)
}
inline std::string* D769DeviceInfo::mutable_brand() {
  std::string* _s = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.brand)
  return _s;
}
inline const std::string& D769DeviceInfo::_internal_brand() const {
  return brand_.Get();
}
inline void D769DeviceInfo::_internal_set_brand(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* D769DeviceInfo::_internal_mutable_brand() {
  _has_bits_[0] |= 0x00000001u;
  return brand_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* D769DeviceInfo::release_brand() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.brand)
  if (!_internal_has_brand()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return brand_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void D769DeviceInfo::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.brand)
}

// optional string model = 2;
inline bool D769DeviceInfo::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool D769DeviceInfo::has_model() const {
  return _internal_has_model();
}
inline void D769DeviceInfo::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& D769DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void D769DeviceInfo::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.D769DeviceInfo.model)
}
inline std::string* D769DeviceInfo::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.model)
  return _s;
}
inline const std::string& D769DeviceInfo::_internal_model() const {
  return model_.Get();
}
inline void D769DeviceInfo::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* D769DeviceInfo::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* D769DeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void D769DeviceInfo::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.model)
}

// optional .oidb.C41219OS os = 3;
inline bool D769DeviceInfo::_internal_has_os() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || os_ != nullptr);
  return value;
}
inline bool D769DeviceInfo::has_os() const {
  return _internal_has_os();
}
inline void D769DeviceInfo::clear_os() {
  if (os_ != nullptr) os_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::oidb::C41219OS& D769DeviceInfo::_internal_os() const {
  const ::oidb::C41219OS* p = os_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::C41219OS&>(
      ::oidb::_C41219OS_default_instance_);
}
inline const ::oidb::C41219OS& D769DeviceInfo::os() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.os)
  return _internal_os();
}
inline void D769DeviceInfo::unsafe_arena_set_allocated_os(
    ::oidb::C41219OS* os) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(os_);
  }
  os_ = os;
  if (os) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769DeviceInfo.os)
}
inline ::oidb::C41219OS* D769DeviceInfo::release_os() {
  _has_bits_[0] &= ~0x00000004u;
  ::oidb::C41219OS* temp = os_;
  os_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::C41219OS* D769DeviceInfo::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.os)
  _has_bits_[0] &= ~0x00000004u;
  ::oidb::C41219OS* temp = os_;
  os_ = nullptr;
  return temp;
}
inline ::oidb::C41219OS* D769DeviceInfo::_internal_mutable_os() {
  _has_bits_[0] |= 0x00000004u;
  if (os_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::C41219OS>(GetArenaForAllocation());
    os_ = p;
  }
  return os_;
}
inline ::oidb::C41219OS* D769DeviceInfo::mutable_os() {
  ::oidb::C41219OS* _msg = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.os)
  return _msg;
}
inline void D769DeviceInfo::set_allocated_os(::oidb::C41219OS* os) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete os_;
  }
  if (os) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::C41219OS>::GetOwningArena(os);
    if (message_arena != submessage_arena) {
      os = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  os_ = os;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.os)
}

// optional .oidb.CPU cpu = 4;
inline bool D769DeviceInfo::_internal_has_cpu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || cpu_ != nullptr);
  return value;
}
inline bool D769DeviceInfo::has_cpu() const {
  return _internal_has_cpu();
}
inline void D769DeviceInfo::clear_cpu() {
  if (cpu_ != nullptr) cpu_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::oidb::CPU& D769DeviceInfo::_internal_cpu() const {
  const ::oidb::CPU* p = cpu_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::CPU&>(
      ::oidb::_CPU_default_instance_);
}
inline const ::oidb::CPU& D769DeviceInfo::cpu() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.cpu)
  return _internal_cpu();
}
inline void D769DeviceInfo::unsafe_arena_set_allocated_cpu(
    ::oidb::CPU* cpu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_);
  }
  cpu_ = cpu;
  if (cpu) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769DeviceInfo.cpu)
}
inline ::oidb::CPU* D769DeviceInfo::release_cpu() {
  _has_bits_[0] &= ~0x00000008u;
  ::oidb::CPU* temp = cpu_;
  cpu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::CPU* D769DeviceInfo::unsafe_arena_release_cpu() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.cpu)
  _has_bits_[0] &= ~0x00000008u;
  ::oidb::CPU* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::oidb::CPU* D769DeviceInfo::_internal_mutable_cpu() {
  _has_bits_[0] |= 0x00000008u;
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::CPU>(GetArenaForAllocation());
    cpu_ = p;
  }
  return cpu_;
}
inline ::oidb::CPU* D769DeviceInfo::mutable_cpu() {
  ::oidb::CPU* _msg = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.cpu)
  return _msg;
}
inline void D769DeviceInfo::set_allocated_cpu(::oidb::CPU* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::CPU>::GetOwningArena(cpu);
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.cpu)
}

// optional .oidb.Memory memory = 5;
inline bool D769DeviceInfo::_internal_has_memory() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || memory_ != nullptr);
  return value;
}
inline bool D769DeviceInfo::has_memory() const {
  return _internal_has_memory();
}
inline void D769DeviceInfo::clear_memory() {
  if (memory_ != nullptr) memory_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::oidb::Memory& D769DeviceInfo::_internal_memory() const {
  const ::oidb::Memory* p = memory_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::Memory&>(
      ::oidb::_Memory_default_instance_);
}
inline const ::oidb::Memory& D769DeviceInfo::memory() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.memory)
  return _internal_memory();
}
inline void D769DeviceInfo::unsafe_arena_set_allocated_memory(
    ::oidb::Memory* memory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_);
  }
  memory_ = memory;
  if (memory) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769DeviceInfo.memory)
}
inline ::oidb::Memory* D769DeviceInfo::release_memory() {
  _has_bits_[0] &= ~0x00000010u;
  ::oidb::Memory* temp = memory_;
  memory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::Memory* D769DeviceInfo::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.memory)
  _has_bits_[0] &= ~0x00000010u;
  ::oidb::Memory* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::oidb::Memory* D769DeviceInfo::_internal_mutable_memory() {
  _has_bits_[0] |= 0x00000010u;
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::Memory>(GetArenaForAllocation());
    memory_ = p;
  }
  return memory_;
}
inline ::oidb::Memory* D769DeviceInfo::mutable_memory() {
  ::oidb::Memory* _msg = _internal_mutable_memory();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.memory)
  return _msg;
}
inline void D769DeviceInfo::set_allocated_memory(::oidb::Memory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::Memory>::GetOwningArena(memory);
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.memory)
}

// optional .oidb.Storage storage = 6;
inline bool D769DeviceInfo::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool D769DeviceInfo::has_storage() const {
  return _internal_has_storage();
}
inline void D769DeviceInfo::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::oidb::Storage& D769DeviceInfo::_internal_storage() const {
  const ::oidb::Storage* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::Storage&>(
      ::oidb::_Storage_default_instance_);
}
inline const ::oidb::Storage& D769DeviceInfo::storage() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.storage)
  return _internal_storage();
}
inline void D769DeviceInfo::unsafe_arena_set_allocated_storage(
    ::oidb::Storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769DeviceInfo.storage)
}
inline ::oidb::Storage* D769DeviceInfo::release_storage() {
  _has_bits_[0] &= ~0x00000020u;
  ::oidb::Storage* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::Storage* D769DeviceInfo::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.storage)
  _has_bits_[0] &= ~0x00000020u;
  ::oidb::Storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::oidb::Storage* D769DeviceInfo::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000020u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::Storage>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::oidb::Storage* D769DeviceInfo::mutable_storage() {
  ::oidb::Storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.storage)
  return _msg;
}
inline void D769DeviceInfo::set_allocated_storage(::oidb::Storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::Storage>::GetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.storage)
}

// optional .oidb.Screen screen = 7;
inline bool D769DeviceInfo::_internal_has_screen() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || screen_ != nullptr);
  return value;
}
inline bool D769DeviceInfo::has_screen() const {
  return _internal_has_screen();
}
inline void D769DeviceInfo::clear_screen() {
  if (screen_ != nullptr) screen_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::oidb::Screen& D769DeviceInfo::_internal_screen() const {
  const ::oidb::Screen* p = screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::Screen&>(
      ::oidb::_Screen_default_instance_);
}
inline const ::oidb::Screen& D769DeviceInfo::screen() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.screen)
  return _internal_screen();
}
inline void D769DeviceInfo::unsafe_arena_set_allocated_screen(
    ::oidb::Screen* screen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_);
  }
  screen_ = screen;
  if (screen) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769DeviceInfo.screen)
}
inline ::oidb::Screen* D769DeviceInfo::release_screen() {
  _has_bits_[0] &= ~0x00000040u;
  ::oidb::Screen* temp = screen_;
  screen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::Screen* D769DeviceInfo::unsafe_arena_release_screen() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.screen)
  _has_bits_[0] &= ~0x00000040u;
  ::oidb::Screen* temp = screen_;
  screen_ = nullptr;
  return temp;
}
inline ::oidb::Screen* D769DeviceInfo::_internal_mutable_screen() {
  _has_bits_[0] |= 0x00000040u;
  if (screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::Screen>(GetArenaForAllocation());
    screen_ = p;
  }
  return screen_;
}
inline ::oidb::Screen* D769DeviceInfo::mutable_screen() {
  ::oidb::Screen* _msg = _internal_mutable_screen();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.screen)
  return _msg;
}
inline void D769DeviceInfo::set_allocated_screen(::oidb::Screen* screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete screen_;
  }
  if (screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::Screen>::GetOwningArena(screen);
    if (message_arena != submessage_arena) {
      screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  screen_ = screen;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.screen)
}

// optional .oidb.Camera camera = 8;
inline bool D769DeviceInfo::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || camera_ != nullptr);
  return value;
}
inline bool D769DeviceInfo::has_camera() const {
  return _internal_has_camera();
}
inline void D769DeviceInfo::clear_camera() {
  if (camera_ != nullptr) camera_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::oidb::Camera& D769DeviceInfo::_internal_camera() const {
  const ::oidb::Camera* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::Camera&>(
      ::oidb::_Camera_default_instance_);
}
inline const ::oidb::Camera& D769DeviceInfo::camera() const {
  // @@protoc_insertion_point(field_get:oidb.D769DeviceInfo.camera)
  return _internal_camera();
}
inline void D769DeviceInfo::unsafe_arena_set_allocated_camera(
    ::oidb::Camera* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769DeviceInfo.camera)
}
inline ::oidb::Camera* D769DeviceInfo::release_camera() {
  _has_bits_[0] &= ~0x00000080u;
  ::oidb::Camera* temp = camera_;
  camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::Camera* D769DeviceInfo::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:oidb.D769DeviceInfo.camera)
  _has_bits_[0] &= ~0x00000080u;
  ::oidb::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::oidb::Camera* D769DeviceInfo::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000080u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::Camera>(GetArenaForAllocation());
    camera_ = p;
  }
  return camera_;
}
inline ::oidb::Camera* D769DeviceInfo::mutable_camera() {
  ::oidb::Camera* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:oidb.D769DeviceInfo.camera)
  return _msg;
}
inline void D769DeviceInfo::set_allocated_camera(::oidb::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::Camera>::GetOwningArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769DeviceInfo.camera)
}

// -------------------------------------------------------------------

// Memory

// optional uint64 total = 1;
inline bool Memory::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Memory::has_total() const {
  return _internal_has_total();
}
inline void Memory::clear_total() {
  total_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::total() const {
  // @@protoc_insertion_point(field_get:oidb.Memory.total)
  return _internal_total();
}
inline void Memory::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
}
inline void Memory::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:oidb.Memory.total)
}

// optional uint64 process = 2;
inline bool Memory::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Memory::has_process() const {
  return _internal_has_process();
}
inline void Memory::clear_process() {
  process_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::_internal_process() const {
  return process_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::process() const {
  // @@protoc_insertion_point(field_get:oidb.Memory.process)
  return _internal_process();
}
inline void Memory::_internal_set_process(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  process_ = value;
}
inline void Memory::set_process(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:oidb.Memory.process)
}

// -------------------------------------------------------------------

// C41219OS

// optional uint32 type = 1;
inline bool C41219OS::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool C41219OS::has_type() const {
  return _internal_has_type();
}
inline void C41219OS::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C41219OS::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C41219OS::type() const {
  // @@protoc_insertion_point(field_get:oidb.C41219OS.type)
  return _internal_type();
}
inline void C41219OS::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void C41219OS::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oidb.C41219OS.type)
}

// optional string version = 2;
inline bool C41219OS::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool C41219OS::has_version() const {
  return _internal_has_version();
}
inline void C41219OS::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& C41219OS::version() const {
  // @@protoc_insertion_point(field_get:oidb.C41219OS.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C41219OS::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.C41219OS.version)
}
inline std::string* C41219OS::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:oidb.C41219OS.version)
  return _s;
}
inline const std::string& C41219OS::_internal_version() const {
  return version_.Get();
}
inline void C41219OS::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C41219OS::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C41219OS::release_version() {
  // @@protoc_insertion_point(field_release:oidb.C41219OS.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C41219OS::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.C41219OS.version)
}

// optional string sdk = 3;
inline bool C41219OS::_internal_has_sdk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool C41219OS::has_sdk() const {
  return _internal_has_sdk();
}
inline void C41219OS::clear_sdk() {
  sdk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& C41219OS::sdk() const {
  // @@protoc_insertion_point(field_get:oidb.C41219OS.sdk)
  return _internal_sdk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C41219OS::set_sdk(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sdk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.C41219OS.sdk)
}
inline std::string* C41219OS::mutable_sdk() {
  std::string* _s = _internal_mutable_sdk();
  // @@protoc_insertion_point(field_mutable:oidb.C41219OS.sdk)
  return _s;
}
inline const std::string& C41219OS::_internal_sdk() const {
  return sdk_.Get();
}
inline void C41219OS::_internal_set_sdk(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sdk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C41219OS::_internal_mutable_sdk() {
  _has_bits_[0] |= 0x00000002u;
  return sdk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C41219OS::release_sdk() {
  // @@protoc_insertion_point(field_release:oidb.C41219OS.sdk)
  if (!_internal_has_sdk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sdk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C41219OS::set_allocated_sdk(std::string* sdk) {
  if (sdk != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sdk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.C41219OS.sdk)
}

// optional string kernel = 4;
inline bool C41219OS::_internal_has_kernel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool C41219OS::has_kernel() const {
  return _internal_has_kernel();
}
inline void C41219OS::clear_kernel() {
  kernel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& C41219OS::kernel() const {
  // @@protoc_insertion_point(field_get:oidb.C41219OS.kernel)
  return _internal_kernel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C41219OS::set_kernel(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 kernel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.C41219OS.kernel)
}
inline std::string* C41219OS::mutable_kernel() {
  std::string* _s = _internal_mutable_kernel();
  // @@protoc_insertion_point(field_mutable:oidb.C41219OS.kernel)
  return _s;
}
inline const std::string& C41219OS::_internal_kernel() const {
  return kernel_.Get();
}
inline void C41219OS::_internal_set_kernel(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  kernel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C41219OS::_internal_mutable_kernel() {
  _has_bits_[0] |= 0x00000004u;
  return kernel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C41219OS::release_kernel() {
  // @@protoc_insertion_point(field_release:oidb.C41219OS.kernel)
  if (!_internal_has_kernel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return kernel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C41219OS::set_allocated_kernel(std::string* kernel) {
  if (kernel != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kernel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.C41219OS.kernel)
}

// optional string rom = 5;
inline bool C41219OS::_internal_has_rom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool C41219OS::has_rom() const {
  return _internal_has_rom();
}
inline void C41219OS::clear_rom() {
  rom_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& C41219OS::rom() const {
  // @@protoc_insertion_point(field_get:oidb.C41219OS.rom)
  return _internal_rom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C41219OS::set_rom(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 rom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.C41219OS.rom)
}
inline std::string* C41219OS::mutable_rom() {
  std::string* _s = _internal_mutable_rom();
  // @@protoc_insertion_point(field_mutable:oidb.C41219OS.rom)
  return _s;
}
inline const std::string& C41219OS::_internal_rom() const {
  return rom_.Get();
}
inline void C41219OS::_internal_set_rom(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  rom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C41219OS::_internal_mutable_rom() {
  _has_bits_[0] |= 0x00000008u;
  return rom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C41219OS::release_rom() {
  // @@protoc_insertion_point(field_release:oidb.C41219OS.rom)
  if (!_internal_has_rom()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return rom_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C41219OS::set_allocated_rom(std::string* rom) {
  if (rom != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rom,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.C41219OS.rom)
}

// -------------------------------------------------------------------

// QueryUinPackageUsageReq

// optional uint32 type = 1;
inline bool QueryUinPackageUsageReq::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryUinPackageUsageReq::has_type() const {
  return _internal_has_type();
}
inline void QueryUinPackageUsageReq::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUinPackageUsageReq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUinPackageUsageReq::type() const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageReq.type)
  return _internal_type();
}
inline void QueryUinPackageUsageReq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void QueryUinPackageUsageReq::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oidb.QueryUinPackageUsageReq.type)
}

// optional uint64 uinFileSize = 2;
inline bool QueryUinPackageUsageReq::_internal_has_uinfilesize() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryUinPackageUsageReq::has_uinfilesize() const {
  return _internal_has_uinfilesize();
}
inline void QueryUinPackageUsageReq::clear_uinfilesize() {
  uinfilesize_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryUinPackageUsageReq::_internal_uinfilesize() const {
  return uinfilesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryUinPackageUsageReq::uinfilesize() const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageReq.uinFileSize)
  return _internal_uinfilesize();
}
inline void QueryUinPackageUsageReq::_internal_set_uinfilesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  uinfilesize_ = value;
}
inline void QueryUinPackageUsageReq::set_uinfilesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uinfilesize(value);
  // @@protoc_insertion_point(field_set:oidb.QueryUinPackageUsageReq.uinFileSize)
}

// -------------------------------------------------------------------

// QueryUinPackageUsageRsp

// optional uint32 status = 1;
inline bool QueryUinPackageUsageRsp::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryUinPackageUsageRsp::has_status() const {
  return _internal_has_status();
}
inline void QueryUinPackageUsageRsp::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUinPackageUsageRsp::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUinPackageUsageRsp::status() const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageRsp.status)
  return _internal_status();
}
inline void QueryUinPackageUsageRsp::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void QueryUinPackageUsageRsp::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:oidb.QueryUinPackageUsageRsp.status)
}

// optional uint64 leftUinNum = 2;
inline bool QueryUinPackageUsageRsp::_internal_has_leftuinnum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryUinPackageUsageRsp::has_leftuinnum() const {
  return _internal_has_leftuinnum();
}
inline void QueryUinPackageUsageRsp::clear_leftuinnum() {
  leftuinnum_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryUinPackageUsageRsp::_internal_leftuinnum() const {
  return leftuinnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryUinPackageUsageRsp::leftuinnum() const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageRsp.leftUinNum)
  return _internal_leftuinnum();
}
inline void QueryUinPackageUsageRsp::_internal_set_leftuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  leftuinnum_ = value;
}
inline void QueryUinPackageUsageRsp::set_leftuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leftuinnum(value);
  // @@protoc_insertion_point(field_set:oidb.QueryUinPackageUsageRsp.leftUinNum)
}

// optional uint64 maxUinNum = 3;
inline bool QueryUinPackageUsageRsp::_internal_has_maxuinnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QueryUinPackageUsageRsp::has_maxuinnum() const {
  return _internal_has_maxuinnum();
}
inline void QueryUinPackageUsageRsp::clear_maxuinnum() {
  maxuinnum_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryUinPackageUsageRsp::_internal_maxuinnum() const {
  return maxuinnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryUinPackageUsageRsp::maxuinnum() const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageRsp.maxUinNum)
  return _internal_maxuinnum();
}
inline void QueryUinPackageUsageRsp::_internal_set_maxuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  maxuinnum_ = value;
}
inline void QueryUinPackageUsageRsp::set_maxuinnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxuinnum(value);
  // @@protoc_insertion_point(field_set:oidb.QueryUinPackageUsageRsp.maxUinNum)
}

// optional uint32 proportion = 4;
inline bool QueryUinPackageUsageRsp::_internal_has_proportion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QueryUinPackageUsageRsp::has_proportion() const {
  return _internal_has_proportion();
}
inline void QueryUinPackageUsageRsp::clear_proportion() {
  proportion_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUinPackageUsageRsp::_internal_proportion() const {
  return proportion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUinPackageUsageRsp::proportion() const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageRsp.proportion)
  return _internal_proportion();
}
inline void QueryUinPackageUsageRsp::_internal_set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  proportion_ = value;
}
inline void QueryUinPackageUsageRsp::set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proportion(value);
  // @@protoc_insertion_point(field_set:oidb.QueryUinPackageUsageRsp.proportion)
}

// repeated .oidb.UinPackageUsedInfo uinPackageUsedList = 10;
inline int QueryUinPackageUsageRsp::_internal_uinpackageusedlist_size() const {
  return uinpackageusedlist_.size();
}
inline int QueryUinPackageUsageRsp::uinpackageusedlist_size() const {
  return _internal_uinpackageusedlist_size();
}
inline void QueryUinPackageUsageRsp::clear_uinpackageusedlist() {
  uinpackageusedlist_.Clear();
}
inline ::oidb::UinPackageUsedInfo* QueryUinPackageUsageRsp::mutable_uinpackageusedlist(int index) {
  // @@protoc_insertion_point(field_mutable:oidb.QueryUinPackageUsageRsp.uinPackageUsedList)
  return uinpackageusedlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::UinPackageUsedInfo >*
QueryUinPackageUsageRsp::mutable_uinpackageusedlist() {
  // @@protoc_insertion_point(field_mutable_list:oidb.QueryUinPackageUsageRsp.uinPackageUsedList)
  return &uinpackageusedlist_;
}
inline const ::oidb::UinPackageUsedInfo& QueryUinPackageUsageRsp::_internal_uinpackageusedlist(int index) const {
  return uinpackageusedlist_.Get(index);
}
inline const ::oidb::UinPackageUsedInfo& QueryUinPackageUsageRsp::uinpackageusedlist(int index) const {
  // @@protoc_insertion_point(field_get:oidb.QueryUinPackageUsageRsp.uinPackageUsedList)
  return _internal_uinpackageusedlist(index);
}
inline ::oidb::UinPackageUsedInfo* QueryUinPackageUsageRsp::_internal_add_uinpackageusedlist() {
  return uinpackageusedlist_.Add();
}
inline ::oidb::UinPackageUsedInfo* QueryUinPackageUsageRsp::add_uinpackageusedlist() {
  ::oidb::UinPackageUsedInfo* _add = _internal_add_uinpackageusedlist();
  // @@protoc_insertion_point(field_add:oidb.QueryUinPackageUsageRsp.uinPackageUsedList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::UinPackageUsedInfo >&
QueryUinPackageUsageRsp::uinpackageusedlist() const {
  // @@protoc_insertion_point(field_list:oidb.QueryUinPackageUsageRsp.uinPackageUsedList)
  return uinpackageusedlist_;
}

// -------------------------------------------------------------------

// D769ReqBody

// repeated .oidb.D769ConfigSeq configList = 1;
inline int D769ReqBody::_internal_configlist_size() const {
  return configlist_.size();
}
inline int D769ReqBody::configlist_size() const {
  return _internal_configlist_size();
}
inline void D769ReqBody::clear_configlist() {
  configlist_.Clear();
}
inline ::oidb::D769ConfigSeq* D769ReqBody::mutable_configlist(int index) {
  // @@protoc_insertion_point(field_mutable:oidb.D769ReqBody.configList)
  return configlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >*
D769ReqBody::mutable_configlist() {
  // @@protoc_insertion_point(field_mutable_list:oidb.D769ReqBody.configList)
  return &configlist_;
}
inline const ::oidb::D769ConfigSeq& D769ReqBody::_internal_configlist(int index) const {
  return configlist_.Get(index);
}
inline const ::oidb::D769ConfigSeq& D769ReqBody::configlist(int index) const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.configList)
  return _internal_configlist(index);
}
inline ::oidb::D769ConfigSeq* D769ReqBody::_internal_add_configlist() {
  return configlist_.Add();
}
inline ::oidb::D769ConfigSeq* D769ReqBody::add_configlist() {
  ::oidb::D769ConfigSeq* _add = _internal_add_configlist();
  // @@protoc_insertion_point(field_add:oidb.D769ReqBody.configList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >&
D769ReqBody::configlist() const {
  // @@protoc_insertion_point(field_list:oidb.D769ReqBody.configList)
  return configlist_;
}

// optional .oidb.D769DeviceInfo deviceInfo = 2;
inline bool D769ReqBody::_internal_has_deviceinfo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || deviceinfo_ != nullptr);
  return value;
}
inline bool D769ReqBody::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline void D769ReqBody::clear_deviceinfo() {
  if (deviceinfo_ != nullptr) deviceinfo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::oidb::D769DeviceInfo& D769ReqBody::_internal_deviceinfo() const {
  const ::oidb::D769DeviceInfo* p = deviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::D769DeviceInfo&>(
      ::oidb::_D769DeviceInfo_default_instance_);
}
inline const ::oidb::D769DeviceInfo& D769ReqBody::deviceinfo() const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.deviceInfo)
  return _internal_deviceinfo();
}
inline void D769ReqBody::unsafe_arena_set_allocated_deviceinfo(
    ::oidb::D769DeviceInfo* deviceinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769ReqBody.deviceInfo)
}
inline ::oidb::D769DeviceInfo* D769ReqBody::release_deviceinfo() {
  _has_bits_[0] &= ~0x00000008u;
  ::oidb::D769DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::D769DeviceInfo* D769ReqBody::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:oidb.D769ReqBody.deviceInfo)
  _has_bits_[0] &= ~0x00000008u;
  ::oidb::D769DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::oidb::D769DeviceInfo* D769ReqBody::_internal_mutable_deviceinfo() {
  _has_bits_[0] |= 0x00000008u;
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::D769DeviceInfo>(GetArenaForAllocation());
    deviceinfo_ = p;
  }
  return deviceinfo_;
}
inline ::oidb::D769DeviceInfo* D769ReqBody::mutable_deviceinfo() {
  ::oidb::D769DeviceInfo* _msg = _internal_mutable_deviceinfo();
  // @@protoc_insertion_point(field_mutable:oidb.D769ReqBody.deviceInfo)
  return _msg;
}
inline void D769ReqBody::set_allocated_deviceinfo(::oidb::D769DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::D769DeviceInfo>::GetOwningArena(deviceinfo);
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769ReqBody.deviceInfo)
}

// optional string info = 3;
inline bool D769ReqBody::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool D769ReqBody::has_info() const {
  return _internal_has_info();
}
inline void D769ReqBody::clear_info() {
  info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& D769ReqBody::info() const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void D769ReqBody::set_info(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.D769ReqBody.info)
}
inline std::string* D769ReqBody::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:oidb.D769ReqBody.info)
  return _s;
}
inline const std::string& D769ReqBody::_internal_info() const {
  return info_.Get();
}
inline void D769ReqBody::_internal_set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* D769ReqBody::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* D769ReqBody::release_info() {
  // @@protoc_insertion_point(field_release:oidb.D769ReqBody.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void D769ReqBody::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.D769ReqBody.info)
}

// optional string province = 4;
inline bool D769ReqBody::_internal_has_province() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool D769ReqBody::has_province() const {
  return _internal_has_province();
}
inline void D769ReqBody::clear_province() {
  province_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& D769ReqBody::province() const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.province)
  return _internal_province();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void D769ReqBody::set_province(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 province_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.D769ReqBody.province)
}
inline std::string* D769ReqBody::mutable_province() {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:oidb.D769ReqBody.province)
  return _s;
}
inline const std::string& D769ReqBody::_internal_province() const {
  return province_.Get();
}
inline void D769ReqBody::_internal_set_province(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  province_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* D769ReqBody::_internal_mutable_province() {
  _has_bits_[0] |= 0x00000002u;
  return province_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* D769ReqBody::release_province() {
  // @@protoc_insertion_point(field_release:oidb.D769ReqBody.province)
  if (!_internal_has_province()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return province_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void D769ReqBody::set_allocated_province(std::string* province) {
  if (province != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  province_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), province,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.D769ReqBody.province)
}

// optional string city = 5;
inline bool D769ReqBody::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool D769ReqBody::has_city() const {
  return _internal_has_city();
}
inline void D769ReqBody::clear_city() {
  city_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& D769ReqBody::city() const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void D769ReqBody::set_city(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.D769ReqBody.city)
}
inline std::string* D769ReqBody::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:oidb.D769ReqBody.city)
  return _s;
}
inline const std::string& D769ReqBody::_internal_city() const {
  return city_.Get();
}
inline void D769ReqBody::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* D769ReqBody::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000004u;
  return city_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* D769ReqBody::release_city() {
  // @@protoc_insertion_point(field_release:oidb.D769ReqBody.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return city_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void D769ReqBody::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.D769ReqBody.city)
}

// optional int32 reqDebugMsg = 6;
inline bool D769ReqBody::_internal_has_reqdebugmsg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool D769ReqBody::has_reqdebugmsg() const {
  return _internal_has_reqdebugmsg();
}
inline void D769ReqBody::clear_reqdebugmsg() {
  reqdebugmsg_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D769ReqBody::_internal_reqdebugmsg() const {
  return reqdebugmsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 D769ReqBody::reqdebugmsg() const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.reqDebugMsg)
  return _internal_reqdebugmsg();
}
inline void D769ReqBody::_internal_set_reqdebugmsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  reqdebugmsg_ = value;
}
inline void D769ReqBody::set_reqdebugmsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqdebugmsg(value);
  // @@protoc_insertion_point(field_set:oidb.D769ReqBody.reqDebugMsg)
}

// optional .oidb.QueryUinPackageUsageReq queryUinPackageUsageReq = 101;
inline bool D769ReqBody::_internal_has_queryuinpackageusagereq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || queryuinpackageusagereq_ != nullptr);
  return value;
}
inline bool D769ReqBody::has_queryuinpackageusagereq() const {
  return _internal_has_queryuinpackageusagereq();
}
inline void D769ReqBody::clear_queryuinpackageusagereq() {
  if (queryuinpackageusagereq_ != nullptr) queryuinpackageusagereq_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::oidb::QueryUinPackageUsageReq& D769ReqBody::_internal_queryuinpackageusagereq() const {
  const ::oidb::QueryUinPackageUsageReq* p = queryuinpackageusagereq_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::QueryUinPackageUsageReq&>(
      ::oidb::_QueryUinPackageUsageReq_default_instance_);
}
inline const ::oidb::QueryUinPackageUsageReq& D769ReqBody::queryuinpackageusagereq() const {
  // @@protoc_insertion_point(field_get:oidb.D769ReqBody.queryUinPackageUsageReq)
  return _internal_queryuinpackageusagereq();
}
inline void D769ReqBody::unsafe_arena_set_allocated_queryuinpackageusagereq(
    ::oidb::QueryUinPackageUsageReq* queryuinpackageusagereq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryuinpackageusagereq_);
  }
  queryuinpackageusagereq_ = queryuinpackageusagereq;
  if (queryuinpackageusagereq) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769ReqBody.queryUinPackageUsageReq)
}
inline ::oidb::QueryUinPackageUsageReq* D769ReqBody::release_queryuinpackageusagereq() {
  _has_bits_[0] &= ~0x00000010u;
  ::oidb::QueryUinPackageUsageReq* temp = queryuinpackageusagereq_;
  queryuinpackageusagereq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::QueryUinPackageUsageReq* D769ReqBody::unsafe_arena_release_queryuinpackageusagereq() {
  // @@protoc_insertion_point(field_release:oidb.D769ReqBody.queryUinPackageUsageReq)
  _has_bits_[0] &= ~0x00000010u;
  ::oidb::QueryUinPackageUsageReq* temp = queryuinpackageusagereq_;
  queryuinpackageusagereq_ = nullptr;
  return temp;
}
inline ::oidb::QueryUinPackageUsageReq* D769ReqBody::_internal_mutable_queryuinpackageusagereq() {
  _has_bits_[0] |= 0x00000010u;
  if (queryuinpackageusagereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::QueryUinPackageUsageReq>(GetArenaForAllocation());
    queryuinpackageusagereq_ = p;
  }
  return queryuinpackageusagereq_;
}
inline ::oidb::QueryUinPackageUsageReq* D769ReqBody::mutable_queryuinpackageusagereq() {
  ::oidb::QueryUinPackageUsageReq* _msg = _internal_mutable_queryuinpackageusagereq();
  // @@protoc_insertion_point(field_mutable:oidb.D769ReqBody.queryUinPackageUsageReq)
  return _msg;
}
inline void D769ReqBody::set_allocated_queryuinpackageusagereq(::oidb::QueryUinPackageUsageReq* queryuinpackageusagereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete queryuinpackageusagereq_;
  }
  if (queryuinpackageusagereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::QueryUinPackageUsageReq>::GetOwningArena(queryuinpackageusagereq);
    if (message_arena != submessage_arena) {
      queryuinpackageusagereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryuinpackageusagereq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  queryuinpackageusagereq_ = queryuinpackageusagereq;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769ReqBody.queryUinPackageUsageReq)
}

// -------------------------------------------------------------------

// D769RspBody

// optional uint32 result = 1;
inline bool D769RspBody::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool D769RspBody::has_result() const {
  return _internal_has_result();
}
inline void D769RspBody::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 D769RspBody::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 D769RspBody::result() const {
  // @@protoc_insertion_point(field_get:oidb.D769RspBody.result)
  return _internal_result();
}
inline void D769RspBody::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void D769RspBody::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:oidb.D769RspBody.result)
}

// repeated .oidb.D769ConfigSeq configList = 2;
inline int D769RspBody::_internal_configlist_size() const {
  return configlist_.size();
}
inline int D769RspBody::configlist_size() const {
  return _internal_configlist_size();
}
inline void D769RspBody::clear_configlist() {
  configlist_.Clear();
}
inline ::oidb::D769ConfigSeq* D769RspBody::mutable_configlist(int index) {
  // @@protoc_insertion_point(field_mutable:oidb.D769RspBody.configList)
  return configlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >*
D769RspBody::mutable_configlist() {
  // @@protoc_insertion_point(field_mutable_list:oidb.D769RspBody.configList)
  return &configlist_;
}
inline const ::oidb::D769ConfigSeq& D769RspBody::_internal_configlist(int index) const {
  return configlist_.Get(index);
}
inline const ::oidb::D769ConfigSeq& D769RspBody::configlist(int index) const {
  // @@protoc_insertion_point(field_get:oidb.D769RspBody.configList)
  return _internal_configlist(index);
}
inline ::oidb::D769ConfigSeq* D769RspBody::_internal_add_configlist() {
  return configlist_.Add();
}
inline ::oidb::D769ConfigSeq* D769RspBody::add_configlist() {
  ::oidb::D769ConfigSeq* _add = _internal_add_configlist();
  // @@protoc_insertion_point(field_add:oidb.D769RspBody.configList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oidb::D769ConfigSeq >&
D769RspBody::configlist() const {
  // @@protoc_insertion_point(field_list:oidb.D769RspBody.configList)
  return configlist_;
}

// optional .oidb.QueryUinPackageUsageRsp queryUinPackageUsageRsp = 101;
inline bool D769RspBody::_internal_has_queryuinpackageusagersp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || queryuinpackageusagersp_ != nullptr);
  return value;
}
inline bool D769RspBody::has_queryuinpackageusagersp() const {
  return _internal_has_queryuinpackageusagersp();
}
inline void D769RspBody::clear_queryuinpackageusagersp() {
  if (queryuinpackageusagersp_ != nullptr) queryuinpackageusagersp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oidb::QueryUinPackageUsageRsp& D769RspBody::_internal_queryuinpackageusagersp() const {
  const ::oidb::QueryUinPackageUsageRsp* p = queryuinpackageusagersp_;
  return p != nullptr ? *p : reinterpret_cast<const ::oidb::QueryUinPackageUsageRsp&>(
      ::oidb::_QueryUinPackageUsageRsp_default_instance_);
}
inline const ::oidb::QueryUinPackageUsageRsp& D769RspBody::queryuinpackageusagersp() const {
  // @@protoc_insertion_point(field_get:oidb.D769RspBody.queryUinPackageUsageRsp)
  return _internal_queryuinpackageusagersp();
}
inline void D769RspBody::unsafe_arena_set_allocated_queryuinpackageusagersp(
    ::oidb::QueryUinPackageUsageRsp* queryuinpackageusagersp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryuinpackageusagersp_);
  }
  queryuinpackageusagersp_ = queryuinpackageusagersp;
  if (queryuinpackageusagersp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oidb.D769RspBody.queryUinPackageUsageRsp)
}
inline ::oidb::QueryUinPackageUsageRsp* D769RspBody::release_queryuinpackageusagersp() {
  _has_bits_[0] &= ~0x00000001u;
  ::oidb::QueryUinPackageUsageRsp* temp = queryuinpackageusagersp_;
  queryuinpackageusagersp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::oidb::QueryUinPackageUsageRsp* D769RspBody::unsafe_arena_release_queryuinpackageusagersp() {
  // @@protoc_insertion_point(field_release:oidb.D769RspBody.queryUinPackageUsageRsp)
  _has_bits_[0] &= ~0x00000001u;
  ::oidb::QueryUinPackageUsageRsp* temp = queryuinpackageusagersp_;
  queryuinpackageusagersp_ = nullptr;
  return temp;
}
inline ::oidb::QueryUinPackageUsageRsp* D769RspBody::_internal_mutable_queryuinpackageusagersp() {
  _has_bits_[0] |= 0x00000001u;
  if (queryuinpackageusagersp_ == nullptr) {
    auto* p = CreateMaybeMessage<::oidb::QueryUinPackageUsageRsp>(GetArenaForAllocation());
    queryuinpackageusagersp_ = p;
  }
  return queryuinpackageusagersp_;
}
inline ::oidb::QueryUinPackageUsageRsp* D769RspBody::mutable_queryuinpackageusagersp() {
  ::oidb::QueryUinPackageUsageRsp* _msg = _internal_mutable_queryuinpackageusagersp();
  // @@protoc_insertion_point(field_mutable:oidb.D769RspBody.queryUinPackageUsageRsp)
  return _msg;
}
inline void D769RspBody::set_allocated_queryuinpackageusagersp(::oidb::QueryUinPackageUsageRsp* queryuinpackageusagersp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete queryuinpackageusagersp_;
  }
  if (queryuinpackageusagersp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::oidb::QueryUinPackageUsageRsp>::GetOwningArena(queryuinpackageusagersp);
    if (message_arena != submessage_arena) {
      queryuinpackageusagersp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryuinpackageusagersp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  queryuinpackageusagersp_ = queryuinpackageusagersp;
  // @@protoc_insertion_point(field_set_allocated:oidb.D769RspBody.queryUinPackageUsageRsp)
}

// -------------------------------------------------------------------

// Screen

// optional string model = 1;
inline bool Screen::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Screen::has_model() const {
  return _internal_has_model();
}
inline void Screen::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Screen::model() const {
  // @@protoc_insertion_point(field_get:oidb.Screen.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Screen::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.Screen.model)
}
inline std::string* Screen::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:oidb.Screen.model)
  return _s;
}
inline const std::string& Screen::_internal_model() const {
  return model_.Get();
}
inline void Screen::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Screen::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000001u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Screen::release_model() {
  // @@protoc_insertion_point(field_release:oidb.Screen.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Screen::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.Screen.model)
}

// optional uint32 width = 2;
inline bool Screen::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Screen::has_width() const {
  return _internal_has_width();
}
inline void Screen::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Screen::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Screen::width() const {
  // @@protoc_insertion_point(field_get:oidb.Screen.width)
  return _internal_width();
}
inline void Screen::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void Screen::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:oidb.Screen.width)
}

// optional uint32 height = 3;
inline bool Screen::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Screen::has_height() const {
  return _internal_has_height();
}
inline void Screen::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Screen::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Screen::height() const {
  // @@protoc_insertion_point(field_get:oidb.Screen.height)
  return _internal_height();
}
inline void Screen::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void Screen::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:oidb.Screen.height)
}

// optional uint32 dpi = 4;
inline bool Screen::_internal_has_dpi() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Screen::has_dpi() const {
  return _internal_has_dpi();
}
inline void Screen::clear_dpi() {
  dpi_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Screen::_internal_dpi() const {
  return dpi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Screen::dpi() const {
  // @@protoc_insertion_point(field_get:oidb.Screen.dpi)
  return _internal_dpi();
}
inline void Screen::_internal_set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  dpi_ = value;
}
inline void Screen::set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dpi(value);
  // @@protoc_insertion_point(field_set:oidb.Screen.dpi)
}

// optional bool multiTouch = 5;
inline bool Screen::_internal_has_multitouch() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Screen::has_multitouch() const {
  return _internal_has_multitouch();
}
inline void Screen::clear_multitouch() {
  multitouch_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Screen::_internal_multitouch() const {
  return multitouch_;
}
inline bool Screen::multitouch() const {
  // @@protoc_insertion_point(field_get:oidb.Screen.multiTouch)
  return _internal_multitouch();
}
inline void Screen::_internal_set_multitouch(bool value) {
  _has_bits_[0] |= 0x00000010u;
  multitouch_ = value;
}
inline void Screen::set_multitouch(bool value) {
  _internal_set_multitouch(value);
  // @@protoc_insertion_point(field_set:oidb.Screen.multiTouch)
}

// -------------------------------------------------------------------

// Storage

// optional uint64 builtin = 1;
inline bool Storage::_internal_has_builtin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Storage::has_builtin() const {
  return _internal_has_builtin();
}
inline void Storage::clear_builtin() {
  builtin_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Storage::_internal_builtin() const {
  return builtin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Storage::builtin() const {
  // @@protoc_insertion_point(field_get:oidb.Storage.builtin)
  return _internal_builtin();
}
inline void Storage::_internal_set_builtin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  builtin_ = value;
}
inline void Storage::set_builtin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_builtin(value);
  // @@protoc_insertion_point(field_set:oidb.Storage.builtin)
}

// optional uint64 external = 2;
inline bool Storage::_internal_has_external() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Storage::has_external() const {
  return _internal_has_external();
}
inline void Storage::clear_external() {
  external_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Storage::_internal_external() const {
  return external_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Storage::external() const {
  // @@protoc_insertion_point(field_get:oidb.Storage.external)
  return _internal_external();
}
inline void Storage::_internal_set_external(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  external_ = value;
}
inline void Storage::set_external(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_external(value);
  // @@protoc_insertion_point(field_set:oidb.Storage.external)
}

// -------------------------------------------------------------------

// UinPackageUsedInfo

// optional uint32 ruleId = 1;
inline bool UinPackageUsedInfo::_internal_has_ruleid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UinPackageUsedInfo::has_ruleid() const {
  return _internal_has_ruleid();
}
inline void UinPackageUsedInfo::clear_ruleid() {
  ruleid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UinPackageUsedInfo::_internal_ruleid() const {
  return ruleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UinPackageUsedInfo::ruleid() const {
  // @@protoc_insertion_point(field_get:oidb.UinPackageUsedInfo.ruleId)
  return _internal_ruleid();
}
inline void UinPackageUsedInfo::_internal_set_ruleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ruleid_ = value;
}
inline void UinPackageUsedInfo::set_ruleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ruleid(value);
  // @@protoc_insertion_point(field_set:oidb.UinPackageUsedInfo.ruleId)
}

// optional string author = 2;
inline bool UinPackageUsedInfo::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UinPackageUsedInfo::has_author() const {
  return _internal_has_author();
}
inline void UinPackageUsedInfo::clear_author() {
  author_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UinPackageUsedInfo::author() const {
  // @@protoc_insertion_point(field_get:oidb.UinPackageUsedInfo.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UinPackageUsedInfo::set_author(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.UinPackageUsedInfo.author)
}
inline std::string* UinPackageUsedInfo::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:oidb.UinPackageUsedInfo.author)
  return _s;
}
inline const std::string& UinPackageUsedInfo::_internal_author() const {
  return author_.Get();
}
inline void UinPackageUsedInfo::_internal_set_author(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UinPackageUsedInfo::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000001u;
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UinPackageUsedInfo::release_author() {
  // @@protoc_insertion_point(field_release:oidb.UinPackageUsedInfo.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return author_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UinPackageUsedInfo::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.UinPackageUsedInfo.author)
}

// optional string url = 3;
inline bool UinPackageUsedInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UinPackageUsedInfo::has_url() const {
  return _internal_has_url();
}
inline void UinPackageUsedInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UinPackageUsedInfo::url() const {
  // @@protoc_insertion_point(field_get:oidb.UinPackageUsedInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UinPackageUsedInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oidb.UinPackageUsedInfo.url)
}
inline std::string* UinPackageUsedInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:oidb.UinPackageUsedInfo.url)
  return _s;
}
inline const std::string& UinPackageUsedInfo::_internal_url() const {
  return url_.Get();
}
inline void UinPackageUsedInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UinPackageUsedInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UinPackageUsedInfo::release_url() {
  // @@protoc_insertion_point(field_release:oidb.UinPackageUsedInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UinPackageUsedInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oidb.UinPackageUsedInfo.url)
}

// optional uint64 uinNum = 4;
inline bool UinPackageUsedInfo::_internal_has_uinnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UinPackageUsedInfo::has_uinnum() const {
  return _internal_has_uinnum();
}
inline void UinPackageUsedInfo::clear_uinnum() {
  uinnum_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UinPackageUsedInfo::_internal_uinnum() const {
  return uinnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UinPackageUsedInfo::uinnum() const {
  // @@protoc_insertion_point(field_get:oidb.UinPackageUsedInfo.uinNum)
  return _internal_uinnum();
}
inline void UinPackageUsedInfo::_internal_set_uinnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  uinnum_ = value;
}
inline void UinPackageUsedInfo::set_uinnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uinnum(value);
  // @@protoc_insertion_point(field_set:oidb.UinPackageUsedInfo.uinNum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oidb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oidb0x769_2eproto
