// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oidb0x769.proto

#include "oidb0x769.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace oidb {
constexpr CPU::CPU(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cores_(0u)
  , frequency_(0u){}
struct CPUDefaultTypeInternal {
  constexpr CPUDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPUDefaultTypeInternal() {}
  union {
    CPU _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPUDefaultTypeInternal _CPU_default_instance_;
constexpr Camera::Camera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : primary_(uint64_t{0u})
  , secondary_(uint64_t{0u})
  , flash_(false){}
struct CameraDefaultTypeInternal {
  constexpr CameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDefaultTypeInternal _Camera_default_instance_;
constexpr D769ConfigSeq::D769ConfigSeq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , version_(0u){}
struct D769ConfigSeqDefaultTypeInternal {
  constexpr D769ConfigSeqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~D769ConfigSeqDefaultTypeInternal() {}
  union {
    D769ConfigSeq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT D769ConfigSeqDefaultTypeInternal _D769ConfigSeq_default_instance_;
constexpr Content::Content(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , taskid_(0u)
  , compress_(0u){}
struct ContentDefaultTypeInternal {
  constexpr ContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentDefaultTypeInternal() {}
  union {
    Content _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentDefaultTypeInternal _Content_default_instance_;
constexpr D769DeviceInfo::D769DeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : brand_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_(nullptr)
  , cpu_(nullptr)
  , memory_(nullptr)
  , storage_(nullptr)
  , screen_(nullptr)
  , camera_(nullptr){}
struct D769DeviceInfoDefaultTypeInternal {
  constexpr D769DeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~D769DeviceInfoDefaultTypeInternal() {}
  union {
    D769DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT D769DeviceInfoDefaultTypeInternal _D769DeviceInfo_default_instance_;
constexpr Memory::Memory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_(uint64_t{0u})
  , process_(uint64_t{0u}){}
struct MemoryDefaultTypeInternal {
  constexpr MemoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryDefaultTypeInternal() {}
  union {
    Memory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryDefaultTypeInternal _Memory_default_instance_;
constexpr C41219OS::C41219OS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kernel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rom_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u){}
struct C41219OSDefaultTypeInternal {
  constexpr C41219OSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C41219OSDefaultTypeInternal() {}
  union {
    C41219OS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C41219OSDefaultTypeInternal _C41219OS_default_instance_;
constexpr QueryUinPackageUsageReq::QueryUinPackageUsageReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uinfilesize_(uint64_t{0u})
  , type_(0u){}
struct QueryUinPackageUsageReqDefaultTypeInternal {
  constexpr QueryUinPackageUsageReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUinPackageUsageReqDefaultTypeInternal() {}
  union {
    QueryUinPackageUsageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUinPackageUsageReqDefaultTypeInternal _QueryUinPackageUsageReq_default_instance_;
constexpr QueryUinPackageUsageRsp::QueryUinPackageUsageRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uinpackageusedlist_()
  , leftuinnum_(uint64_t{0u})
  , status_(0u)
  , proportion_(0u)
  , maxuinnum_(uint64_t{0u}){}
struct QueryUinPackageUsageRspDefaultTypeInternal {
  constexpr QueryUinPackageUsageRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUinPackageUsageRspDefaultTypeInternal() {}
  union {
    QueryUinPackageUsageRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUinPackageUsageRspDefaultTypeInternal _QueryUinPackageUsageRsp_default_instance_;
constexpr D769ReqBody::D769ReqBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configlist_()
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , province_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , city_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceinfo_(nullptr)
  , queryuinpackageusagereq_(nullptr)
  , reqdebugmsg_(0){}
struct D769ReqBodyDefaultTypeInternal {
  constexpr D769ReqBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~D769ReqBodyDefaultTypeInternal() {}
  union {
    D769ReqBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT D769ReqBodyDefaultTypeInternal _D769ReqBody_default_instance_;
constexpr D769RspBody::D769RspBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configlist_()
  , queryuinpackageusagersp_(nullptr)
  , result_(0u){}
struct D769RspBodyDefaultTypeInternal {
  constexpr D769RspBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~D769RspBodyDefaultTypeInternal() {}
  union {
    D769RspBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT D769RspBodyDefaultTypeInternal _D769RspBody_default_instance_;
constexpr Screen::Screen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u)
  , dpi_(0u)
  , multitouch_(false){}
struct ScreenDefaultTypeInternal {
  constexpr ScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScreenDefaultTypeInternal() {}
  union {
    Screen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScreenDefaultTypeInternal _Screen_default_instance_;
constexpr Storage::Storage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : builtin_(uint64_t{0u})
  , external_(uint64_t{0u}){}
struct StorageDefaultTypeInternal {
  constexpr StorageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StorageDefaultTypeInternal() {}
  union {
    Storage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StorageDefaultTypeInternal _Storage_default_instance_;
constexpr UinPackageUsedInfo::UinPackageUsedInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uinnum_(uint64_t{0u})
  , ruleid_(0u){}
struct UinPackageUsedInfoDefaultTypeInternal {
  constexpr UinPackageUsedInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UinPackageUsedInfoDefaultTypeInternal() {}
  union {
    UinPackageUsedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UinPackageUsedInfoDefaultTypeInternal _UinPackageUsedInfo_default_instance_;
}  // namespace oidb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_oidb0x769_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_oidb0x769_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_oidb0x769_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_oidb0x769_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::oidb::CPU, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::CPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::CPU, model_),
  PROTOBUF_FIELD_OFFSET(::oidb::CPU, cores_),
  PROTOBUF_FIELD_OFFSET(::oidb::CPU, frequency_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::oidb::Camera, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::Camera, primary_),
  PROTOBUF_FIELD_OFFSET(::oidb::Camera, secondary_),
  PROTOBUF_FIELD_OFFSET(::oidb::Camera, flash_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::oidb::D769ConfigSeq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ConfigSeq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::D769ConfigSeq, type_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ConfigSeq, version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::oidb::Content, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::Content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::Content, taskid_),
  PROTOBUF_FIELD_OFFSET(::oidb::Content, compress_),
  PROTOBUF_FIELD_OFFSET(::oidb::Content, content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, brand_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, model_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, os_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, cpu_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, memory_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, storage_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, screen_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769DeviceInfo, camera_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::oidb::Memory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::Memory, total_),
  PROTOBUF_FIELD_OFFSET(::oidb::Memory, process_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, type_),
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, version_),
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, sdk_),
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, kernel_),
  PROTOBUF_FIELD_OFFSET(::oidb::C41219OS, rom_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageReq, type_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageReq, uinfilesize_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, status_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, leftuinnum_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, maxuinnum_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, proportion_),
  PROTOBUF_FIELD_OFFSET(::oidb::QueryUinPackageUsageRsp, uinpackageusedlist_),
  1,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, configlist_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, deviceinfo_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, info_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, province_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, city_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, reqdebugmsg_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769ReqBody, queryuinpackageusagereq_),
  ~0u,
  3,
  0,
  1,
  2,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::oidb::D769RspBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769RspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::D769RspBody, result_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769RspBody, configlist_),
  PROTOBUF_FIELD_OFFSET(::oidb::D769RspBody, queryuinpackageusagersp_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, model_),
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, width_),
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, height_),
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, dpi_),
  PROTOBUF_FIELD_OFFSET(::oidb::Screen, multitouch_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::oidb::Storage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::Storage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::Storage, builtin_),
  PROTOBUF_FIELD_OFFSET(::oidb::Storage, external_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::oidb::UinPackageUsedInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oidb::UinPackageUsedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oidb::UinPackageUsedInfo, ruleid_),
  PROTOBUF_FIELD_OFFSET(::oidb::UinPackageUsedInfo, author_),
  PROTOBUF_FIELD_OFFSET(::oidb::UinPackageUsedInfo, url_),
  PROTOBUF_FIELD_OFFSET(::oidb::UinPackageUsedInfo, uinnum_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::oidb::CPU)},
  { 12, 21, -1, sizeof(::oidb::Camera)},
  { 24, 32, -1, sizeof(::oidb::D769ConfigSeq)},
  { 34, 43, -1, sizeof(::oidb::Content)},
  { 46, 60, -1, sizeof(::oidb::D769DeviceInfo)},
  { 68, 76, -1, sizeof(::oidb::Memory)},
  { 78, 89, -1, sizeof(::oidb::C41219OS)},
  { 94, 102, -1, sizeof(::oidb::QueryUinPackageUsageReq)},
  { 104, 115, -1, sizeof(::oidb::QueryUinPackageUsageRsp)},
  { 120, 133, -1, sizeof(::oidb::D769ReqBody)},
  { 140, 149, -1, sizeof(::oidb::D769RspBody)},
  { 152, 163, -1, sizeof(::oidb::Screen)},
  { 168, 176, -1, sizeof(::oidb::Storage)},
  { 178, 188, -1, sizeof(::oidb::UinPackageUsedInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_CPU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_D769ConfigSeq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_Content_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_D769DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_Memory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_C41219OS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_QueryUinPackageUsageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_QueryUinPackageUsageRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_D769ReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_D769RspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_Screen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_Storage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oidb::_UinPackageUsedInfo_default_instance_),
};

const char descriptor_table_protodef_oidb0x769_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017oidb0x769.proto\022\004oidb\"6\n\003CPU\022\r\n\005model\030"
  "\001 \001(\t\022\r\n\005cores\030\002 \001(\r\022\021\n\tfrequency\030\003 \001(\r\""
  ";\n\006Camera\022\017\n\007primary\030\001 \001(\004\022\021\n\tsecondary\030"
  "\002 \001(\004\022\r\n\005flash\030\003 \001(\010\".\n\rD769ConfigSeq\022\014\n"
  "\004type\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\"<\n\007Content\022"
  "\016\n\006taskId\030\001 \001(\r\022\020\n\010compress\030\002 \001(\r\022\017\n\007con"
  "tent\030\n \001(\014\"\334\001\n\016D769DeviceInfo\022\r\n\005brand\030\001"
  " \001(\t\022\r\n\005model\030\002 \001(\t\022\032\n\002os\030\003 \001(\0132\016.oidb.C"
  "41219OS\022\026\n\003cpu\030\004 \001(\0132\t.oidb.CPU\022\034\n\006memor"
  "y\030\005 \001(\0132\014.oidb.Memory\022\036\n\007storage\030\006 \001(\0132\r"
  ".oidb.Storage\022\034\n\006screen\030\007 \001(\0132\014.oidb.Scr"
  "een\022\034\n\006camera\030\010 \001(\0132\014.oidb.Camera\"(\n\006Mem"
  "ory\022\r\n\005total\030\001 \001(\004\022\017\n\007process\030\002 \001(\004\"S\n\010C"
  "41219OS\022\014\n\004type\030\001 \001(\r\022\017\n\007version\030\002 \001(\t\022\013"
  "\n\003sdk\030\003 \001(\t\022\016\n\006kernel\030\004 \001(\t\022\013\n\003rom\030\005 \001(\t"
  "\"<\n\027QueryUinPackageUsageReq\022\014\n\004type\030\001 \001("
  "\r\022\023\n\013uinFileSize\030\002 \001(\004\"\232\001\n\027QueryUinPacka"
  "geUsageRsp\022\016\n\006status\030\001 \001(\r\022\022\n\nleftUinNum"
  "\030\002 \001(\004\022\021\n\tmaxUinNum\030\003 \001(\004\022\022\n\nproportion\030"
  "\004 \001(\r\0224\n\022uinPackageUsedList\030\n \003(\0132\030.oidb"
  ".UinPackageUsedInfo\"\343\001\n\013D769ReqBody\022\'\n\nc"
  "onfigList\030\001 \003(\0132\023.oidb.D769ConfigSeq\022(\n\n"
  "deviceInfo\030\002 \001(\0132\024.oidb.D769DeviceInfo\022\014"
  "\n\004info\030\003 \001(\t\022\020\n\010province\030\004 \001(\t\022\014\n\004city\030\005"
  " \001(\t\022\023\n\013reqDebugMsg\030\006 \001(\005\022>\n\027queryUinPac"
  "kageUsageReq\030e \001(\0132\035.oidb.QueryUinPackag"
  "eUsageReq\"\206\001\n\013D769RspBody\022\016\n\006result\030\001 \001("
  "\r\022\'\n\nconfigList\030\002 \003(\0132\023.oidb.D769ConfigS"
  "eq\022>\n\027queryUinPackageUsageRsp\030e \001(\0132\035.oi"
  "db.QueryUinPackageUsageRsp\"W\n\006Screen\022\r\n\005"
  "model\030\001 \001(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001"
  "(\r\022\013\n\003dpi\030\004 \001(\r\022\022\n\nmultiTouch\030\005 \001(\010\",\n\007S"
  "torage\022\017\n\007builtin\030\001 \001(\004\022\020\n\010external\030\002 \001("
  "\004\"Q\n\022UinPackageUsedInfo\022\016\n\006ruleId\030\001 \001(\r\022"
  "\016\n\006author\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\016\n\006uinNum\030\004"
  " \001(\004B\tZ\007./;oidb"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_oidb0x769_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oidb0x769_2eproto = {
  false, false, 1415, descriptor_table_protodef_oidb0x769_2eproto, "oidb0x769.proto", 
  &descriptor_table_oidb0x769_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_oidb0x769_2eproto::offsets,
  file_level_metadata_oidb0x769_2eproto, file_level_enum_descriptors_oidb0x769_2eproto, file_level_service_descriptors_oidb0x769_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_oidb0x769_2eproto_getter() {
  return &descriptor_table_oidb0x769_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_oidb0x769_2eproto(&descriptor_table_oidb0x769_2eproto);
namespace oidb {

// ===================================================================

class CPU::_Internal {
 public:
  using HasBits = decltype(std::declval<CPU>()._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cores(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPU::CPU(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.CPU)
}
CPU::CPU(const CPU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cores_, &from.cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&cores_)) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:oidb.CPU)
}

void CPU::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cores_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&cores_)) + sizeof(frequency_));
}

CPU::~CPU() {
  // @@protoc_insertion_point(destructor:oidb.CPU)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPU::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPU::ArenaDtor(void* object) {
  CPU* _this = reinterpret_cast< CPU* >(object);
  (void)_this;
}
void CPU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPU::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.CPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&cores_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frequency_) -
        reinterpret_cast<char*>(&cores_)) + sizeof(frequency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.CPU.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cores(&has_bits);
          cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frequency(&has_bits);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.CPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.CPU.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // optional uint32 cores = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cores(), target);
  }

  // optional uint32 frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.CPU)
  return target;
}

size_t CPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.CPU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional uint32 cores = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cores());
    }

    // optional uint32 frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frequency());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPU::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPU::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPU::GetClassData() const { return &_class_data_; }

void CPU::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPU *>(to)->MergeFrom(
      static_cast<const CPU &>(from));
}


void CPU::MergeFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.CPU)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000002u) {
      cores_ = from.cores_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPU::CopyFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPU::IsInitialized() const {
  return true;
}

void CPU::InternalSwap(CPU* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPU, frequency_)
      + sizeof(CPU::frequency_)
      - PROTOBUF_FIELD_OFFSET(CPU, cores_)>(
          reinterpret_cast<char*>(&cores_),
          reinterpret_cast<char*>(&other->cores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPU::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[0]);
}

// ===================================================================

class Camera::_Internal {
 public:
  using HasBits = decltype(std::declval<Camera>()._has_bits_);
  static void set_has_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&flash_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(flash_));
  // @@protoc_insertion_point(copy_constructor:oidb.Camera)
}

void Camera::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&primary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flash_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(flash_));
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:oidb.Camera)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flash_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(flash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_primary(&has_bits);
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_secondary(&has_bits);
          secondary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool flash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flash(&has_bits);
          flash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 primary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_primary(), target);
  }

  // optional uint64 secondary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_secondary(), target);
  }

  // optional bool flash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 primary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_primary());
    }

    // optional uint64 secondary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_secondary());
    }

    // optional bool flash = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Camera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Camera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Camera::GetClassData() const { return &_class_data_; }

void Camera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Camera *>(to)->MergeFrom(
      static_cast<const Camera &>(from));
}


void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      secondary_ = from.secondary_;
    }
    if (cached_has_bits & 0x00000004u) {
      flash_ = from.flash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera, flash_)
      + sizeof(Camera::flash_)
      - PROTOBUF_FIELD_OFFSET(Camera, primary_)>(
          reinterpret_cast<char*>(&primary_),
          reinterpret_cast<char*>(&other->primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[1]);
}

// ===================================================================

class D769ConfigSeq::_Internal {
 public:
  using HasBits = decltype(std::declval<D769ConfigSeq>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

D769ConfigSeq::D769ConfigSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.D769ConfigSeq)
}
D769ConfigSeq::D769ConfigSeq(const D769ConfigSeq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:oidb.D769ConfigSeq)
}

void D769ConfigSeq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
}

D769ConfigSeq::~D769ConfigSeq() {
  // @@protoc_insertion_point(destructor:oidb.D769ConfigSeq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void D769ConfigSeq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void D769ConfigSeq::ArenaDtor(void* object) {
  D769ConfigSeq* _this = reinterpret_cast< D769ConfigSeq* >(object);
  (void)_this;
}
void D769ConfigSeq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void D769ConfigSeq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void D769ConfigSeq::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.D769ConfigSeq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&type_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* D769ConfigSeq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* D769ConfigSeq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.D769ConfigSeq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.D769ConfigSeq)
  return target;
}

size_t D769ConfigSeq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.D769ConfigSeq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData D769ConfigSeq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    D769ConfigSeq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*D769ConfigSeq::GetClassData() const { return &_class_data_; }

void D769ConfigSeq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<D769ConfigSeq *>(to)->MergeFrom(
      static_cast<const D769ConfigSeq &>(from));
}


void D769ConfigSeq::MergeFrom(const D769ConfigSeq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.D769ConfigSeq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void D769ConfigSeq::CopyFrom(const D769ConfigSeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.D769ConfigSeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D769ConfigSeq::IsInitialized() const {
  return true;
}

void D769ConfigSeq::InternalSwap(D769ConfigSeq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(D769ConfigSeq, version_)
      + sizeof(D769ConfigSeq::version_)
      - PROTOBUF_FIELD_OFFSET(D769ConfigSeq, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata D769ConfigSeq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[2]);
}

// ===================================================================

class Content::_Internal {
 public:
  using HasBits = decltype(std::declval<Content>()._has_bits_);
  static void set_has_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Content::Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.Content)
}
Content::Content(const Content& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(compress_));
  // @@protoc_insertion_point(copy_constructor:oidb.Content)
}

void Content::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&taskid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compress_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(compress_));
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:oidb.Content)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Content::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Content::ArenaDtor(void* object) {
  Content* _this = reinterpret_cast< Content* >(object);
  (void)_this;
}
void Content::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.Content)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compress_) -
        reinterpret_cast<char*>(&taskid_)) + sizeof(compress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Content::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_taskid(&has_bits);
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_compress(&has_bits);
          compress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes content = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Content::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.Content)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 taskId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_taskid(), target);
  }

  // optional uint32 compress = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_compress(), target);
  }

  // optional bytes content = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.Content)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes content = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_content());
    }

    // optional uint32 taskId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_taskid());
    }

    // optional uint32 compress = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_compress());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Content::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Content::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Content::GetClassData() const { return &_class_data_; }

void Content::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Content *>(to)->MergeFrom(
      static_cast<const Content &>(from));
}


void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.Content)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000004u) {
      compress_ = from.compress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::InternalSwap(Content* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Content, compress_)
      + sizeof(Content::compress_)
      - PROTOBUF_FIELD_OFFSET(Content, taskid_)>(
          reinterpret_cast<char*>(&taskid_),
          reinterpret_cast<char*>(&other->taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Content::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[3]);
}

// ===================================================================

class D769DeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<D769DeviceInfo>()._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::oidb::C41219OS& os(const D769DeviceInfo* msg);
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::oidb::CPU& cpu(const D769DeviceInfo* msg);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::oidb::Memory& memory(const D769DeviceInfo* msg);
  static void set_has_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::oidb::Storage& storage(const D769DeviceInfo* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::oidb::Screen& screen(const D769DeviceInfo* msg);
  static void set_has_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::oidb::Camera& camera(const D769DeviceInfo* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::oidb::C41219OS&
D769DeviceInfo::_Internal::os(const D769DeviceInfo* msg) {
  return *msg->os_;
}
const ::oidb::CPU&
D769DeviceInfo::_Internal::cpu(const D769DeviceInfo* msg) {
  return *msg->cpu_;
}
const ::oidb::Memory&
D769DeviceInfo::_Internal::memory(const D769DeviceInfo* msg) {
  return *msg->memory_;
}
const ::oidb::Storage&
D769DeviceInfo::_Internal::storage(const D769DeviceInfo* msg) {
  return *msg->storage_;
}
const ::oidb::Screen&
D769DeviceInfo::_Internal::screen(const D769DeviceInfo* msg) {
  return *msg->screen_;
}
const ::oidb::Camera&
D769DeviceInfo::_Internal::camera(const D769DeviceInfo* msg) {
  return *msg->camera_;
}
D769DeviceInfo::D769DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.D769DeviceInfo)
}
D769DeviceInfo::D769DeviceInfo(const D769DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_brand()) {
    brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brand(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_os()) {
    os_ = new ::oidb::C41219OS(*from.os_);
  } else {
    os_ = nullptr;
  }
  if (from._internal_has_cpu()) {
    cpu_ = new ::oidb::CPU(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from._internal_has_memory()) {
    memory_ = new ::oidb::Memory(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::oidb::Storage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_screen()) {
    screen_ = new ::oidb::Screen(*from.screen_);
  } else {
    screen_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::oidb::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:oidb.D769DeviceInfo)
}

void D769DeviceInfo::SharedCtor() {
brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&os_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&camera_) -
    reinterpret_cast<char*>(&os_)) + sizeof(camera_));
}

D769DeviceInfo::~D769DeviceInfo() {
  // @@protoc_insertion_point(destructor:oidb.D769DeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void D769DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete os_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete memory_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete screen_;
  if (this != internal_default_instance()) delete camera_;
}

void D769DeviceInfo::ArenaDtor(void* object) {
  D769DeviceInfo* _this = reinterpret_cast< D769DeviceInfo* >(object);
  (void)_this;
}
void D769DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void D769DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void D769DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.D769DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      brand_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(os_ != nullptr);
      os_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cpu_ != nullptr);
      cpu_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(memory_ != nullptr);
      memory_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(screen_ != nullptr);
      screen_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* D769DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brand();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.D769DeviceInfo.brand");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.D769DeviceInfo.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.C41219OS os = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_os(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.CPU cpu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.Memory memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.Storage storage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.Screen screen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.Camera camera = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* D769DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.D769DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string brand = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.D769DeviceInfo.brand");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brand(), target);
  }

  // optional string model = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.D769DeviceInfo.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // optional .oidb.C41219OS os = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::os(this), target, stream);
  }

  // optional .oidb.CPU cpu = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cpu(this), target, stream);
  }

  // optional .oidb.Memory memory = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::memory(this), target, stream);
  }

  // optional .oidb.Storage storage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::storage(this), target, stream);
  }

  // optional .oidb.Screen screen = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::screen(this), target, stream);
  }

  // optional .oidb.Camera camera = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::camera(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.D769DeviceInfo)
  return target;
}

size_t D769DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.D769DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string brand = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brand());
    }

    // optional string model = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional .oidb.C41219OS os = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *os_);
    }

    // optional .oidb.CPU cpu = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cpu_);
    }

    // optional .oidb.Memory memory = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memory_);
    }

    // optional .oidb.Storage storage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .oidb.Screen screen = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screen_);
    }

    // optional .oidb.Camera camera = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData D769DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    D769DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*D769DeviceInfo::GetClassData() const { return &_class_data_; }

void D769DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<D769DeviceInfo *>(to)->MergeFrom(
      static_cast<const D769DeviceInfo &>(from));
}


void D769DeviceInfo::MergeFrom(const D769DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.D769DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_brand(from._internal_brand());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_os()->::oidb::C41219OS::MergeFrom(from._internal_os());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cpu()->::oidb::CPU::MergeFrom(from._internal_cpu());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_memory()->::oidb::Memory::MergeFrom(from._internal_memory());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_storage()->::oidb::Storage::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_screen()->::oidb::Screen::MergeFrom(from._internal_screen());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_camera()->::oidb::Camera::MergeFrom(from._internal_camera());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void D769DeviceInfo::CopyFrom(const D769DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.D769DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D769DeviceInfo::IsInitialized() const {
  return true;
}

void D769DeviceInfo::InternalSwap(D769DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &brand_, lhs_arena,
      &other->brand_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(D769DeviceInfo, camera_)
      + sizeof(D769DeviceInfo::camera_)
      - PROTOBUF_FIELD_OFFSET(D769DeviceInfo, os_)>(
          reinterpret_cast<char*>(&os_),
          reinterpret_cast<char*>(&other->os_));
}

::PROTOBUF_NAMESPACE_ID::Metadata D769DeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[4]);
}

// ===================================================================

class Memory::_Internal {
 public:
  using HasBits = decltype(std::declval<Memory>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Memory::Memory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.Memory)
}
Memory::Memory(const Memory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&process_) -
    reinterpret_cast<char*>(&total_)) + sizeof(process_));
  // @@protoc_insertion_point(copy_constructor:oidb.Memory)
}

void Memory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&process_) -
    reinterpret_cast<char*>(&total_)) + sizeof(process_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:oidb.Memory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Memory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Memory::ArenaDtor(void* object) {
  Memory* _this = reinterpret_cast< Memory* >(object);
  (void)_this;
}
void Memory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&process_) -
        reinterpret_cast<char*>(&total_)) + sizeof(process_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Memory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_process(&has_bits);
          process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Memory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total(), target);
  }

  // optional uint64 process = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.Memory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
    }

    // optional uint64 process = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_process());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Memory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Memory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Memory::GetClassData() const { return &_class_data_; }

void Memory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Memory *>(to)->MergeFrom(
      static_cast<const Memory &>(from));
}


void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      process_ = from.process_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::InternalSwap(Memory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Memory, process_)
      + sizeof(Memory::process_)
      - PROTOBUF_FIELD_OFFSET(Memory, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Memory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[5]);
}

// ===================================================================

class C41219OS::_Internal {
 public:
  using HasBits = decltype(std::declval<C41219OS>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sdk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

C41219OS::C41219OS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.C41219OS)
}
C41219OS::C41219OS(const C41219OS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  sdk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdk()) {
    sdk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk(), 
      GetArenaForAllocation());
  }
  kernel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernel()) {
    kernel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernel(), 
      GetArenaForAllocation());
  }
  rom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rom()) {
    rom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rom(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:oidb.C41219OS)
}

void C41219OS::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kernel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0u;
}

C41219OS::~C41219OS() {
  // @@protoc_insertion_point(destructor:oidb.C41219OS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C41219OS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C41219OS::ArenaDtor(void* object) {
  C41219OS* _this = reinterpret_cast< C41219OS* >(object);
  (void)_this;
}
void C41219OS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C41219OS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C41219OS::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.C41219OS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sdk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      kernel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      rom_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C41219OS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.C41219OS.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sdk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sdk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.C41219OS.sdk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string kernel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_kernel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.C41219OS.kernel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.C41219OS.rom");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C41219OS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.C41219OS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.C41219OS.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string sdk = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdk().data(), static_cast<int>(this->_internal_sdk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.C41219OS.sdk");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sdk(), target);
  }

  // optional string kernel = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernel().data(), static_cast<int>(this->_internal_kernel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.C41219OS.kernel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_kernel(), target);
  }

  // optional string rom = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rom().data(), static_cast<int>(this->_internal_rom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.C41219OS.rom");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.C41219OS)
  return target;
}

size_t C41219OS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.C41219OS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string sdk = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdk());
    }

    // optional string kernel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kernel());
    }

    // optional string rom = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rom());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C41219OS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C41219OS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C41219OS::GetClassData() const { return &_class_data_; }

void C41219OS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C41219OS *>(to)->MergeFrom(
      static_cast<const C41219OS &>(from));
}


void C41219OS::MergeFrom(const C41219OS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.C41219OS)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sdk(from._internal_sdk());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_kernel(from._internal_kernel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_rom(from._internal_rom());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C41219OS::CopyFrom(const C41219OS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.C41219OS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C41219OS::IsInitialized() const {
  return true;
}

void C41219OS::InternalSwap(C41219OS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_, lhs_arena,
      &other->sdk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kernel_, lhs_arena,
      &other->kernel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rom_, lhs_arena,
      &other->rom_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C41219OS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[6]);
}

// ===================================================================

class QueryUinPackageUsageReq::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryUinPackageUsageReq>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uinfilesize(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

QueryUinPackageUsageReq::QueryUinPackageUsageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.QueryUinPackageUsageReq)
}
QueryUinPackageUsageReq::QueryUinPackageUsageReq(const QueryUinPackageUsageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uinfilesize_, &from.uinfilesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uinfilesize_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:oidb.QueryUinPackageUsageReq)
}

void QueryUinPackageUsageReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uinfilesize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uinfilesize_)) + sizeof(type_));
}

QueryUinPackageUsageReq::~QueryUinPackageUsageReq() {
  // @@protoc_insertion_point(destructor:oidb.QueryUinPackageUsageReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryUinPackageUsageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryUinPackageUsageReq::ArenaDtor(void* object) {
  QueryUinPackageUsageReq* _this = reinterpret_cast< QueryUinPackageUsageReq* >(object);
  (void)_this;
}
void QueryUinPackageUsageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryUinPackageUsageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryUinPackageUsageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.QueryUinPackageUsageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uinfilesize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&uinfilesize_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUinPackageUsageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uinFileSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uinfilesize(&has_bits);
          uinfilesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryUinPackageUsageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.QueryUinPackageUsageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 uinFileSize = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uinfilesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.QueryUinPackageUsageReq)
  return target;
}

size_t QueryUinPackageUsageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.QueryUinPackageUsageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 uinFileSize = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uinfilesize());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUinPackageUsageReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryUinPackageUsageReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUinPackageUsageReq::GetClassData() const { return &_class_data_; }

void QueryUinPackageUsageReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryUinPackageUsageReq *>(to)->MergeFrom(
      static_cast<const QueryUinPackageUsageReq &>(from));
}


void QueryUinPackageUsageReq::MergeFrom(const QueryUinPackageUsageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.QueryUinPackageUsageReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uinfilesize_ = from.uinfilesize_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUinPackageUsageReq::CopyFrom(const QueryUinPackageUsageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.QueryUinPackageUsageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUinPackageUsageReq::IsInitialized() const {
  return true;
}

void QueryUinPackageUsageReq::InternalSwap(QueryUinPackageUsageReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryUinPackageUsageReq, type_)
      + sizeof(QueryUinPackageUsageReq::type_)
      - PROTOBUF_FIELD_OFFSET(QueryUinPackageUsageReq, uinfilesize_)>(
          reinterpret_cast<char*>(&uinfilesize_),
          reinterpret_cast<char*>(&other->uinfilesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUinPackageUsageReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[7]);
}

// ===================================================================

class QueryUinPackageUsageRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryUinPackageUsageRsp>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leftuinnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxuinnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_proportion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

QueryUinPackageUsageRsp::QueryUinPackageUsageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uinpackageusedlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.QueryUinPackageUsageRsp)
}
QueryUinPackageUsageRsp::QueryUinPackageUsageRsp(const QueryUinPackageUsageRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uinpackageusedlist_(from.uinpackageusedlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leftuinnum_, &from.leftuinnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxuinnum_) -
    reinterpret_cast<char*>(&leftuinnum_)) + sizeof(maxuinnum_));
  // @@protoc_insertion_point(copy_constructor:oidb.QueryUinPackageUsageRsp)
}

void QueryUinPackageUsageRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leftuinnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxuinnum_) -
    reinterpret_cast<char*>(&leftuinnum_)) + sizeof(maxuinnum_));
}

QueryUinPackageUsageRsp::~QueryUinPackageUsageRsp() {
  // @@protoc_insertion_point(destructor:oidb.QueryUinPackageUsageRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryUinPackageUsageRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryUinPackageUsageRsp::ArenaDtor(void* object) {
  QueryUinPackageUsageRsp* _this = reinterpret_cast< QueryUinPackageUsageRsp* >(object);
  (void)_this;
}
void QueryUinPackageUsageRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryUinPackageUsageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryUinPackageUsageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.QueryUinPackageUsageRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uinpackageusedlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&leftuinnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxuinnum_) -
        reinterpret_cast<char*>(&leftuinnum_)) + sizeof(maxuinnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUinPackageUsageRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 leftUinNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leftuinnum(&has_bits);
          leftuinnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 maxUinNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxuinnum(&has_bits);
          maxuinnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 proportion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_proportion(&has_bits);
          proportion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .oidb.UinPackageUsedInfo uinPackageUsedList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uinpackageusedlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryUinPackageUsageRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.QueryUinPackageUsageRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // optional uint64 leftUinNum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leftuinnum(), target);
  }

  // optional uint64 maxUinNum = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_maxuinnum(), target);
  }

  // optional uint32 proportion = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_proportion(), target);
  }

  // repeated .oidb.UinPackageUsedInfo uinPackageUsedList = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uinpackageusedlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_uinpackageusedlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.QueryUinPackageUsageRsp)
  return target;
}

size_t QueryUinPackageUsageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.QueryUinPackageUsageRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oidb.UinPackageUsedInfo uinPackageUsedList = 10;
  total_size += 1UL * this->_internal_uinpackageusedlist_size();
  for (const auto& msg : this->uinpackageusedlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 leftUinNum = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_leftuinnum());
    }

    // optional uint32 status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

    // optional uint32 proportion = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proportion());
    }

    // optional uint64 maxUinNum = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_maxuinnum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUinPackageUsageRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryUinPackageUsageRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUinPackageUsageRsp::GetClassData() const { return &_class_data_; }

void QueryUinPackageUsageRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryUinPackageUsageRsp *>(to)->MergeFrom(
      static_cast<const QueryUinPackageUsageRsp &>(from));
}


void QueryUinPackageUsageRsp::MergeFrom(const QueryUinPackageUsageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.QueryUinPackageUsageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uinpackageusedlist_.MergeFrom(from.uinpackageusedlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      leftuinnum_ = from.leftuinnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      proportion_ = from.proportion_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxuinnum_ = from.maxuinnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUinPackageUsageRsp::CopyFrom(const QueryUinPackageUsageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.QueryUinPackageUsageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUinPackageUsageRsp::IsInitialized() const {
  return true;
}

void QueryUinPackageUsageRsp::InternalSwap(QueryUinPackageUsageRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uinpackageusedlist_.InternalSwap(&other->uinpackageusedlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryUinPackageUsageRsp, maxuinnum_)
      + sizeof(QueryUinPackageUsageRsp::maxuinnum_)
      - PROTOBUF_FIELD_OFFSET(QueryUinPackageUsageRsp, leftuinnum_)>(
          reinterpret_cast<char*>(&leftuinnum_),
          reinterpret_cast<char*>(&other->leftuinnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUinPackageUsageRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[8]);
}

// ===================================================================

class D769ReqBody::_Internal {
 public:
  using HasBits = decltype(std::declval<D769ReqBody>()._has_bits_);
  static const ::oidb::D769DeviceInfo& deviceinfo(const D769ReqBody* msg);
  static void set_has_deviceinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_province(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reqdebugmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::oidb::QueryUinPackageUsageReq& queryuinpackageusagereq(const D769ReqBody* msg);
  static void set_has_queryuinpackageusagereq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::oidb::D769DeviceInfo&
D769ReqBody::_Internal::deviceinfo(const D769ReqBody* msg) {
  return *msg->deviceinfo_;
}
const ::oidb::QueryUinPackageUsageReq&
D769ReqBody::_Internal::queryuinpackageusagereq(const D769ReqBody* msg) {
  return *msg->queryuinpackageusagereq_;
}
D769ReqBody::D769ReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  configlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.D769ReqBody)
}
D769ReqBody::D769ReqBody(const D769ReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      configlist_(from.configlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_info()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  province_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_province()) {
    province_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_province(), 
      GetArenaForAllocation());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_city()) {
    city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_city(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_deviceinfo()) {
    deviceinfo_ = new ::oidb::D769DeviceInfo(*from.deviceinfo_);
  } else {
    deviceinfo_ = nullptr;
  }
  if (from._internal_has_queryuinpackageusagereq()) {
    queryuinpackageusagereq_ = new ::oidb::QueryUinPackageUsageReq(*from.queryuinpackageusagereq_);
  } else {
    queryuinpackageusagereq_ = nullptr;
  }
  reqdebugmsg_ = from.reqdebugmsg_;
  // @@protoc_insertion_point(copy_constructor:oidb.D769ReqBody)
}

void D769ReqBody::SharedCtor() {
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
province_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deviceinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reqdebugmsg_) -
    reinterpret_cast<char*>(&deviceinfo_)) + sizeof(reqdebugmsg_));
}

D769ReqBody::~D769ReqBody() {
  // @@protoc_insertion_point(destructor:oidb.D769ReqBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void D769ReqBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deviceinfo_;
  if (this != internal_default_instance()) delete queryuinpackageusagereq_;
}

void D769ReqBody::ArenaDtor(void* object) {
  D769ReqBody* _this = reinterpret_cast< D769ReqBody* >(object);
  (void)_this;
}
void D769ReqBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void D769ReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void D769ReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.D769ReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      province_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      city_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deviceinfo_ != nullptr);
      deviceinfo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(queryuinpackageusagereq_ != nullptr);
      queryuinpackageusagereq_->Clear();
    }
  }
  reqdebugmsg_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* D769ReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .oidb.D769ConfigSeq configList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.D769DeviceInfo deviceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.D769ReqBody.info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string province = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_province();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.D769ReqBody.province");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string city = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.D769ReqBody.city");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reqDebugMsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reqdebugmsg(&has_bits);
          reqdebugmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.QueryUinPackageUsageReq queryUinPackageUsageReq = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryuinpackageusagereq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* D769ReqBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.D769ReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .oidb.D769ConfigSeq configList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configlist(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .oidb.D769DeviceInfo deviceInfo = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deviceinfo(this), target, stream);
  }

  // optional string info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.D769ReqBody.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  // optional string province = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_province().data(), static_cast<int>(this->_internal_province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.D769ReqBody.province");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_province(), target);
  }

  // optional string city = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.D769ReqBody.city");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_city(), target);
  }

  // optional int32 reqDebugMsg = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_reqdebugmsg(), target);
  }

  // optional .oidb.QueryUinPackageUsageReq queryUinPackageUsageReq = 101;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::queryuinpackageusagereq(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.D769ReqBody)
  return target;
}

size_t D769ReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.D769ReqBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oidb.D769ConfigSeq configList = 1;
  total_size += 1UL * this->_internal_configlist_size();
  for (const auto& msg : this->configlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info());
    }

    // optional string province = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_province());
    }

    // optional string city = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // optional .oidb.D769DeviceInfo deviceInfo = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deviceinfo_);
    }

    // optional .oidb.QueryUinPackageUsageReq queryUinPackageUsageReq = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *queryuinpackageusagereq_);
    }

    // optional int32 reqDebugMsg = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqdebugmsg());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData D769ReqBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    D769ReqBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*D769ReqBody::GetClassData() const { return &_class_data_; }

void D769ReqBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<D769ReqBody *>(to)->MergeFrom(
      static_cast<const D769ReqBody &>(from));
}


void D769ReqBody::MergeFrom(const D769ReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.D769ReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configlist_.MergeFrom(from.configlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_province(from._internal_province());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_deviceinfo()->::oidb::D769DeviceInfo::MergeFrom(from._internal_deviceinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_queryuinpackageusagereq()->::oidb::QueryUinPackageUsageReq::MergeFrom(from._internal_queryuinpackageusagereq());
    }
    if (cached_has_bits & 0x00000020u) {
      reqdebugmsg_ = from.reqdebugmsg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void D769ReqBody::CopyFrom(const D769ReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.D769ReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D769ReqBody::IsInitialized() const {
  return true;
}

void D769ReqBody::InternalSwap(D769ReqBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configlist_.InternalSwap(&other->configlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &province_, lhs_arena,
      &other->province_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &city_, lhs_arena,
      &other->city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(D769ReqBody, reqdebugmsg_)
      + sizeof(D769ReqBody::reqdebugmsg_)
      - PROTOBUF_FIELD_OFFSET(D769ReqBody, deviceinfo_)>(
          reinterpret_cast<char*>(&deviceinfo_),
          reinterpret_cast<char*>(&other->deviceinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata D769ReqBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[9]);
}

// ===================================================================

class D769RspBody::_Internal {
 public:
  using HasBits = decltype(std::declval<D769RspBody>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::oidb::QueryUinPackageUsageRsp& queryuinpackageusagersp(const D769RspBody* msg);
  static void set_has_queryuinpackageusagersp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::oidb::QueryUinPackageUsageRsp&
D769RspBody::_Internal::queryuinpackageusagersp(const D769RspBody* msg) {
  return *msg->queryuinpackageusagersp_;
}
D769RspBody::D769RspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  configlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.D769RspBody)
}
D769RspBody::D769RspBody(const D769RspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      configlist_(from.configlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_queryuinpackageusagersp()) {
    queryuinpackageusagersp_ = new ::oidb::QueryUinPackageUsageRsp(*from.queryuinpackageusagersp_);
  } else {
    queryuinpackageusagersp_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:oidb.D769RspBody)
}

void D769RspBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&queryuinpackageusagersp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&queryuinpackageusagersp_)) + sizeof(result_));
}

D769RspBody::~D769RspBody() {
  // @@protoc_insertion_point(destructor:oidb.D769RspBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void D769RspBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete queryuinpackageusagersp_;
}

void D769RspBody::ArenaDtor(void* object) {
  D769RspBody* _this = reinterpret_cast< D769RspBody* >(object);
  (void)_this;
}
void D769RspBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void D769RspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void D769RspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.D769RspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(queryuinpackageusagersp_ != nullptr);
    queryuinpackageusagersp_->Clear();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* D769RspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .oidb.D769ConfigSeq configList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .oidb.QueryUinPackageUsageRsp queryUinPackageUsageRsp = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryuinpackageusagersp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* D769RspBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.D769RspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated .oidb.D769ConfigSeq configList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_configlist(i), target, stream);
  }

  // optional .oidb.QueryUinPackageUsageRsp queryUinPackageUsageRsp = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::queryuinpackageusagersp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.D769RspBody)
  return target;
}

size_t D769RspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.D769RspBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oidb.D769ConfigSeq configList = 2;
  total_size += 1UL * this->_internal_configlist_size();
  for (const auto& msg : this->configlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .oidb.QueryUinPackageUsageRsp queryUinPackageUsageRsp = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *queryuinpackageusagersp_);
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData D769RspBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    D769RspBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*D769RspBody::GetClassData() const { return &_class_data_; }

void D769RspBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<D769RspBody *>(to)->MergeFrom(
      static_cast<const D769RspBody &>(from));
}


void D769RspBody::MergeFrom(const D769RspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.D769RspBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configlist_.MergeFrom(from.configlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_queryuinpackageusagersp()->::oidb::QueryUinPackageUsageRsp::MergeFrom(from._internal_queryuinpackageusagersp());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void D769RspBody::CopyFrom(const D769RspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.D769RspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D769RspBody::IsInitialized() const {
  return true;
}

void D769RspBody::InternalSwap(D769RspBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configlist_.InternalSwap(&other->configlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(D769RspBody, result_)
      + sizeof(D769RspBody::result_)
      - PROTOBUF_FIELD_OFFSET(D769RspBody, queryuinpackageusagersp_)>(
          reinterpret_cast<char*>(&queryuinpackageusagersp_),
          reinterpret_cast<char*>(&other->queryuinpackageusagersp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata D769RspBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[10]);
}

// ===================================================================

class Screen::_Internal {
 public:
  using HasBits = decltype(std::declval<Screen>()._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dpi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_multitouch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Screen::Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.Screen)
}
Screen::Screen(const Screen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&multitouch_) -
    reinterpret_cast<char*>(&width_)) + sizeof(multitouch_));
  // @@protoc_insertion_point(copy_constructor:oidb.Screen)
}

void Screen::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multitouch_) -
    reinterpret_cast<char*>(&width_)) + sizeof(multitouch_));
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:oidb.Screen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Screen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Screen::ArenaDtor(void* object) {
  Screen* _this = reinterpret_cast< Screen* >(object);
  (void)_this;
}
void Screen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multitouch_) -
        reinterpret_cast<char*>(&width_)) + sizeof(multitouch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Screen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.Screen.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dpi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dpi(&has_bits);
          dpi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool multiTouch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_multitouch(&has_bits);
          multitouch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Screen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.Screen.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 dpi = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dpi(), target);
  }

  // optional bool multiTouch = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_multitouch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.Screen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string model = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 dpi = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dpi());
    }

    // optional bool multiTouch = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Screen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Screen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Screen::GetClassData() const { return &_class_data_; }

void Screen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Screen *>(to)->MergeFrom(
      static_cast<const Screen &>(from));
}


void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      dpi_ = from.dpi_;
    }
    if (cached_has_bits & 0x00000010u) {
      multitouch_ = from.multitouch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::InternalSwap(Screen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Screen, multitouch_)
      + sizeof(Screen::multitouch_)
      - PROTOBUF_FIELD_OFFSET(Screen, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Screen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[11]);
}

// ===================================================================

class Storage::_Internal {
 public:
  using HasBits = decltype(std::declval<Storage>()._has_bits_);
  static void set_has_builtin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Storage::Storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.Storage)
}
Storage::Storage(const Storage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&builtin_, &from.builtin_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_) -
    reinterpret_cast<char*>(&builtin_)) + sizeof(external_));
  // @@protoc_insertion_point(copy_constructor:oidb.Storage)
}

void Storage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&builtin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&external_) -
    reinterpret_cast<char*>(&builtin_)) + sizeof(external_));
}

Storage::~Storage() {
  // @@protoc_insertion_point(destructor:oidb.Storage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Storage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Storage::ArenaDtor(void* object) {
  Storage* _this = reinterpret_cast< Storage* >(object);
  (void)_this;
}
void Storage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Storage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Storage::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.Storage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&builtin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&external_) -
        reinterpret_cast<char*>(&builtin_)) + sizeof(external_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Storage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 builtin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_builtin(&has_bits);
          builtin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 external = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_external(&has_bits);
          external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Storage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.Storage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 builtin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_builtin(), target);
  }

  // optional uint64 external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_external(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.Storage)
  return target;
}

size_t Storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.Storage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 builtin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_builtin());
    }

    // optional uint64 external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_external());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Storage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Storage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Storage::GetClassData() const { return &_class_data_; }

void Storage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Storage *>(to)->MergeFrom(
      static_cast<const Storage &>(from));
}


void Storage::MergeFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.Storage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      builtin_ = from.builtin_;
    }
    if (cached_has_bits & 0x00000002u) {
      external_ = from.external_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Storage::CopyFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Storage::IsInitialized() const {
  return true;
}

void Storage::InternalSwap(Storage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Storage, external_)
      + sizeof(Storage::external_)
      - PROTOBUF_FIELD_OFFSET(Storage, builtin_)>(
          reinterpret_cast<char*>(&builtin_),
          reinterpret_cast<char*>(&other->builtin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Storage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[12]);
}

// ===================================================================

class UinPackageUsedInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UinPackageUsedInfo>()._has_bits_);
  static void set_has_ruleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uinnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UinPackageUsedInfo::UinPackageUsedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oidb.UinPackageUsedInfo)
}
UinPackageUsedInfo::UinPackageUsedInfo(const UinPackageUsedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_author()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uinnum_, &from.uinnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&ruleid_) -
    reinterpret_cast<char*>(&uinnum_)) + sizeof(ruleid_));
  // @@protoc_insertion_point(copy_constructor:oidb.UinPackageUsedInfo)
}

void UinPackageUsedInfo::SharedCtor() {
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uinnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ruleid_) -
    reinterpret_cast<char*>(&uinnum_)) + sizeof(ruleid_));
}

UinPackageUsedInfo::~UinPackageUsedInfo() {
  // @@protoc_insertion_point(destructor:oidb.UinPackageUsedInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UinPackageUsedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UinPackageUsedInfo::ArenaDtor(void* object) {
  UinPackageUsedInfo* _this = reinterpret_cast< UinPackageUsedInfo* >(object);
  (void)_this;
}
void UinPackageUsedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UinPackageUsedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UinPackageUsedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:oidb.UinPackageUsedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      author_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&uinnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ruleid_) -
        reinterpret_cast<char*>(&uinnum_)) + sizeof(ruleid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UinPackageUsedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ruleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ruleid(&has_bits);
          ruleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.UinPackageUsedInfo.author");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oidb.UinPackageUsedInfo.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uinNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinnum(&has_bits);
          uinnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UinPackageUsedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oidb.UinPackageUsedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ruleId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ruleid(), target);
  }

  // optional string author = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.UinPackageUsedInfo.author");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_author(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "oidb.UinPackageUsedInfo.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional uint64 uinNum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_uinnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oidb.UinPackageUsedInfo)
  return target;
}

size_t UinPackageUsedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oidb.UinPackageUsedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string author = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_author());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint64 uinNum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uinnum());
    }

    // optional uint32 ruleId = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ruleid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UinPackageUsedInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UinPackageUsedInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UinPackageUsedInfo::GetClassData() const { return &_class_data_; }

void UinPackageUsedInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UinPackageUsedInfo *>(to)->MergeFrom(
      static_cast<const UinPackageUsedInfo &>(from));
}


void UinPackageUsedInfo::MergeFrom(const UinPackageUsedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oidb.UinPackageUsedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_author(from._internal_author());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      uinnum_ = from.uinnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      ruleid_ = from.ruleid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UinPackageUsedInfo::CopyFrom(const UinPackageUsedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oidb.UinPackageUsedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UinPackageUsedInfo::IsInitialized() const {
  return true;
}

void UinPackageUsedInfo::InternalSwap(UinPackageUsedInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &author_, lhs_arena,
      &other->author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UinPackageUsedInfo, ruleid_)
      + sizeof(UinPackageUsedInfo::ruleid_)
      - PROTOBUF_FIELD_OFFSET(UinPackageUsedInfo, uinnum_)>(
          reinterpret_cast<char*>(&uinnum_),
          reinterpret_cast<char*>(&other->uinnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UinPackageUsedInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oidb0x769_2eproto_getter, &descriptor_table_oidb0x769_2eproto_once,
      file_level_metadata_oidb0x769_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oidb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::oidb::CPU* Arena::CreateMaybeMessage< ::oidb::CPU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::CPU >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::Camera* Arena::CreateMaybeMessage< ::oidb::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::D769ConfigSeq* Arena::CreateMaybeMessage< ::oidb::D769ConfigSeq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::D769ConfigSeq >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::Content* Arena::CreateMaybeMessage< ::oidb::Content >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::Content >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::D769DeviceInfo* Arena::CreateMaybeMessage< ::oidb::D769DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::D769DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::Memory* Arena::CreateMaybeMessage< ::oidb::Memory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::Memory >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::C41219OS* Arena::CreateMaybeMessage< ::oidb::C41219OS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::C41219OS >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::QueryUinPackageUsageReq* Arena::CreateMaybeMessage< ::oidb::QueryUinPackageUsageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::QueryUinPackageUsageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::QueryUinPackageUsageRsp* Arena::CreateMaybeMessage< ::oidb::QueryUinPackageUsageRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::QueryUinPackageUsageRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::D769ReqBody* Arena::CreateMaybeMessage< ::oidb::D769ReqBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::D769ReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::D769RspBody* Arena::CreateMaybeMessage< ::oidb::D769RspBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::D769RspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::Screen* Arena::CreateMaybeMessage< ::oidb::Screen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::Storage* Arena::CreateMaybeMessage< ::oidb::Storage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::Storage >(arena);
}
template<> PROTOBUF_NOINLINE ::oidb::UinPackageUsedInfo* Arena::CreateMaybeMessage< ::oidb::UinPackageUsedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oidb::UinPackageUsedInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
